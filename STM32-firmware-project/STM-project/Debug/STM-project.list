
BAG_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a538  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800a6d8  0800a6d8  0000b6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae98  0800ae98  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aea0  0800aea0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aea0  0800aea0  0000bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aea4  0800aea4  0000bea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aea8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d10  200001d8  0800b080  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee8  0800b080  0000cee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012243  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a01  00000000  00000000  0001e44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00020e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d83  00000000  00000000  00021f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001855e  00000000  00000000  00022cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014dd8  00000000  00000000  0003b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939cc  00000000  00000000  00050031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e39fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dac  00000000  00000000  000e3a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e97ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6c0 	.word	0x0800a6c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a6c0 	.word	0x0800a6c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <DWT_Delay_Init+0x58>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <DWT_Delay_Init+0x58>)
 8000f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f76:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <DWT_Delay_Init+0x58>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <DWT_Delay_Init+0x58>)
 8000f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f82:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <DWT_Delay_Init+0x5c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <DWT_Delay_Init+0x5c>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <DWT_Delay_Init+0x5c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <DWT_Delay_Init+0x5c>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <DWT_Delay_Init+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000fa2:	bf00      	nop
  __ASM volatile ("NOP");
 8000fa4:	bf00      	nop
  __ASM volatile ("NOP");
 8000fa6:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <DWT_Delay_Init+0x5c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000fb4:	2301      	movs	r3, #1
  }

}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000edf0 	.word	0xe000edf0
 8000fc4:	e0001000 	.word	0xe0001000

08000fc8 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <DWT_Delay_us+0x40>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fd6:	f004 f883 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <DWT_Delay_us+0x44>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0c9b      	lsrs	r3, r3, #18
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fec:	bf00      	nop
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <DWT_Delay_us+0x40>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad2      	subs	r2, r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3f8      	bcc.n	8000fee <DWT_Delay_us+0x26>
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e0001000 	.word	0xe0001000
 800100c:	431bde83 	.word	0x431bde83

08001010 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f002 f9f6 	bl	8003430 <HAL_GPIO_Init>
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f002 f9da 	bl	8003430 <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001088:	f7ff ff6e 	bl	8000f68 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800108c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001090:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <DHT11_Init+0x2c>)
 8001092:	f7ff ffbd 	bl	8001010 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <DHT11_Init+0x2c>)
 800109e:	f002 fb63 	bl	8003768 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a6:	f001 fffb 	bl	80030a0 <HAL_Delay>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020800 	.word	0x40020800

080010b4 <DHT11_Start>:

void DHT11_Start (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010bc:	4811      	ldr	r0, [pc, #68]	@ (8001104 <DHT11_Start+0x50>)
 80010be:	f7ff ffa7 	bl	8001010 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c8:	480e      	ldr	r0, [pc, #56]	@ (8001104 <DHT11_Start+0x50>)
 80010ca:	f002 fb4d 	bl	8003768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d4:	480b      	ldr	r0, [pc, #44]	@ (8001104 <DHT11_Start+0x50>)
 80010d6:	f002 fb47 	bl	8003768 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 80010da:	f244 6050 	movw	r0, #18000	@ 0x4650
 80010de:	f7ff ff73 	bl	8000fc8 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <DHT11_Start+0x50>)
 80010ea:	f002 fb3d 	bl	8003768 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 80010ee:	2014      	movs	r0, #20
 80010f0:	f7ff ff6a 	bl	8000fc8 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <DHT11_Start+0x50>)
 80010fa:	f7ff ffa7 	bl	800104c <Set_Pin_Input>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020800 	.word	0x40020800

08001108 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800110c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <DHT11_Stop+0x20>)
 8001112:	f7ff ff7d 	bl	8001010 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <DHT11_Stop+0x20>)
 800111e:	f002 fb23 	bl	8003768 <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020800 	.word	0x40020800

0800112c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001136:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800113a:	4812      	ldr	r0, [pc, #72]	@ (8001184 <DHT11_Check_Response+0x58>)
 800113c:	f002 fafc 	bl	8003738 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10f      	bne.n	8001166 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8001146:	2050      	movs	r0, #80	@ 0x50
 8001148:	f7ff ff3e 	bl	8000fc8 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800114c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <DHT11_Check_Response+0x58>)
 8001152:	f002 faf1 	bl	8003738 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <DHT11_Check_Response+0x36>
 800115c:	2301      	movs	r3, #1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	e001      	b.n	8001166 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 8001162:	23ff      	movs	r3, #255	@ 0xff
 8001164:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001166:	bf00      	nop
 8001168:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <DHT11_Check_Response+0x58>)
 800116e:	f002 fae3 	bl	8003738 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f7      	bne.n	8001168 <DHT11_Check_Response+0x3c>

	return Response;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020800 	.word	0x40020800

08001188 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800118e:	2300      	movs	r3, #0
 8001190:	71bb      	strb	r3, [r7, #6]
 8001192:	e03a      	b.n	800120a <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001194:	bf00      	nop
 8001196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800119a:	4820      	ldr	r0, [pc, #128]	@ (800121c <DHT11_Read+0x94>)
 800119c:	f002 facc 	bl	8003738 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f7      	beq.n	8001196 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 80011a6:	2028      	movs	r0, #40	@ 0x28
 80011a8:	f7ff ff0e 	bl	8000fc8 <DWT_Delay_us>
//		delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b0:	481a      	ldr	r0, [pc, #104]	@ (800121c <DHT11_Read+0x94>)
 80011b2:	f002 fac1 	bl	8003738 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2201      	movs	r2, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	e00b      	b.n	80011f2 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	f1c3 0307 	rsb	r3, r3, #7
 80011e0:	2201      	movs	r2, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011f2:	bf00      	nop
 80011f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f8:	4808      	ldr	r0, [pc, #32]	@ (800121c <DHT11_Read+0x94>)
 80011fa:	f002 fa9d 	bl	8003738 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f7      	bne.n	80011f4 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	3301      	adds	r3, #1
 8001208:	71bb      	strb	r3, [r7, #6]
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	2b07      	cmp	r3, #7
 800120e:	d9c1      	bls.n	8001194 <DHT11_Read+0xc>
	}
	return i;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800

08001220 <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8001228:	f7ff ff44 	bl	80010b4 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 800122c:	f7ff ff7e 	bl	800112c <DHT11_Check_Response>
 8001230:	4603      	mov	r3, r0
 8001232:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8001234:	f7ff ffa8 	bl	8001188 <DHT11_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 800123c:	f7ff ffa4 	bl	8001188 <DHT11_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8001244:	f7ff ffa0 	bl	8001188 <DHT11_Read>
 8001248:	4603      	mov	r3, r0
 800124a:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 800124c:	f7ff ff9c 	bl	8001188 <DHT11_Read>
 8001250:	4603      	mov	r3, r0
 8001252:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8001254:	f7ff ff98 	bl	8001188 <DHT11_Read>
 8001258:	4603      	mov	r3, r0
 800125a:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 800125c:	f7ff ff54 	bl	8001108 <DHT11_Stop>
	return dht11;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	461a      	mov	r2, r3
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	6010      	str	r0, [r2, #0]
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	8093      	strh	r3, [r2, #4]
}
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 800128c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001290:	2100      	movs	r1, #0
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f006 fea6 	bl	8007fe4 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001298:	f240 4202 	movw	r2, #1026	@ 0x402
 800129c:	2100      	movs	r1, #0
 800129e:	4827      	ldr	r0, [pc, #156]	@ (800133c <esp_at_command+0xc4>)
 80012a0:	f006 fea0 	bl	8007fe4 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7fe fffb 	bl	80002a0 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	2364      	movs	r3, #100	@ 0x64
 80012b0:	68f9      	ldr	r1, [r7, #12]
 80012b2:	4823      	ldr	r0, [pc, #140]	@ (8001340 <esp_at_command+0xc8>)
 80012b4:	f004 ff7e 	bl	80061b4 <HAL_UART_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d031      	beq.n	8001322 <esp_at_command+0xaa>
        return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e037      	b.n	8001334 <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <esp_at_command+0xc4>)
 80012c6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ce:	d302      	bcc.n	80012d6 <esp_at_command+0x5e>
            return -2;
 80012d0:	f06f 0301 	mvn.w	r3, #1
 80012d4:	e02e      	b.n	8001334 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80012d6:	491b      	ldr	r1, [pc, #108]	@ (8001344 <esp_at_command+0xcc>)
 80012d8:	4818      	ldr	r0, [pc, #96]	@ (800133c <esp_at_command+0xc4>)
 80012da:	f006 ff07 	bl	80080ec <strstr>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <esp_at_command+0x72>
            return -3;
 80012e4:	f06f 0302 	mvn.w	r3, #2
 80012e8:	e024      	b.n	8001334 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80012ea:	4917      	ldr	r1, [pc, #92]	@ (8001348 <esp_at_command+0xd0>)
 80012ec:	4813      	ldr	r0, [pc, #76]	@ (800133c <esp_at_command+0xc4>)
 80012ee:	f006 fefd 	bl	80080ec <strstr>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00d      	beq.n	8001314 <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <esp_at_command+0xc4>)
 80012fa:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012fe:	461a      	mov	r2, r3
 8001300:	490e      	ldr	r1, [pc, #56]	@ (800133c <esp_at_command+0xc4>)
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f006 ff87 	bl	8008216 <memcpy>
            *length = cb_data.length;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <esp_at_command+0xc4>)
 800130a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	801a      	strh	r2, [r3, #0]

            break;
 8001312:	e00a      	b.n	800132a <esp_at_command+0xb2>
        }

        time_out -= 10;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	3b0a      	subs	r3, #10
 8001318:	b29b      	uxth	r3, r3
 800131a:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 800131c:	200a      	movs	r0, #10
 800131e:	f001 febf 	bl	80030a0 <HAL_Delay>
    while(time_out > 0)
 8001322:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001326:	2b00      	cmp	r3, #0
 8001328:	dccc      	bgt.n	80012c4 <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800132e:	f001 feb7 	bl	80030a0 <HAL_Delay>
    return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000684 	.word	0x20000684
 8001340:	20000a88 	.word	0x20000a88
 8001344:	0800a6d8 	.word	0x0800a6d8
 8001348:	0800a6e0 	.word	0x0800a6e0

0800134c <esp_reset>:

static int esp_reset(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001356:	1dba      	adds	r2, r7, #6
 8001358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135c:	490a      	ldr	r1, [pc, #40]	@ (8001388 <esp_reset+0x3c>)
 800135e:	480b      	ldr	r0, [pc, #44]	@ (800138c <esp_reset+0x40>)
 8001360:	f7ff ff8a 	bl	8001278 <esp_at_command>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <esp_reset+0x24>
    {
       return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e007      	b.n	8001380 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8001370:	1dba      	adds	r2, r7, #6
 8001372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001376:	4904      	ldr	r1, [pc, #16]	@ (8001388 <esp_reset+0x3c>)
 8001378:	4805      	ldr	r0, [pc, #20]	@ (8001390 <esp_reset+0x44>)
 800137a:	f7ff ff7d 	bl	8001278 <esp_at_command>
 800137e:	4603      	mov	r3, r0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000204 	.word	0x20000204
 800138c:	0800a6e4 	.word	0x0800a6e4
 8001390:	0800a6f0 	.word	0x0800a6f0

08001394 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80013a2:	f107 020a 	add.w	r2, r7, #10
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	492d      	ldr	r1, [pc, #180]	@ (8001460 <request_ip_addr+0xcc>)
 80013ac:	482d      	ldr	r0, [pc, #180]	@ (8001464 <request_ip_addr+0xd0>)
 80013ae:	f7ff ff63 	bl	8001278 <esp_at_command>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80013b8:	482b      	ldr	r0, [pc, #172]	@ (8001468 <request_ip_addr+0xd4>)
 80013ba:	f006 fd13 	bl	8007de4 <puts>
 80013be:	e049      	b.n	8001454 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80013c0:	492a      	ldr	r1, [pc, #168]	@ (800146c <request_ip_addr+0xd8>)
 80013c2:	4827      	ldr	r0, [pc, #156]	@ (8001460 <request_ip_addr+0xcc>)
 80013c4:	f006 fe36 	bl	8008034 <strtok>
 80013c8:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d03e      	beq.n	800144e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	e009      	b.n	80013ea <request_ip_addr+0x56>
                printf("%c", response[i]);
 80013d6:	4a22      	ldr	r2, [pc, #136]	@ (8001460 <request_ip_addr+0xcc>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 fca2 	bl	8007d28 <putchar>
            for(int i = 0 ; i < length ; i++)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	3301      	adds	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	461a      	mov	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	dbf0      	blt.n	80013d6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80013f4:	e02b      	b.n	800144e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80013f6:	491e      	ldr	r1, [pc, #120]	@ (8001470 <request_ip_addr+0xdc>)
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f006 fe77 	bl	80080ec <strstr>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01f      	beq.n	8001444 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001404:	491b      	ldr	r1, [pc, #108]	@ (8001474 <request_ip_addr+0xe0>)
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f006 fe14 	bl	8008034 <strtok>
                ip = strtok(NULL, "\"");
 800140c:	4919      	ldr	r1, [pc, #100]	@ (8001474 <request_ip_addr+0xe0>)
 800140e:	2000      	movs	r0, #0
 8001410:	f006 fe10 	bl	8008034 <strtok>
 8001414:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8001416:	4918      	ldr	r1, [pc, #96]	@ (8001478 <request_ip_addr+0xe4>)
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7fe fee1 	bl	80001e0 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00f      	beq.n	8001444 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001424:	2210      	movs	r2, #16
 8001426:	2100      	movs	r1, #0
 8001428:	4814      	ldr	r0, [pc, #80]	@ (800147c <request_ip_addr+0xe8>)
 800142a:	f006 fddb 	bl	8007fe4 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7fe ff36 	bl	80002a0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	4810      	ldr	r0, [pc, #64]	@ (800147c <request_ip_addr+0xe8>)
 800143c:	f006 feeb 	bl	8008216 <memcpy>
                    return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e009      	b.n	8001458 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001444:	4909      	ldr	r1, [pc, #36]	@ (800146c <request_ip_addr+0xd8>)
 8001446:	2000      	movs	r0, #0
 8001448:	f006 fdf4 	bl	8008034 <strtok>
 800144c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1d0      	bne.n	80013f6 <request_ip_addr+0x62>
        }
    }

    return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000204 	.word	0x20000204
 8001464:	0800a734 	.word	0x0800a734
 8001468:	0800a740 	.word	0x0800a740
 800146c:	0800a728 	.word	0x0800a728
 8001470:	0800a760 	.word	0x0800a760
 8001474:	0800a730 	.word	0x0800a730
 8001478:	0800a6f8 	.word	0x0800a6f8
 800147c:	200001f4 	.word	0x200001f4

08001480 <esp_client_conn>:
int esp_client_conn()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b092      	sub	sp, #72	@ 0x48
 8001484:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	223c      	movs	r2, #60	@ 0x3c
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fda6 	bl	8007fe4 <memset>
  uint16_t length = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 800149c:	f107 0008 	add.w	r0, r7, #8
 80014a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014a4:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <esp_client_conn+0x4c>)
 80014a6:	490a      	ldr	r1, [pc, #40]	@ (80014d0 <esp_client_conn+0x50>)
 80014a8:	f006 fca4 	bl	8007df4 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80014ac:	1dba      	adds	r2, r7, #6
 80014ae:	f107 0008 	add.w	r0, r7, #8
 80014b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b6:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <esp_client_conn+0x54>)
 80014b8:	f7ff fede 	bl	8001278 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80014bc:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <esp_client_conn+0x58>)
 80014be:	f000 f95d 	bl	800177c <esp_send_data>
	return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3748      	adds	r7, #72	@ 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0800a76c 	.word	0x0800a76c
 80014d0:	0800a778 	.word	0x0800a778
 80014d4:	20000204 	.word	0x20000204
 80014d8:	0800a794 	.word	0x0800a794

080014dc <drv_esp_init>:

int drv_esp_init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <drv_esp_init+0x68>)
 80014e2:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <drv_esp_init+0x6c>)
 80014e4:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <drv_esp_init+0x68>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <drv_esp_init+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <drv_esp_init+0x68>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <drv_esp_init+0x68>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <drv_esp_init+0x68>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <drv_esp_init+0x68>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <drv_esp_init+0x68>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <drv_esp_init+0x68>)
 8001514:	f004 fdfe 	bl	8006114 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <drv_esp_init+0x48>
        return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e00c      	b.n	800153e <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001524:	2210      	movs	r2, #16
 8001526:	2100      	movs	r1, #0
 8001528:	4808      	ldr	r0, [pc, #32]	@ (800154c <drv_esp_init+0x70>)
 800152a:	f006 fd5b 	bl	8007fe4 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 800152e:	2201      	movs	r2, #1
 8001530:	4907      	ldr	r1, [pc, #28]	@ (8001550 <drv_esp_init+0x74>)
 8001532:	4804      	ldr	r0, [pc, #16]	@ (8001544 <drv_esp_init+0x68>)
 8001534:	f004 fec9 	bl	80062ca <HAL_UART_Receive_IT>

    return esp_reset();
 8001538:	f7ff ff08 	bl	800134c <esp_reset>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000a88 	.word	0x20000a88
 8001548:	40011400 	.word	0x40011400
 800154c:	200001f4 	.word	0x200001f4
 8001550:	20000683 	.word	0x20000683

08001554 <reset_func>:
void reset_func()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <reset_func+0x28>)
 800155a:	f006 fbd3 	bl	8007d04 <iprintf>
	if(esp_reset() == 0)
 800155e:	f7ff fef5 	bl	800134c <esp_reset>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <reset_func+0x1c>
			printf("OK\r\n");
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <reset_func+0x2c>)
 800156a:	f006 fc3b 	bl	8007de4 <puts>
	else
			printf("fail\r\n");
}
 800156e:	e002      	b.n	8001576 <reset_func+0x22>
			printf("fail\r\n");
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <reset_func+0x30>)
 8001572:	f006 fc37 	bl	8007de4 <puts>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800a7a8 	.word	0x0800a7a8
 8001580:	0800a7b8 	.word	0x0800a7b8
 8001584:	0800a7bc 	.word	0x0800a7bc

08001588 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b096      	sub	sp, #88	@ 0x58
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	223c      	movs	r2, #60	@ 0x3c
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 fd1d 	bl	8007fe4 <memset>
  if(ssid == NULL || passwd == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <ap_conn_func+0x2e>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80015b6:	4832      	ldr	r0, [pc, #200]	@ (8001680 <ap_conn_func+0xf8>)
 80015b8:	f006 fc14 	bl	8007de4 <puts>
 80015bc:	e05c      	b.n	8001678 <ap_conn_func+0xf0>
      return;
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2240      	movs	r2, #64	@ 0x40
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fd0c 	bl	8007fe4 <memset>
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80015cc:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80015d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d4:	492b      	ldr	r1, [pc, #172]	@ (8001684 <ap_conn_func+0xfc>)
 80015d6:	482c      	ldr	r0, [pc, #176]	@ (8001688 <ap_conn_func+0x100>)
 80015d8:	f7ff fe4e 	bl	8001278 <esp_at_command>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <ap_conn_func+0x62>
      printf("Station mode fail\r\n");
 80015e2:	482a      	ldr	r0, [pc, #168]	@ (800168c <ap_conn_func+0x104>)
 80015e4:	f006 fbfe 	bl	8007de4 <puts>
 80015e8:	e012      	b.n	8001610 <ap_conn_func+0x88>
  else
  {
      for(int i = 0 ; i < length ; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80015ee:	e009      	b.n	8001604 <ap_conn_func+0x7c>
          printf("%c", response[i]);
 80015f0:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <ap_conn_func+0xfc>)
 80015f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f006 fb95 	bl	8007d28 <putchar>
      for(int i = 0 ; i < length ; i++)
 80015fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001600:	3301      	adds	r3, #1
 8001602:	657b      	str	r3, [r7, #84]	@ 0x54
 8001604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001608:	461a      	mov	r2, r3
 800160a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160c:	4293      	cmp	r3, r2
 800160e:	dbef      	blt.n	80015f0 <ap_conn_func+0x68>
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2240      	movs	r2, #64	@ 0x40
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f006 fce3 	bl	8007fe4 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 800161e:	f107 000c 	add.w	r0, r7, #12
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	491a      	ldr	r1, [pc, #104]	@ (8001690 <ap_conn_func+0x108>)
 8001628:	f006 fbe4 	bl	8007df4 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 800162c:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001630:	f107 000c 	add.w	r0, r7, #12
 8001634:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001638:	4912      	ldr	r1, [pc, #72]	@ (8001684 <ap_conn_func+0xfc>)
 800163a:	f7ff fe1d 	bl	8001278 <esp_at_command>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <ap_conn_func+0xca>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	4812      	ldr	r0, [pc, #72]	@ (8001694 <ap_conn_func+0x10c>)
 800164c:	f006 fb5a 	bl	8007d04 <iprintf>
 8001650:	e012      	b.n	8001678 <ap_conn_func+0xf0>
  else
  {
      for(int i = 0 ; i < length ; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	653b      	str	r3, [r7, #80]	@ 0x50
 8001656:	e009      	b.n	800166c <ap_conn_func+0xe4>
          printf("%c", response[i]);
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <ap_conn_func+0xfc>)
 800165a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f006 fb61 	bl	8007d28 <putchar>
      for(int i = 0 ; i < length ; i++)
 8001666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001668:	3301      	adds	r3, #1
 800166a:	653b      	str	r3, [r7, #80]	@ 0x50
 800166c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001670:	461a      	mov	r2, r3
 8001672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001674:	4293      	cmp	r3, r2
 8001676:	dbef      	blt.n	8001658 <ap_conn_func+0xd0>
  }
}
 8001678:	3758      	adds	r7, #88	@ 0x58
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800a800 	.word	0x0800a800
 8001684:	20000204 	.word	0x20000204
 8001688:	0800a82c 	.word	0x0800a82c
 800168c:	0800a83c 	.word	0x0800a83c
 8001690:	0800a850 	.word	0x0800a850
 8001694:	0800a868 	.word	0x0800a868

08001698 <HAL_UART_RxCpltCallback>:
//
//    return 0;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <HAL_UART_RxCpltCallback+0x9c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d117      	bne.n	80016da <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_UART_RxCpltCallback+0xa0>)
 80016ac:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b4:	d20c      	bcs.n	80016d0 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_UART_RxCpltCallback+0xa0>)
 80016b8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	b291      	uxth	r1, r2
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_UART_RxCpltCallback+0xa0>)
 80016c2:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_UART_RxCpltCallback+0xa4>)
 80016ca:	7819      	ldrb	r1, [r3, #0]
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_UART_RxCpltCallback+0xa0>)
 80016ce:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80016d0:	2201      	movs	r2, #1
 80016d2:	491a      	ldr	r1, [pc, #104]	@ (800173c <HAL_UART_RxCpltCallback+0xa4>)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f004 fdf8 	bl	80062ca <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <HAL_UART_RxCpltCallback+0xa8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d122      	bne.n	800172a <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_UART_RxCpltCallback+0xac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_UART_RxCpltCallback+0xb0>)
 80016ea:	7811      	ldrb	r1, [r2, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	@ (800174c <HAL_UART_RxCpltCallback+0xb4>)
 80016ee:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_UART_RxCpltCallback+0xac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a15      	ldr	r2, [pc, #84]	@ (800174c <HAL_UART_RxCpltCallback+0xb4>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b0d      	cmp	r3, #13
 80016fc:	d10b      	bne.n	8001716 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_UART_RxCpltCallback+0xac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HAL_UART_RxCpltCallback+0xb4>)
 8001704:	2100      	movs	r1, #0
 8001706:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_UART_RxCpltCallback+0xb8>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    		i = 0;
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <HAL_UART_RxCpltCallback+0xac>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e004      	b.n	8001720 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_UART_RxCpltCallback+0xac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_UART_RxCpltCallback+0xac>)
 800171e:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001720:	2201      	movs	r2, #1
 8001722:	4909      	ldr	r1, [pc, #36]	@ (8001748 <HAL_UART_RxCpltCallback+0xb0>)
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f004 fdd0 	bl	80062ca <HAL_UART_Receive_IT>
    }
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40011400 	.word	0x40011400
 8001738:	20000684 	.word	0x20000684
 800173c:	20000683 	.word	0x20000683
 8001740:	40004400 	.word	0x40004400
 8001744:	20000ad0 	.word	0x20000ad0
 8001748:	20000682 	.word	0x20000682
 800174c:	20000650 	.word	0x20000650
 8001750:	2000064c 	.word	0x2000064c

08001754 <AiotClient_Init>:


void AiotClient_Init()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	reset_func();
 8001758:	f7ff fefc 	bl	8001554 <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 800175c:	4905      	ldr	r1, [pc, #20]	@ (8001774 <AiotClient_Init+0x20>)
 800175e:	4806      	ldr	r0, [pc, #24]	@ (8001778 <AiotClient_Init+0x24>)
 8001760:	f7ff ff12 	bl	8001588 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fe15 	bl	8001394 <request_ip_addr>
	esp_client_conn();
 800176a:	f7ff fe89 	bl	8001480 <esp_client_conn>
//	ip_state_func();
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	0800a8c8 	.word	0x0800a8c8
 8001778:	0800a8d4 	.word	0x0800a8d4

0800177c <esp_send_data>:

void esp_send_data(char *data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	@ 0x50
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	223c      	movs	r2, #60	@ 0x3c
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f006 fc27 	bl	8007fe4 <memset>
  uint16_t length = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fd80 	bl	80002a0 <strlen>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	490e      	ldr	r1, [pc, #56]	@ (80017e0 <esp_send_data+0x64>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f006 fb23 	bl	8007df4 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 80017ae:	f107 020e 	add.w	r2, r7, #14
 80017b2:	f107 0010 	add.w	r0, r7, #16
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	490a      	ldr	r1, [pc, #40]	@ (80017e4 <esp_send_data+0x68>)
 80017bc:	f7ff fd5c 	bl	8001278 <esp_at_command>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80017c6:	f107 020e 	add.w	r2, r7, #14
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	4905      	ldr	r1, [pc, #20]	@ (80017e4 <esp_send_data+0x68>)
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fd51 	bl	8001278 <esp_at_command>
	}
}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	@ 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800a8dc 	.word	0x0800a8dc
 80017e4:	20000204 	.word	0x20000204

080017e8 <UART_Clear_RXNE>:

void UART_Clear_RXNE(UART_HandleTypeDef *huart)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80017f0:	e004      	b.n	80017fc <UART_Clear_RXNE+0x14>
    {
        volatile uint8_t dummy = (uint8_t)(huart->Instance->DR & 0xFF);  // DR에서 데이터 읽기
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	73fb      	strb	r3, [r7, #15]
    while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b20      	cmp	r3, #32
 8001808:	d0f3      	beq.n	80017f2 <UART_Clear_RXNE+0xa>
    }

    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b08      	cmp	r3, #8
 8001816:	d104      	bne.n	8001822 <UART_Clear_RXNE+0x3a>
    {
        __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);  // ORE 플래그 클리어
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0208 	mvn.w	r2, #8
 8001820:	601a      	str	r2, [r3, #0]
    }
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <drv_uart_init+0x58>)
 8001836:	4a15      	ldr	r2, [pc, #84]	@ (800188c <drv_uart_init+0x5c>)
 8001838:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <drv_uart_init+0x58>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <drv_uart_init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <drv_uart_init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <drv_uart_init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <drv_uart_init+0x58>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <drv_uart_init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <drv_uart_init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001866:	4808      	ldr	r0, [pc, #32]	@ (8001888 <drv_uart_init+0x58>)
 8001868:	f004 fc54 	bl	8006114 <HAL_UART_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <drv_uart_init+0x48>
        return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e005      	b.n	8001884 <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001878:	2201      	movs	r2, #1
 800187a:	4905      	ldr	r1, [pc, #20]	@ (8001890 <drv_uart_init+0x60>)
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <drv_uart_init+0x58>)
 800187e:	f004 fd24 	bl	80062ca <HAL_UART_Receive_IT>
    return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000604 	.word	0x20000604
 800188c:	40004400 	.word	0x40004400
 8001890:	20000682 	.word	0x20000682

08001894 <drv_uart_tx_buffer>:

int drv_uart_tx_buffer(uint8_t *buf, uint16_t size)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
    if(HAL_UART_Transmit(&huart2, buf, size, 100) != HAL_OK)
 80018a0:	887a      	ldrh	r2, [r7, #2]
 80018a2:	2364      	movs	r3, #100	@ 0x64
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <drv_uart_tx_buffer+0x30>)
 80018a8:	f004 fc84 	bl	80061b4 <HAL_UART_Transmit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <drv_uart_tx_buffer+0x24>
        return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e000      	b.n	80018ba <drv_uart_tx_buffer+0x26>

    return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000604 	.word	0x20000604

080018c8 <__io_putchar>:
int __io_putchar(int ch)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 80018d0:	1d39      	adds	r1, r7, #4
 80018d2:	230a      	movs	r3, #10
 80018d4:	2201      	movs	r2, #1
 80018d6:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <__io_putchar+0x2c>)
 80018d8:	f004 fc6c 	bl	80061b4 <HAL_UART_Transmit>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <__io_putchar+0x1e>
        return ch;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <__io_putchar+0x22>
    return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000604 	.word	0x20000604

080018f8 <MPU_begin>:
uint8_t _addr = 0;
float _dt = 0.0f, _tau = 0.0f;
float aScaleFactor = 0.0f, gScaleFactor = 0.0f;

uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	4608      	mov	r0, r1
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	ed87 0a01 	vstr	s0, [r7, #4]
 800190a:	edc7 0a00 	vstr	s1, [r7]
 800190e:	4603      	mov	r3, r0
 8001910:	72fb      	strb	r3, [r7, #11]
 8001912:	460b      	mov	r3, r1
 8001914:	72bb      	strb	r3, [r7, #10]
 8001916:	4613      	mov	r3, r2
 8001918:	727b      	strb	r3, [r7, #9]
    // Save values
    _addr = addr << 1;
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <MPU_begin+0xac>)
 8001922:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 8001924:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <MPU_begin+0xb0>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
    _dt = dt;
 800192a:	4a20      	ldr	r2, [pc, #128]	@ (80019ac <MPU_begin+0xb4>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MPU_begin+0xac>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	9302      	str	r3, [sp, #8]
 800193c:	2301      	movs	r3, #1
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	f107 0317 	add.w	r3, r7, #23
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	2275      	movs	r2, #117	@ 0x75
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f002 f97e 	bl	8003c4c <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b71      	cmp	r3, #113	@ 0x71
 8001954:	d002      	beq.n	800195c <MPU_begin+0x64>
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b68      	cmp	r3, #104	@ 0x68
 800195a:	d11d      	bne.n	8001998 <MPU_begin+0xa0>
    {
        // Startup / reset the sensor
        select = 0x00;
 800195c:	2300      	movs	r3, #0
 800195e:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <MPU_begin+0xac>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2301      	movs	r3, #1
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f107 0316 	add.w	r3, r7, #22
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	226b      	movs	r2, #107	@ 0x6b
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f002 f86c 	bl	8003a58 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(I2Cx, aScale);
 8001980:	7abb      	ldrb	r3, [r7, #10]
 8001982:	4619      	mov	r1, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f813 	bl	80019b0 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(I2Cx, gScale);
 800198a:	7a7b      	ldrb	r3, [r7, #9]
 800198c:	4619      	mov	r1, r3
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f89e 	bl	8001ad0 <MPU_writeGyroFullScaleRange>

        return 1;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <MPU_begin+0xa2>
    }
    else
    {
        return 0;
 8001998:	2300      	movs	r3, #0
    }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000b10 	.word	0x20000b10
 80019a8:	20000b18 	.word	0x20000b18
 80019ac:	20000b14 	.word	0x20000b14

080019b0 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d866      	bhi.n	8001a90 <MPU_writeAccFullScaleRange+0xe0>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <MPU_writeAccFullScaleRange+0x18>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	08001a07 	.word	0x08001a07
 80019d0:	08001a35 	.word	0x08001a35
 80019d4:	08001a63 	.word	0x08001a63
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <MPU_writeAccFullScaleRange+0x118>)
 80019da:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80019de:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80019e4:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <MPU_writeAccFullScaleRange+0x11c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	f107 030f 	add.w	r3, r7, #15
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	221c      	movs	r2, #28
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f002 f82a 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001a04:	e05b      	b.n	8001abe <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 8001a06:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <MPU_writeAccFullScaleRange+0x118>)
 8001a08:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001a0c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001a12:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <MPU_writeAccFullScaleRange+0x11c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	f107 030f 	add.w	r3, r7, #15
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	221c      	movs	r2, #28
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f002 f813 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001a32:	e044      	b.n	8001abe <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 8001a34:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <MPU_writeAccFullScaleRange+0x118>)
 8001a36:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001a3a:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <MPU_writeAccFullScaleRange+0x11c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	f107 030f 	add.w	r3, r7, #15
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	221c      	movs	r2, #28
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f001 fffc 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001a60:	e02d      	b.n	8001abe <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <MPU_writeAccFullScaleRange+0x118>)
 8001a64:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001a68:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001a6a:	2318      	movs	r3, #24
 8001a6c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MPU_writeAccFullScaleRange+0x11c>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f107 030f 	add.w	r3, r7, #15
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	221c      	movs	r2, #28
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f001 ffe5 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001a8e:	e016      	b.n	8001abe <MPU_writeAccFullScaleRange+0x10e>
    default:
        aScaleFactor = 8192.0;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <MPU_writeAccFullScaleRange+0x118>)
 8001a92:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001a96:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <MPU_writeAccFullScaleRange+0x11c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	f107 030f 	add.w	r3, r7, #15
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	221c      	movs	r2, #28
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f001 ffce 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001abc:	bf00      	nop
    }
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000b1c 	.word	0x20000b1c
 8001acc:	20000b10 	.word	0x20000b10

08001ad0 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d862      	bhi.n	8001ba8 <MPU_writeGyroFullScaleRange+0xd8>
 8001ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae8 <MPU_writeGyroFullScaleRange+0x18>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001af9 	.word	0x08001af9
 8001aec:	08001b25 	.word	0x08001b25
 8001af0:	08001b51 	.word	0x08001b51
 8001af4:	08001b7d 	.word	0x08001b7d
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 8001af8:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <MPU_writeGyroFullScaleRange+0x10c>)
 8001afa:	4a39      	ldr	r2, [pc, #228]	@ (8001be0 <MPU_writeGyroFullScaleRange+0x110>)
 8001afc:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <MPU_writeGyroFullScaleRange+0x114>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4619      	mov	r1, r3
 8001b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	f107 030f 	add.w	r3, r7, #15
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	221b      	movs	r2, #27
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f001 ff9b 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001b22:	e057      	b.n	8001bd4 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 8001b24:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <MPU_writeGyroFullScaleRange+0x10c>)
 8001b26:	4a30      	ldr	r2, [pc, #192]	@ (8001be8 <MPU_writeGyroFullScaleRange+0x118>)
 8001b28:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <MPU_writeGyroFullScaleRange+0x114>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	f107 030f 	add.w	r3, r7, #15
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2301      	movs	r3, #1
 8001b46:	221b      	movs	r2, #27
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 ff85 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001b4e:	e041      	b.n	8001bd4 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <MPU_writeGyroFullScaleRange+0x10c>)
 8001b52:	4a26      	ldr	r2, [pc, #152]	@ (8001bec <MPU_writeGyroFullScaleRange+0x11c>)
 8001b54:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8001b56:	2310      	movs	r3, #16
 8001b58:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <MPU_writeGyroFullScaleRange+0x114>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	f107 030f 	add.w	r3, r7, #15
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	221b      	movs	r2, #27
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f001 ff6f 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001b7a:	e02b      	b.n	8001bd4 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MPU_writeGyroFullScaleRange+0x10c>)
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf0 <MPU_writeGyroFullScaleRange+0x120>)
 8001b80:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001b82:	2318      	movs	r3, #24
 8001b84:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <MPU_writeGyroFullScaleRange+0x114>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030f 	add.w	r3, r7, #15
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	221b      	movs	r2, #27
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f001 ff59 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001ba6:	e015      	b.n	8001bd4 <MPU_writeGyroFullScaleRange+0x104>
    default:
        gScaleFactor = 65.5;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <MPU_writeGyroFullScaleRange+0x10c>)
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <MPU_writeGyroFullScaleRange+0x118>)
 8001bac:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MPU_writeGyroFullScaleRange+0x114>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f107 030f 	add.w	r3, r7, #15
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	221b      	movs	r2, #27
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 ff43 	bl	8003a58 <HAL_I2C_Mem_Write>
        break;
 8001bd2:	bf00      	nop
    }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000b20 	.word	0x20000b20
 8001be0:	43030000 	.word	0x43030000
 8001be4:	20000b10 	.word	0x20000b10
 8001be8:	42830000 	.word	0x42830000
 8001bec:	42033333 	.word	0x42033333
 8001bf0:	41833333 	.word	0x41833333

08001bf4 <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <MPU_readRawData+0x9c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	230e      	movs	r3, #14
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	223b      	movs	r2, #59	@ 0x3b
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f002 f818 	bl	8003c4c <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 8001c1c:	7a3b      	ldrb	r3, [r7, #8]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	7a7b      	ldrb	r3, [r7, #9]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MPU_readRawData+0xa0>)
 8001c2c:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8001c2e:	7abb      	ldrb	r3, [r7, #10]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MPU_readRawData+0xa0>)
 8001c3e:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8001c40:	7b3b      	ldrb	r3, [r7, #12]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	7b7b      	ldrb	r3, [r7, #13]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MPU_readRawData+0xa0>)
 8001c50:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 8001c52:	7c3b      	ldrb	r3, [r7, #16]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	7c7b      	ldrb	r3, [r7, #17]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MPU_readRawData+0xa0>)
 8001c62:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8001c64:	7cbb      	ldrb	r3, [r7, #18]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	7cfb      	ldrb	r3, [r7, #19]
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MPU_readRawData+0xa0>)
 8001c74:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8001c76:	7d3b      	ldrb	r3, [r7, #20]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7d7b      	ldrb	r3, [r7, #21]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <MPU_readRawData+0xa0>)
 8001c86:	815a      	strh	r2, [r3, #10]
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000b10 	.word	0x20000b10
 8001c94:	20000ad4 	.word	0x20000ad4

08001c98 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	817b      	strh	r3, [r7, #10]
 8001cbe:	e01d      	b.n	8001cfc <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff97 	bl	8001bf4 <MPU_readRawData>
        x += rawData.gx;
 8001cc6:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <MPU_calibrateGyro+0xd0>)
 8001cc8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <MPU_calibrateGyro+0xd0>)
 8001cd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 8001ce2:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <MPU_calibrateGyro+0xd0>)
 8001ce4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f001 f9d5 	bl	80030a0 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	817b      	strh	r3, [r7, #10]
 8001cfc:	897a      	ldrh	r2, [r7, #10]
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3dd      	bcc.n	8001cc0 <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MPU_calibrateGyro+0xd4>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y = (float)y / (float)numCalPoints;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MPU_calibrateGyro+0xd4>)
 8001d3c:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <MPU_calibrateGyro+0xd4>)
 8001d5a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000ad4 	.word	0x20000ad4
 8001d6c:	20000af8 	.word	0x20000af8

08001d70 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readProcessedData(I2C_HandleTypeDef *I2Cx)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff3b 	bl	8001bf4 <MPU_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = rawData.ax / aScaleFactor;
 8001d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e7c <MPU_readProcessedData+0x10c>)
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e80 <MPU_readProcessedData+0x110>)
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d96:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = rawData.ay / aScaleFactor;
 8001d9c:	4b37      	ldr	r3, [pc, #220]	@ (8001e7c <MPU_readProcessedData+0x10c>)
 8001d9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <MPU_readProcessedData+0x110>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db4:	4b33      	ldr	r3, [pc, #204]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001db6:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = rawData.az / aScaleFactor;
 8001dba:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <MPU_readProcessedData+0x10c>)
 8001dbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <MPU_readProcessedData+0x110>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001dd4:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 8001dd8:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <MPU_readProcessedData+0x10c>)
 8001dda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <MPU_readProcessedData+0x118>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001df2:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MPU_readProcessedData+0x10c>)
 8001df8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e04:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <MPU_readProcessedData+0x118>)
 8001e06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e10:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <MPU_readProcessedData+0x10c>)
 8001e16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <MPU_readProcessedData+0x118>)
 8001e24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2c:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e2e:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= gScaleFactor;
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e34:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MPU_readProcessedData+0x11c>)
 8001e3a:	ed93 7a00 	vldr	s14, [r3]
 8001e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e44:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy /= gScaleFactor;
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e4a:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MPU_readProcessedData+0x11c>)
 8001e50:	ed93 7a00 	vldr	s14, [r3]
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e5a:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz /= gScaleFactor;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e60:	edd3 6a05 	vldr	s13, [r3, #20]
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MPU_readProcessedData+0x11c>)
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <MPU_readProcessedData+0x114>)
 8001e70:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000ad4 	.word	0x20000ad4
 8001e80:	20000b1c 	.word	0x20000b1c
 8001e84:	20000ae0 	.word	0x20000ae0
 8001e88:	20000af8 	.word	0x20000af8
 8001e8c:	20000b20 	.word	0x20000b20

08001e90 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter.
/// @param I2Cx Pointer to I2C structure config.
void MPU_calcAttitude(I2C_HandleTypeDef *I2Cx)
{
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    // Read processed data
    MPU_readProcessedData(I2Cx);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff69 	bl	8001d70 <MPU_readProcessedData>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 8001e9e:	4b52      	ldr	r3, [pc, #328]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb68 	bl	8000578 <__aeabi_f2d>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	460d      	mov	r5, r1
 8001eac:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb61 	bl	8000578 <__aeabi_f2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	ec43 2b11 	vmov	d1, r2, r3
 8001ebe:	ec45 4b10 	vmov	d0, r4, r5
 8001ec2:	f008 f991 	bl	800a1e8 <atan2>
 8001ec6:	ec51 0b10 	vmov	r0, r1, d0
 8001eca:	a345      	add	r3, pc, #276	@ (adr r3, 8001fe0 <MPU_calcAttitude+0x150>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fbaa 	bl	8000628 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe7c 	bl	8000bd8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 8001ee4:	4b40      	ldr	r3, [pc, #256]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb45 	bl	8000578 <__aeabi_f2d>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fb3e 	bl	8000578 <__aeabi_f2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	ec43 2b11 	vmov	d1, r2, r3
 8001f04:	ec45 4b10 	vmov	d0, r4, r5
 8001f08:	f008 f96e 	bl	800a1e8 <atan2>
 8001f0c:	ec51 0b10 	vmov	r0, r1, d0
 8001f10:	a333      	add	r3, pc, #204	@ (adr r3, 8001fe0 <MPU_calcAttitude+0x150>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fb87 	bl	8000628 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe59 	bl	8000bd8 <__aeabi_d2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	60bb      	str	r3, [r7, #8]

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 8001f2a:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <MPU_calcAttitude+0x15c>)
 8001f2c:	ed93 7a00 	vldr	s14, [r3]
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001f32:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <MPU_calcAttitude+0x160>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <MPU_calcAttitude+0x164>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <MPU_calcAttitude+0x164>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <MPU_calcAttitude+0x15c>)
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
    attitude.p = _tau * (attitude.p + sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <MPU_calcAttitude+0x15c>)
 8001f70:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001f76:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <MPU_calcAttitude+0x160>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <MPU_calcAttitude+0x164>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <MPU_calcAttitude+0x164>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MPU_calcAttitude+0x15c>)
 8001fae:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude.y += sensorData.gz * _dt;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <MPU_calcAttitude+0x15c>)
 8001fb4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MPU_calcAttitude+0x158>)
 8001fba:	edd3 6a05 	vldr	s13, [r3, #20]
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MPU_calcAttitude+0x160>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MPU_calcAttitude+0x15c>)
 8001fce:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	1a63cbb0 	.word	0x1a63cbb0
 8001fe4:	404ca5dc 	.word	0x404ca5dc
 8001fe8:	20000ae0 	.word	0x20000ae0
 8001fec:	20000b04 	.word	0x20000b04
 8001ff0:	20000b14 	.word	0x20000b14
 8001ff4:	20000b18 	.word	0x20000b18

08001ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002002:	f000 ffdb 	bl	8002fbc <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t check;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002006:	f000 f9f1 	bl	80023ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200a:	f000 fb2d 	bl	8002668 <MX_GPIO_Init>
  MX_TIM11_Init();
 800200e:	f000 fb07 	bl	8002620 <MX_TIM11_Init>
  MX_I2C1_Init();
 8002012:	f000 fa55 	bl	80024c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002016:	f000 fa81 	bl	800251c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ret |= drv_uart_init();
 800201a:	f7ff fc09 	bl	8001830 <drv_uart_init>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  ret |= drv_esp_init();
 8002026:	f7ff fa59 	bl	80014dc <drv_esp_init>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  if(ret != 0) Error_Handler();
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <main+0x44>
 8002038:	f000 fcf4 	bl	8002a24 <Error_Handler>
  AiotClient_Init();
 800203c:	f7ff fb8a 	bl	8001754 <AiotClient_Init>
  DHT11_Init();
 8002040:	f7ff f820 	bl	8001084 <DHT11_Init>
  dht11Data = DHT11_readData();
 8002044:	4c96      	ldr	r4, [pc, #600]	@ (80022a0 <main+0x2a8>)
 8002046:	463b      	mov	r3, r7
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f8e9 	bl	8001220 <DHT11_readData>
 800204e:	4622      	mov	r2, r4
 8002050:	463b      	mov	r3, r7
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	6010      	str	r0, [r2, #0]
 8002056:	889b      	ldrh	r3, [r3, #4]
 8002058:	8093      	strh	r3, [r2, #4]
  HAL_Delay(1000);
 800205a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800205e:	f001 f81f 	bl	80030a0 <HAL_Delay>
  if (MPU_begin(&hi2c1, AD0_LOW, AFSR_4G, GFSR_2000DPS, 0.98, 0.004) == TRUE)
 8002062:	eddf 0a90 	vldr	s1, [pc, #576]	@ 80022a4 <main+0x2ac>
 8002066:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80022a8 <main+0x2b0>
 800206a:	2303      	movs	r3, #3
 800206c:	2201      	movs	r2, #1
 800206e:	2168      	movs	r1, #104	@ 0x68
 8002070:	488e      	ldr	r0, [pc, #568]	@ (80022ac <main+0x2b4>)
 8002072:	f7ff fc41 	bl	80018f8 <MPU_begin>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d144      	bne.n	8002106 <main+0x10e>
    {
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 800207c:	2201      	movs	r2, #1
 800207e:	2120      	movs	r1, #32
 8002080:	488b      	ldr	r0, [pc, #556]	@ (80022b0 <main+0x2b8>)
 8002082:	f001 fb71 	bl	8003768 <HAL_GPIO_WritePin>
      HAL_I2C_Mem_Read(&hi2c1, (AD0_LOW<<1), WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8002086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	2301      	movs	r3, #1
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	f107 030b 	add.w	r3, r7, #11
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	2275      	movs	r2, #117	@ 0x75
 800209a:	21d0      	movs	r1, #208	@ 0xd0
 800209c:	4883      	ldr	r0, [pc, #524]	@ (80022ac <main+0x2b4>)
 800209e:	f001 fdd5 	bl	8003c4c <HAL_I2C_Mem_Read>
      if (check == WHO_AM_I_9250_ANS)
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	2b71      	cmp	r3, #113	@ 0x71
 80020a6:	d104      	bne.n	80020b2 <main+0xba>
      {
    	  sprintf((char *)serialBuf, "MPU_9250\r\n");
 80020a8:	4982      	ldr	r1, [pc, #520]	@ (80022b4 <main+0x2bc>)
 80020aa:	4883      	ldr	r0, [pc, #524]	@ (80022b8 <main+0x2c0>)
 80020ac:	f005 fea2 	bl	8007df4 <siprintf>
 80020b0:	e006      	b.n	80020c0 <main+0xc8>
      }
      else if(check == WHO_AM_I_6050_ANS)
 80020b2:	7afb      	ldrb	r3, [r7, #11]
 80020b4:	2b68      	cmp	r3, #104	@ 0x68
 80020b6:	d103      	bne.n	80020c0 <main+0xc8>
      {
    	  sprintf((char *)serialBuf, "MPU_6250\r\n");
 80020b8:	4980      	ldr	r1, [pc, #512]	@ (80022bc <main+0x2c4>)
 80020ba:	487f      	ldr	r0, [pc, #508]	@ (80022b8 <main+0x2c0>)
 80020bc:	f005 fe9a 	bl	8007df4 <siprintf>
      }
      drv_uart_tx_buffer(serialBuf,strlen((char *)serialBuf));
 80020c0:	487d      	ldr	r0, [pc, #500]	@ (80022b8 <main+0x2c0>)
 80020c2:	f7fe f8ed 	bl	80002a0 <strlen>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4619      	mov	r1, r3
 80020cc:	487a      	ldr	r0, [pc, #488]	@ (80022b8 <main+0x2c0>)
 80020ce:	f7ff fbe1 	bl	8001894 <drv_uart_tx_buffer>
        HAL_Delay(500);
      }
    }

    // Calibrate the IMU
    sprintf((char *)serialBuf, "CALIBRATING...\r\n");
 80020d2:	497b      	ldr	r1, [pc, #492]	@ (80022c0 <main+0x2c8>)
 80020d4:	4878      	ldr	r0, [pc, #480]	@ (80022b8 <main+0x2c0>)
 80020d6:	f005 fe8d 	bl	8007df4 <siprintf>
    drv_uart_tx_buffer(serialBuf,strlen((char *)serialBuf));
 80020da:	4877      	ldr	r0, [pc, #476]	@ (80022b8 <main+0x2c0>)
 80020dc:	f7fe f8e0 	bl	80002a0 <strlen>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	4874      	ldr	r0, [pc, #464]	@ (80022b8 <main+0x2c0>)
 80020e8:	f7ff fbd4 	bl	8001894 <drv_uart_tx_buffer>
    MPU_calibrateGyro(&hi2c1, 1500);
 80020ec:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80020f0:	486e      	ldr	r0, [pc, #440]	@ (80022ac <main+0x2b4>)
 80020f2:	f7ff fdd1 	bl	8001c98 <MPU_calibrateGyro>
    // Start timer and put processor into an efficient low power mode

    if(HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1) != HAL_OK)
 80020f6:	2100      	movs	r1, #0
 80020f8:	4872      	ldr	r0, [pc, #456]	@ (80022c4 <main+0x2cc>)
 80020fa:	f003 f95f 	bl	80053bc <HAL_TIM_PWM_Start>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d019      	beq.n	8002138 <main+0x140>
 8002104:	e016      	b.n	8002134 <main+0x13c>
      sprintf((char *)serialBuf, "ERROR!\r\n");
 8002106:	4970      	ldr	r1, [pc, #448]	@ (80022c8 <main+0x2d0>)
 8002108:	486b      	ldr	r0, [pc, #428]	@ (80022b8 <main+0x2c0>)
 800210a:	f005 fe73 	bl	8007df4 <siprintf>
      drv_uart_tx_buffer(serialBuf,strlen((char *)serialBuf));
 800210e:	486a      	ldr	r0, [pc, #424]	@ (80022b8 <main+0x2c0>)
 8002110:	f7fe f8c6 	bl	80002a0 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29b      	uxth	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	4867      	ldr	r0, [pc, #412]	@ (80022b8 <main+0x2c0>)
 800211c:	f7ff fbba 	bl	8001894 <drv_uart_tx_buffer>
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8002120:	2120      	movs	r1, #32
 8002122:	4863      	ldr	r0, [pc, #396]	@ (80022b0 <main+0x2b8>)
 8002124:	f001 fb39 	bl	800379a <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8002128:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800212c:	f000 ffb8 	bl	80030a0 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8002130:	bf00      	nop
 8002132:	e7f5      	b.n	8002120 <main+0x128>
    {
  	  Error_Handler();
 8002134:	f000 fc76 	bl	8002a24 <Error_Handler>
    }
    printf("ecKim_Start_PWM1\r\n");
 8002138:	4864      	ldr	r0, [pc, #400]	@ (80022cc <main+0x2d4>)
 800213a:	f005 fe53 	bl	8007de4 <puts>
    if(HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2) != HAL_OK)
 800213e:	2104      	movs	r1, #4
 8002140:	4860      	ldr	r0, [pc, #384]	@ (80022c4 <main+0x2cc>)
 8002142:	f003 f93b 	bl	80053bc <HAL_TIM_PWM_Start>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <main+0x158>
    {
  	  Error_Handler();
 800214c:	f000 fc6a 	bl	8002a24 <Error_Handler>
    }
    printf("ecKim_Start_PWM2\r\n");
 8002150:	485f      	ldr	r0, [pc, #380]	@ (80022d0 <main+0x2d8>)
 8002152:	f005 fe47 	bl	8007de4 <puts>
    __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,1400-1);
 8002156:	4b5b      	ldr	r3, [pc, #364]	@ (80022c4 <main+0x2cc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f240 5277 	movw	r2, #1399	@ 0x577
 800215e:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_Base_Start_IT(&htim11);
 8002160:	485c      	ldr	r0, [pc, #368]	@ (80022d4 <main+0x2dc>)
 8002162:	f003 f841 	bl	80051e8 <HAL_TIM_Base_Start_IT>
    MX_GPIO_LED_OFF(LD2_Pin);
 8002166:	2020      	movs	r0, #32
 8002168:	f000 fb14 	bl	8002794 <MX_GPIO_LED_OFF>
    sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
    				dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 800216c:	4b4c      	ldr	r3, [pc, #304]	@ (80022a0 <main+0x2a8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
    sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
 8002172:	461a      	mov	r2, r3
    				dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 8002174:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <main+0x2a8>)
 8002176:	789b      	ldrb	r3, [r3, #2]
 8002178:	b2db      	uxtb	r3, r3
    sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
 800217a:	4619      	mov	r1, r3
    				dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 800217c:	4b48      	ldr	r3, [pc, #288]	@ (80022a0 <main+0x2a8>)
 800217e:	78db      	ldrb	r3, [r3, #3]
 8002180:	b2db      	uxtb	r3, r3
    sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	4954      	ldr	r1, [pc, #336]	@ (80022d8 <main+0x2e0>)
 8002188:	484b      	ldr	r0, [pc, #300]	@ (80022b8 <main+0x2c0>)
 800218a:	f005 fe33 	bl	8007df4 <siprintf>
    drv_uart_tx_buffer(serialBuf,strlen((char *)serialBuf));
 800218e:	484a      	ldr	r0, [pc, #296]	@ (80022b8 <main+0x2c0>)
 8002190:	f7fe f886 	bl	80002a0 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	b29b      	uxth	r3, r3
 8002198:	4619      	mov	r1, r3
 800219a:	4847      	ldr	r0, [pc, #284]	@ (80022b8 <main+0x2c0>)
 800219c:	f7ff fb7a 	bl	8001894 <drv_uart_tx_buffer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DTH11Flag==1)
 80021a0:	4b4e      	ldr	r3, [pc, #312]	@ (80022dc <main+0x2e4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 80a3 	bne.w	80022f0 <main+0x2f8>
	  {
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 80021aa:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <main+0x2e8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <main+0x2e8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0220 	bic.w	r2, r2, #32
 80021b8:	60da      	str	r2, [r3, #12]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80021ba:	4b4a      	ldr	r3, [pc, #296]	@ (80022e4 <main+0x2ec>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b48      	ldr	r3, [pc, #288]	@ (80022e4 <main+0x2ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0220 	bic.w	r2, r2, #32
 80021c8:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Stop_IT(&htim11);
 80021ca:	4842      	ldr	r0, [pc, #264]	@ (80022d4 <main+0x2dc>)
 80021cc:	f003 f86e 	bl	80052ac <HAL_TIM_Base_Stop_IT>
		dht11Data = DHT11_readData();
 80021d0:	4c33      	ldr	r4, [pc, #204]	@ (80022a0 <main+0x2a8>)
 80021d2:	463b      	mov	r3, r7
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff f823 	bl	8001220 <DHT11_readData>
 80021da:	4622      	mov	r2, r4
 80021dc:	463b      	mov	r3, r7
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	6010      	str	r0, [r2, #0]
 80021e2:	889b      	ldrh	r3, [r3, #4]
 80021e4:	8093      	strh	r3, [r2, #4]
		DTH11Flag=0;
 80021e6:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <main+0x2e4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
		sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
				dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 80021ec:	4b2c      	ldr	r3, [pc, #176]	@ (80022a0 <main+0x2a8>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
		sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
 80021f2:	461a      	mov	r2, r3
				dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <main+0x2a8>)
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	b2db      	uxtb	r3, r3
		sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
 80021fa:	4619      	mov	r1, r3
				dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 80021fc:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <main+0x2a8>)
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	b2db      	uxtb	r3, r3
		sprintf((char *)serialBuf, "[ALLMSG]h_%d%%@t_%d.%d'C\r\n", \
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	4934      	ldr	r1, [pc, #208]	@ (80022d8 <main+0x2e0>)
 8002208:	482b      	ldr	r0, [pc, #172]	@ (80022b8 <main+0x2c0>)
 800220a:	f005 fdf3 	bl	8007df4 <siprintf>
		drv_uart_tx_buffer(serialBuf,strlen((char *)serialBuf));
 800220e:	482a      	ldr	r0, [pc, #168]	@ (80022b8 <main+0x2c0>)
 8002210:	f7fe f846 	bl	80002a0 <strlen>
 8002214:	4603      	mov	r3, r0
 8002216:	b29b      	uxth	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	4827      	ldr	r0, [pc, #156]	@ (80022b8 <main+0x2c0>)
 800221c:	f7ff fb3a 	bl	8001894 <drv_uart_tx_buffer>
		if(getFoodFlag==1)
 8002220:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <main+0x2f0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d120      	bne.n	800226a <main+0x272>
		{
			if(dht11Data.temp_byte1>foodTemp)
 8002228:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <main+0x2a8>)
 800222a:	789b      	ldrb	r3, [r3, #2]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <main+0x2f4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	dd05      	ble.n	8002244 <main+0x24c>
				__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,20000-1);
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <main+0x2cc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002240:	639a      	str	r2, [r3, #56]	@ 0x38
 8002242:	e003      	b.n	800224c <main+0x254>
			else
				__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,1-1);
 8002244:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <main+0x2cc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	639a      	str	r2, [r3, #56]	@ 0x38
			if(dht11Data.temp_byte1<foodTemp)
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <main+0x2a8>)
 800224e:	789b      	ldrb	r3, [r3, #2]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <main+0x2f4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	da03      	bge.n	8002264 <main+0x26c>
				MX_GPIO_LED_ON(LD2_Pin);
 800225c:	2020      	movs	r0, #32
 800225e:	f000 fa87 	bl	8002770 <MX_GPIO_LED_ON>
 8002262:	e002      	b.n	800226a <main+0x272>
			else
				MX_GPIO_LED_OFF(LD2_Pin);
 8002264:	2020      	movs	r0, #32
 8002266:	f000 fa95 	bl	8002794 <MX_GPIO_LED_OFF>
		}
		HAL_TIM_Base_Start_IT(&htim11);
 800226a:	481a      	ldr	r0, [pc, #104]	@ (80022d4 <main+0x2dc>)
 800226c:	f002 ffbc 	bl	80051e8 <HAL_TIM_Base_Start_IT>
		UART_Clear_RXNE(&huart6);
 8002270:	481b      	ldr	r0, [pc, #108]	@ (80022e0 <main+0x2e8>)
 8002272:	f7ff fab9 	bl	80017e8 <UART_Clear_RXNE>
		UART_Clear_RXNE(&huart2);
 8002276:	481b      	ldr	r0, [pc, #108]	@ (80022e4 <main+0x2ec>)
 8002278:	f7ff fab6 	bl	80017e8 <UART_Clear_RXNE>
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800227c:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <main+0x2e8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <main+0x2e8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	60da      	str	r2, [r3, #12]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800228c:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <main+0x2ec>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <main+0x2ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	e780      	b.n	80021a0 <main+0x1a8>
 800229e:	bf00      	nop
 80022a0:	20000c50 	.word	0x20000c50
 80022a4:	3b83126f 	.word	0x3b83126f
 80022a8:	3f7ae148 	.word	0x3f7ae148
 80022ac:	20000c70 	.word	0x20000c70
 80022b0:	40020000 	.word	0x40020000
 80022b4:	0800a8ec 	.word	0x0800a8ec
 80022b8:	20000b24 	.word	0x20000b24
 80022bc:	0800a8f8 	.word	0x0800a8f8
 80022c0:	0800a910 	.word	0x0800a910
 80022c4:	20000cc4 	.word	0x20000cc4
 80022c8:	0800a904 	.word	0x0800a904
 80022cc:	0800a924 	.word	0x0800a924
 80022d0:	0800a938 	.word	0x0800a938
 80022d4:	20000d0c 	.word	0x20000d0c
 80022d8:	0800a94c 	.word	0x0800a94c
 80022dc:	20000c58 	.word	0x20000c58
 80022e0:	20000a88 	.word	0x20000a88
 80022e4:	20000604 	.word	0x20000604
 80022e8:	20000c68 	.word	0x20000c68
 80022ec:	20000c6c 	.word	0x20000c6c
	  }
	  else
	  {
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80022f0:	4931      	ldr	r1, [pc, #196]	@ (80023b8 <main+0x3c0>)
 80022f2:	4832      	ldr	r0, [pc, #200]	@ (80023bc <main+0x3c4>)
 80022f4:	f005 fefa 	bl	80080ec <strstr>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d023      	beq.n	8002346 <main+0x34e>
 80022fe:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <main+0x3c4>)
 8002300:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8002304:	3b01      	subs	r3, #1
 8002306:	4a2d      	ldr	r2, [pc, #180]	@ (80023bc <main+0x3c4>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	2b0a      	cmp	r3, #10
 800230c:	d11b      	bne.n	8002346 <main+0x34e>
		{
			HAL_TIM_Base_Stop_IT(&htim11);
 800230e:	482c      	ldr	r0, [pc, #176]	@ (80023c0 <main+0x3c8>)
 8002310:	f002 ffcc 	bl	80052ac <HAL_TIM_Base_Stop_IT>
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8002314:	215b      	movs	r1, #91	@ 0x5b
 8002316:	4829      	ldr	r0, [pc, #164]	@ (80023bc <main+0x3c4>)
 8002318:	f005 fe6c 	bl	8007ff4 <strchr>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	4828      	ldr	r0, [pc, #160]	@ (80023c4 <main+0x3cc>)
 8002322:	f005 ff70 	bl	8008206 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8002326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800232a:	2100      	movs	r1, #0
 800232c:	4823      	ldr	r0, [pc, #140]	@ (80023bc <main+0x3c4>)
 800232e:	f005 fe59 	bl	8007fe4 <memset>
			cb_data.length = 0;
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <main+0x3c4>)
 8002334:	2200      	movs	r2, #0
 8002336:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 800233a:	4822      	ldr	r0, [pc, #136]	@ (80023c4 <main+0x3cc>)
 800233c:	f000 fa3c 	bl	80027b8 <esp_event>
			HAL_TIM_Base_Start_IT(&htim11);
 8002340:	481f      	ldr	r0, [pc, #124]	@ (80023c0 <main+0x3c8>)
 8002342:	f002 ff51 	bl	80051e8 <HAL_TIM_Base_Start_IT>
		}
		if(rx2Flag)
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <main+0x3d0>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d014      	beq.n	800237a <main+0x382>
		{
			HAL_TIM_Base_Stop_IT(&htim11);
 8002350:	481b      	ldr	r0, [pc, #108]	@ (80023c0 <main+0x3c8>)
 8002352:	f002 ffab 	bl	80052ac <HAL_TIM_Base_Stop_IT>
			sprintf((char *)serialBuf,"[ALLMSG]%s\r\n",(char *)rx2Data);
 8002356:	4a1d      	ldr	r2, [pc, #116]	@ (80023cc <main+0x3d4>)
 8002358:	491d      	ldr	r1, [pc, #116]	@ (80023d0 <main+0x3d8>)
 800235a:	481e      	ldr	r0, [pc, #120]	@ (80023d4 <main+0x3dc>)
 800235c:	f005 fd4a 	bl	8007df4 <siprintf>
			esp_send_data(serialBuf);
 8002360:	481c      	ldr	r0, [pc, #112]	@ (80023d4 <main+0x3dc>)
 8002362:	f7ff fa0b 	bl	800177c <esp_send_data>
			rx2Flag =0;
 8002366:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <main+0x3d0>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
			printf("recv2 : %s\r\n",rx2Data);
 800236c:	4917      	ldr	r1, [pc, #92]	@ (80023cc <main+0x3d4>)
 800236e:	481a      	ldr	r0, [pc, #104]	@ (80023d8 <main+0x3e0>)
 8002370:	f005 fcc8 	bl	8007d04 <iprintf>
			HAL_TIM_Base_Start_IT(&htim11);
 8002374:	4812      	ldr	r0, [pc, #72]	@ (80023c0 <main+0x3c8>)
 8002376:	f002 ff37 	bl	80051e8 <HAL_TIM_Base_Start_IT>
		}
		if(motorFlag)
 800237a:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <main+0x3e4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f43f af0e 	beq.w	80021a0 <main+0x1a8>
		{
			pulse=pulse+11*(int)attitude.p;
 8002384:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <main+0x3e8>)
 8002386:	edd3 7a01 	vldr	s15, [r3, #4]
 800238a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238e:	ee17 2a90 	vmov	r2, s15
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	441a      	add	r2, r3
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <main+0x3ec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a10      	ldr	r2, [pc, #64]	@ (80023e4 <main+0x3ec>)
 80023a4:	6013      	str	r3, [r2, #0]
		    __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,pulse);
 80023a6:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <main+0x3ec>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <main+0x3f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34
//			printf("degree : %d\r\n",(int)attitude.p);
		    motorFlag=0;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <main+0x3e4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
	  if(DTH11Flag==1)
 80023b6:	e6f3      	b.n	80021a0 <main+0x1a8>
 80023b8:	0800a968 	.word	0x0800a968
 80023bc:	20000684 	.word	0x20000684
 80023c0:	20000d0c 	.word	0x20000d0c
 80023c4:	20000d54 	.word	0x20000d54
 80023c8:	2000064c 	.word	0x2000064c
 80023cc:	20000650 	.word	0x20000650
 80023d0:	0800a970 	.word	0x0800a970
 80023d4:	20000b24 	.word	0x20000b24
 80023d8:	0800a980 	.word	0x0800a980
 80023dc:	20000c60 	.word	0x20000c60
 80023e0:	20000b04 	.word	0x20000b04
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000cc4 	.word	0x20000cc4

080023ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b094      	sub	sp, #80	@ 0x50
 80023f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f2:	f107 0320 	add.w	r3, r7, #32
 80023f6:	2230      	movs	r2, #48	@ 0x30
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f005 fdf2 	bl	8007fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <SystemClock_Config+0xcc>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	4a27      	ldr	r2, [pc, #156]	@ (80024b8 <SystemClock_Config+0xcc>)
 800241a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <SystemClock_Config+0xcc>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <SystemClock_Config+0xd0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <SystemClock_Config+0xd0>)
 8002436:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <SystemClock_Config+0xd0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002448:	2301      	movs	r3, #1
 800244a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800244c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002452:	2302      	movs	r3, #2
 8002454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002456:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800245c:	2308      	movs	r3, #8
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002460:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002464:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002466:	2304      	movs	r3, #4
 8002468:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800246a:	2304      	movs	r3, #4
 800246c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800246e:	f107 0320 	add.w	r3, r7, #32
 8002472:	4618      	mov	r0, r3
 8002474:	f002 f9d0 	bl	8004818 <HAL_RCC_OscConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800247e:	f000 fad1 	bl	8002a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002482:	230f      	movs	r3, #15
 8002484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002486:	2302      	movs	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800248e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fc32 	bl	8004d08 <HAL_RCC_ClockConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024aa:	f000 fabb 	bl	8002a24 <Error_Handler>
  }
}
 80024ae:	bf00      	nop
 80024b0:	3750      	adds	r7, #80	@ 0x50
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000

080024c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <MX_I2C1_Init+0x54>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024cc:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <MX_I2C1_Init+0x58>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	@ (8002510 <MX_I2C1_Init+0x50>)
 80024fe:	f001 f967 	bl	80037d0 <HAL_I2C_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002508:	f000 fa8c 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000c70 	.word	0x20000c70
 8002514:	40005400 	.word	0x40005400
 8002518:	00061a80 	.word	0x00061a80

0800251c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08e      	sub	sp, #56	@ 0x38
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800254c:	4b32      	ldr	r3, [pc, #200]	@ (8002618 <MX_TIM3_Init+0xfc>)
 800254e:	4a33      	ldr	r2, [pc, #204]	@ (800261c <MX_TIM3_Init+0x100>)
 8002550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <MX_TIM3_Init+0xfc>)
 8002554:	2253      	movs	r2, #83	@ 0x53
 8002556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <MX_TIM3_Init+0xfc>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800255e:	4b2e      	ldr	r3, [pc, #184]	@ (8002618 <MX_TIM3_Init+0xfc>)
 8002560:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002564:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <MX_TIM3_Init+0xfc>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <MX_TIM3_Init+0xfc>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002572:	4829      	ldr	r0, [pc, #164]	@ (8002618 <MX_TIM3_Init+0xfc>)
 8002574:	f002 fde8 	bl	8005148 <HAL_TIM_Base_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800257e:	f000 fa51 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258c:	4619      	mov	r1, r3
 800258e:	4822      	ldr	r0, [pc, #136]	@ (8002618 <MX_TIM3_Init+0xfc>)
 8002590:	f003 f976 	bl	8005880 <HAL_TIM_ConfigClockSource>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800259a:	f000 fa43 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800259e:	481e      	ldr	r0, [pc, #120]	@ (8002618 <MX_TIM3_Init+0xfc>)
 80025a0:	f002 feb3 	bl	800530a <HAL_TIM_PWM_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025aa:	f000 fa3b 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b6:	f107 0320 	add.w	r3, r7, #32
 80025ba:	4619      	mov	r1, r3
 80025bc:	4816      	ldr	r0, [pc, #88]	@ (8002618 <MX_TIM3_Init+0xfc>)
 80025be:	f003 fd27 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025c8:	f000 fa2c 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025cc:	2360      	movs	r3, #96	@ 0x60
 80025ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	@ (8002618 <MX_TIM3_Init+0xfc>)
 80025e4:	f003 f88a 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025ee:	f000 fa19 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2204      	movs	r2, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	@ (8002618 <MX_TIM3_Init+0xfc>)
 80025fa:	f003 f87f 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002604:	f000 fa0e 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002608:	4803      	ldr	r0, [pc, #12]	@ (8002618 <MX_TIM3_Init+0xfc>)
 800260a:	f000 fabf 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3738      	adds	r7, #56	@ 0x38
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000cc4 	.word	0x20000cc4
 800261c:	40000400 	.word	0x40000400

08002620 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002624:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <MX_TIM11_Init+0x40>)
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <MX_TIM11_Init+0x44>)
 8002628:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <MX_TIM11_Init+0x40>)
 800262c:	2253      	movs	r2, #83	@ 0x53
 800262e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <MX_TIM11_Init+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <MX_TIM11_Init+0x40>)
 8002638:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800263c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <MX_TIM11_Init+0x40>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <MX_TIM11_Init+0x40>)
 8002646:	2280      	movs	r2, #128	@ 0x80
 8002648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_TIM11_Init+0x40>)
 800264c:	f002 fd7c 	bl	8005148 <HAL_TIM_Base_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002656:	f000 f9e5 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000d0c 	.word	0x20000d0c
 8002664:	40014800 	.word	0x40014800

08002668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <MX_GPIO_Init+0xfc>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	4a37      	ldr	r2, [pc, #220]	@ (8002764 <MX_GPIO_Init+0xfc>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
 800268e:	4b35      	ldr	r3, [pc, #212]	@ (8002764 <MX_GPIO_Init+0xfc>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a30      	ldr	r2, [pc, #192]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a29      	ldr	r2, [pc, #164]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4b23      	ldr	r3, [pc, #140]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	4a22      	ldr	r2, [pc, #136]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e2:	4b20      	ldr	r3, [pc, #128]	@ (8002764 <MX_GPIO_Init+0xfc>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2120      	movs	r1, #32
 80026f2:	481d      	ldr	r0, [pc, #116]	@ (8002768 <MX_GPIO_Init+0x100>)
 80026f4:	f001 f838 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026fe:	481b      	ldr	r0, [pc, #108]	@ (800276c <MX_GPIO_Init+0x104>)
 8002700:	f001 f832 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800270a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	4814      	ldr	r0, [pc, #80]	@ (800276c <MX_GPIO_Init+0x104>)
 800271c:	f000 fe88 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002720:	2320      	movs	r3, #32
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	480c      	ldr	r0, [pc, #48]	@ (8002768 <MX_GPIO_Init+0x100>)
 8002738:	f000 fe7a 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800273c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	@ (800276c <MX_GPIO_Init+0x104>)
 8002756:	f000 fe6b 	bl	8003430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020800 	.word	0x40020800

08002770 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	b29b      	uxth	r3, r3
 800277c:	2201      	movs	r2, #1
 800277e:	4619      	mov	r1, r3
 8002780:	4803      	ldr	r0, [pc, #12]	@ (8002790 <MX_GPIO_LED_ON+0x20>)
 8002782:	f000 fff1 	bl	8003768 <HAL_GPIO_WritePin>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020000 	.word	0x40020000

08002794 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	4619      	mov	r1, r3
 80027a4:	4803      	ldr	r0, [pc, #12]	@ (80027b4 <MX_GPIO_LED_OFF+0x20>)
 80027a6:	f000 ffdf 	bl	8003768 <HAL_GPIO_WritePin>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020000 	.word	0x40020000

080027b8 <esp_event>:

void esp_event(char * recvBuf)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b09c      	sub	sp, #112	@ 0x70
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
  int i=0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80027c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	223c      	movs	r2, #60	@ 0x3c
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 fbff 	bl	8007fe4 <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fd fd5a 	bl	80002a0 <strlen>
 80027ec:	4603      	mov	r3, r0
 80027ee:	3b01      	subs	r3, #1
 80027f0:	4a59      	ldr	r2, [pc, #356]	@ (8002958 <esp_event+0x1a0>)
 80027f2:	2100      	movs	r1, #0
 80027f4:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4858      	ldr	r0, [pc, #352]	@ (800295c <esp_event+0x1a4>)
 80027fa:	f005 fa83 	bl	8007d04 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80027fe:	4958      	ldr	r1, [pc, #352]	@ (8002960 <esp_event+0x1a8>)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f005 fc17 	bl	8008034 <strtok>
 8002806:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8002808:	e011      	b.n	800282e <esp_event+0x76>
  {
    pArray[i] = pToken;
 800280a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3368      	adds	r3, #104	@ 0x68
 8002810:	443b      	add	r3, r7
 8002812:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002814:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8002818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800281a:	3301      	adds	r3, #1
 800281c:	667b      	str	r3, [r7, #100]	@ 0x64
 800281e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002820:	2b04      	cmp	r3, #4
 8002822:	dc08      	bgt.n	8002836 <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 8002824:	494e      	ldr	r1, [pc, #312]	@ (8002960 <esp_event+0x1a8>)
 8002826:	2000      	movs	r0, #0
 8002828:	f005 fc04 	bl	8008034 <strtok>
 800282c:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 800282e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ea      	bne.n	800280a <esp_event+0x52>
 8002834:	e000      	b.n	8002838 <esp_event+0x80>
      break;
 8002836:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8002838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800283a:	494a      	ldr	r1, [pc, #296]	@ (8002964 <esp_event+0x1ac>)
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fccf 	bl	80001e0 <strcmp>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d127      	bne.n	8002898 <esp_event+0xe0>
  {
  	if(!strcmp(pArray[2],"ON"))
 8002848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284a:	4947      	ldr	r1, [pc, #284]	@ (8002968 <esp_event+0x1b0>)
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fcc7 	bl	80001e0 <strcmp>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d103      	bne.n	8002860 <esp_event+0xa8>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8002858:	2020      	movs	r0, #32
 800285a:	f7ff ff89 	bl	8002770 <MX_GPIO_LED_ON>
 800285e:	e00a      	b.n	8002876 <esp_event+0xbe>

  	}
		else if(!strcmp(pArray[2],"OFF"))
 8002860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002862:	4942      	ldr	r1, [pc, #264]	@ (800296c <esp_event+0x1b4>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fcbb 	bl	80001e0 <strcmp>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <esp_event+0xbe>
		{
				MX_GPIO_LED_OFF(LD2_Pin);
 8002870:	2020      	movs	r0, #32
 8002872:	f7ff ff8f 	bl	8002794 <MX_GPIO_LED_OFF>
		}
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8002876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002878:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800287a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800287c:	f107 000c 	add.w	r0, r7, #12
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	460b      	mov	r3, r1
 8002884:	493a      	ldr	r1, [pc, #232]	@ (8002970 <esp_event+0x1b8>)
 8002886:	f005 fab5 	bl	8007df4 <siprintf>
    }
  else
      return;

//  esp_send_data(sendBuf);
  printf("Debug send : %s\r\n",sendBuf);
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	4619      	mov	r1, r3
 8002890:	4838      	ldr	r0, [pc, #224]	@ (8002974 <esp_event+0x1bc>)
 8002892:	f005 fa37 	bl	8007d04 <iprintf>
 8002896:	e05c      	b.n	8002952 <esp_event+0x19a>
  else if(!strncmp(pArray[1]," New conn",8))
 8002898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289a:	2208      	movs	r2, #8
 800289c:	4936      	ldr	r1, [pc, #216]	@ (8002978 <esp_event+0x1c0>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f005 fbb5 	bl	800800e <strncmp>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d050      	beq.n	800294c <esp_event+0x194>
  else if(!strncmp(pArray[1]," Already log",8))
 80028aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ac:	2208      	movs	r2, #8
 80028ae:	4933      	ldr	r1, [pc, #204]	@ (800297c <esp_event+0x1c4>)
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 fbac 	bl	800800e <strncmp>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <esp_event+0x10a>
			esp_client_conn();
 80028bc:	f7fe fde0 	bl	8001480 <esp_client_conn>
      return;
 80028c0:	e047      	b.n	8002952 <esp_event+0x19a>
  else if(!strcmp(pArray[1],"FOOD"))
 80028c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028c4:	492e      	ldr	r1, [pc, #184]	@ (8002980 <esp_event+0x1c8>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fc8a 	bl	80001e0 <strcmp>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11c      	bne.n	800290c <esp_event+0x154>
	  foodTemp=atoi(pArray[2]);
 80028d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d4:	4618      	mov	r0, r3
 80028d6:	f004 fc73 	bl	80071c0 <atoi>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a29      	ldr	r2, [pc, #164]	@ (8002984 <esp_event+0x1cc>)
 80028de:	6013      	str	r3, [r2, #0]
	  printf("%d\r\n",foodTemp);
 80028e0:	4b28      	ldr	r3, [pc, #160]	@ (8002984 <esp_event+0x1cc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4828      	ldr	r0, [pc, #160]	@ (8002988 <esp_event+0x1d0>)
 80028e8:	f005 fa0c 	bl	8007d04 <iprintf>
	  getFoodFlag=1;
 80028ec:	4b27      	ldr	r3, [pc, #156]	@ (800298c <esp_event+0x1d4>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
	  sprintf(sendBuf,"[%s]%s\r\n","ALLMSG","YES");
 80028f2:	f107 000c 	add.w	r0, r7, #12
 80028f6:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <esp_event+0x1d8>)
 80028f8:	4a26      	ldr	r2, [pc, #152]	@ (8002994 <esp_event+0x1dc>)
 80028fa:	4927      	ldr	r1, [pc, #156]	@ (8002998 <esp_event+0x1e0>)
 80028fc:	f005 fa7a 	bl	8007df4 <siprintf>
	  esp_send_data(sendBuf);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe ff39 	bl	800177c <esp_send_data>
      return;
 800290a:	e022      	b.n	8002952 <esp_event+0x19a>
  else if(!strcmp(pArray[1],"SENSOR"))
 800290c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290e:	4923      	ldr	r1, [pc, #140]	@ (800299c <esp_event+0x1e4>)
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fc65 	bl	80001e0 <strcmp>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d119      	bne.n	8002950 <esp_event+0x198>
						dht11Data.rh_byte1, dht11Data.temp_byte1);
 800291c:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <esp_event+0x1e8>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
	  sprintf((char *)sendBuf, "[MGJ_BT]SENSOR@%d@%d\r\n", \
 8002922:	461a      	mov	r2, r3
						dht11Data.rh_byte1, dht11Data.temp_byte1);
 8002924:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <esp_event+0x1e8>)
 8002926:	789b      	ldrb	r3, [r3, #2]
 8002928:	b2db      	uxtb	r3, r3
	  sprintf((char *)sendBuf, "[MGJ_BT]SENSOR@%d@%d\r\n", \
 800292a:	f107 000c 	add.w	r0, r7, #12
 800292e:	491d      	ldr	r1, [pc, #116]	@ (80029a4 <esp_event+0x1ec>)
 8002930:	f005 fa60 	bl	8007df4 <siprintf>
	  printf("%s\r\n",sendBuf);
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	4619      	mov	r1, r3
 800293a:	481b      	ldr	r0, [pc, #108]	@ (80029a8 <esp_event+0x1f0>)
 800293c:	f005 f9e2 	bl	8007d04 <iprintf>
  	  esp_send_data(sendBuf);
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe ff19 	bl	800177c <esp_send_data>
        return;
 800294a:	e002      	b.n	8002952 <esp_event+0x19a>
     return;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <esp_event+0x19a>
      return;
 8002950:	bf00      	nop
}
 8002952:	3768      	adds	r7, #104	@ 0x68
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000d54 	.word	0x20000d54
 800295c:	0800a990 	.word	0x0800a990
 8002960:	0800a9a4 	.word	0x0800a9a4
 8002964:	0800a9a8 	.word	0x0800a9a8
 8002968:	0800a9ac 	.word	0x0800a9ac
 800296c:	0800a9b0 	.word	0x0800a9b0
 8002970:	0800a9b4 	.word	0x0800a9b4
 8002974:	0800aa2c 	.word	0x0800aa2c
 8002978:	0800a9c0 	.word	0x0800a9c0
 800297c:	0800a9cc 	.word	0x0800a9cc
 8002980:	0800a9dc 	.word	0x0800a9dc
 8002984:	20000c6c 	.word	0x20000c6c
 8002988:	0800a9e4 	.word	0x0800a9e4
 800298c:	20000c68 	.word	0x20000c68
 8002990:	0800a9ec 	.word	0x0800a9ec
 8002994:	0800a9f0 	.word	0x0800a9f0
 8002998:	0800a9f8 	.word	0x0800a9f8
 800299c:	0800aa04 	.word	0x0800aa04
 80029a0:	20000c50 	.word	0x20000c50
 80029a4:	0800aa0c 	.word	0x0800aa0c
 80029a8:	0800aa24 	.word	0x0800aa24

080029ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if (htim == &htim11)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d123      	bne.n	8002a04 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
	 DTH11Cnt++;
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]
	 if(DTH11Cnt==20000)
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d105      	bne.n	80029de <HAL_TIM_PeriodElapsedCallback+0x32>
	 {
		 DTH11Flag=1;
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
		 DTH11Cnt=0;
 80029d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
	 }
	 motorCnt++;
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80029e6:	6013      	str	r3, [r2, #0]
	 if(motorCnt==500)
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029f0:	d105      	bne.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x52>
	 {
		 motorFlag=1;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
		 motorCnt=0;
 80029f8:	4b07      	ldr	r3, [pc, #28]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
	 }

    MPU_calcAttitude(&hi2c1);
 80029fe:	4808      	ldr	r0, [pc, #32]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a00:	f7ff fa46 	bl	8001e90 <MPU_calcAttitude>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000d0c 	.word	0x20000d0c
 8002a10:	20000c5c 	.word	0x20000c5c
 8002a14:	20000c58 	.word	0x20000c58
 8002a18:	20000c64 	.word	0x20000c64
 8002a1c:	20000c60 	.word	0x20000c60
 8002a20:	20000c70 	.word	0x20000c70

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <Error_Handler+0x8>

08002a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <HAL_MspInit+0x4c>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a7c <HAL_MspInit+0x4c>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <HAL_MspInit+0x4c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_MspInit+0x4c>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a08      	ldr	r2, [pc, #32]	@ (8002a7c <HAL_MspInit+0x4c>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_MspInit+0x4c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002a6e:	2006      	movs	r0, #6
 8002a70:	f000 fc0a 	bl	8003288 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_I2C_MspInit+0x84>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d12b      	bne.n	8002afa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_I2C_MspInit+0x88>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <HAL_I2C_MspInit+0x88>)
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_I2C_MspInit+0x88>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	@ 0xc0
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac2:	2312      	movs	r3, #18
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480c      	ldr	r0, [pc, #48]	@ (8002b0c <HAL_I2C_MspInit+0x8c>)
 8002ada:	f000 fca9 	bl	8003430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_I2C_MspInit+0x88>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a08      	ldr	r2, [pc, #32]	@ (8002b08 <HAL_I2C_MspInit+0x88>)
 8002ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_I2C_MspInit+0x88>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	@ 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40005400 	.word	0x40005400
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020400 	.word	0x40020400

08002b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <HAL_TIM_Base_MspInit+0x70>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10e      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <HAL_TIM_Base_MspInit+0x74>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <HAL_TIM_Base_MspInit+0x74>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b32:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <HAL_TIM_Base_MspInit+0x74>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002b3e:	e01a      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a10      	ldr	r2, [pc, #64]	@ (8002b88 <HAL_TIM_Base_MspInit+0x78>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d115      	bne.n	8002b76 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_TIM_Base_MspInit+0x74>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	4a0c      	ldr	r2, [pc, #48]	@ (8002b84 <HAL_TIM_Base_MspInit+0x74>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_TIM_Base_MspInit+0x74>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2101      	movs	r1, #1
 8002b6a:	201a      	movs	r0, #26
 8002b6c:	f000 fb97 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b70:	201a      	movs	r0, #26
 8002b72:	f000 fbb0 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40014800 	.word	0x40014800

08002b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a12      	ldr	r2, [pc, #72]	@ (8002bf4 <HAL_TIM_MspPostInit+0x68>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d11d      	bne.n	8002bea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_TIM_MspPostInit+0x6c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a10      	ldr	r2, [pc, #64]	@ (8002bf8 <HAL_TIM_MspPostInit+0x6c>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <HAL_TIM_MspPostInit+0x6c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bca:	23c0      	movs	r3, #192	@ 0xc0
 8002bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4619      	mov	r1, r3
 8002be4:	4805      	ldr	r0, [pc, #20]	@ (8002bfc <HAL_TIM_MspPostInit+0x70>)
 8002be6:	f000 fc23 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bea:	bf00      	nop
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020000 	.word	0x40020000

08002c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	@ 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d08 <HAL_UART_MspInit+0x108>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d134      	bne.n	8002c8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	4b39      	ldr	r3, [pc, #228]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a38      	ldr	r2, [pc, #224]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	4b32      	ldr	r3, [pc, #200]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a31      	ldr	r2, [pc, #196]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4619      	mov	r1, r3
 8002c74:	4826      	ldr	r0, [pc, #152]	@ (8002d10 <HAL_UART_MspInit+0x110>)
 8002c76:	f000 fbdb 	bl	8003430 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2026      	movs	r0, #38	@ 0x26
 8002c80:	f000 fb0d 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c84:	2026      	movs	r0, #38	@ 0x26
 8002c86:	f000 fb26 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c8a:	e038      	b.n	8002cfe <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <HAL_UART_MspInit+0x114>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d133      	bne.n	8002cfe <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca6:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_UART_MspInit+0x10c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cce:	23c0      	movs	r3, #192	@ 0xc0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cde:	2308      	movs	r3, #8
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <HAL_UART_MspInit+0x118>)
 8002cea:	f000 fba1 	bl	8003430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2047      	movs	r0, #71	@ 0x47
 8002cf4:	f000 fad3 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002cf8:	2047      	movs	r0, #71	@ 0x47
 8002cfa:	f000 faec 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3730      	adds	r7, #48	@ 0x30
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40004400 	.word	0x40004400
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40011400 	.word	0x40011400
 8002d18:	40020800 	.word	0x40020800

08002d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <NMI_Handler+0x4>

08002d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <HardFault_Handler+0x4>

08002d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <MemManage_Handler+0x4>

08002d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d72:	f000 f975 	bl	8003060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002d80:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002d82:	f002 fbcb 	bl	800551c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000d0c 	.word	0x20000d0c

08002d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <USART2_IRQHandler+0x10>)
 8002d96:	f003 fabd 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000604 	.word	0x20000604

08002da4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002da8:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <USART6_IRQHandler+0x10>)
 8002daa:	f003 fab3 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000a88 	.word	0x20000a88

08002db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return 1;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_kill>:

int _kill(int pid, int sig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dd2:	f005 f9eb 	bl	80081ac <__errno>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2216      	movs	r2, #22
 8002dda:	601a      	str	r2, [r3, #0]
  return -1;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_exit>:

void _exit (int status)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ffe7 	bl	8002dc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dfa:	bf00      	nop
 8002dfc:	e7fd      	b.n	8002dfa <_exit+0x12>

08002dfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e00a      	b.n	8002e26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e10:	f3af 8000 	nop.w
 8002e14:	4601      	mov	r1, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	60ba      	str	r2, [r7, #8]
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	dbf0      	blt.n	8002e10 <_read+0x12>
  }

  return len;
 8002e2e:	687b      	ldr	r3, [r7, #4]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e009      	b.n	8002e5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	60ba      	str	r2, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fd38 	bl	80018c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	dbf1      	blt.n	8002e4a <_write+0x12>
  }
  return len;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <_close>:

int _close(int file)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e98:	605a      	str	r2, [r3, #4]
  return 0;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_isatty>:

int _isatty(int file)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb0:	2301      	movs	r3, #1
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <_sbrk+0x5c>)
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <_sbrk+0x60>)
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <_sbrk+0x64>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	@ (8002f40 <_sbrk+0x68>)
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f08:	f005 f950 	bl	80081ac <__errno>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	220c      	movs	r2, #12
 8002f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	e009      	b.n	8002f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f18:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	4a05      	ldr	r2, [pc, #20]	@ (8002f3c <_sbrk+0x64>)
 8002f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20020000 	.word	0x20020000
 8002f38:	00000400 	.word	0x00000400
 8002f3c:	20000d94 	.word	0x20000d94
 8002f40:	20000ee8 	.word	0x20000ee8

08002f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <SystemInit+0x20>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <SystemInit+0x20>)
 8002f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f6c:	f7ff ffea 	bl	8002f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f70:	480c      	ldr	r0, [pc, #48]	@ (8002fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f72:	490d      	ldr	r1, [pc, #52]	@ (8002fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f78:	e002      	b.n	8002f80 <LoopCopyDataInit>

08002f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f7e:	3304      	adds	r3, #4

08002f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f84:	d3f9      	bcc.n	8002f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f88:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f8c:	e001      	b.n	8002f92 <LoopFillZerobss>

08002f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f90:	3204      	adds	r2, #4

08002f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f94:	d3fb      	bcc.n	8002f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f96:	f005 f90f 	bl	80081b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9a:	f7ff f82d 	bl	8001ff8 <main>
  bx  lr    
 8002f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002fac:	0800aea8 	.word	0x0800aea8
  ldr r2, =_sbss
 8002fb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002fb4:	20000ee8 	.word	0x20000ee8

08002fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb8:	e7fe      	b.n	8002fb8 <ADC_IRQHandler>
	...

08002fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <HAL_Init+0x40>)
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <HAL_Init+0x40>)
 8002fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd8:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_Init+0x40>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	@ (8002ffc <HAL_Init+0x40>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	f000 f94f 	bl	8003288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 f808 	bl	8003000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff0:	f7ff fd1e 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023c00 	.word	0x40023c00

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003008:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <HAL_InitTick+0x54>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <HAL_InitTick+0x58>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003016:	fbb3 f3f1 	udiv	r3, r3, r1
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f967 	bl	80032f2 <HAL_SYSTICK_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e00e      	b.n	800304c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b0f      	cmp	r3, #15
 8003032:	d80a      	bhi.n	800304a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003034:	2200      	movs	r2, #0
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f000 f92f 	bl	800329e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003040:	4a06      	ldr	r2, [pc, #24]	@ (800305c <HAL_InitTick+0x5c>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000004 	.word	0x20000004
 8003058:	2000000c 	.word	0x2000000c
 800305c:	20000008 	.word	0x20000008

08003060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_IncTick+0x20>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_IncTick+0x24>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4413      	add	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_IncTick+0x24>)
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	2000000c 	.word	0x2000000c
 8003084:	20000d98 	.word	0x20000d98

08003088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return uwTick;
 800308c:	4b03      	ldr	r3, [pc, #12]	@ (800309c <HAL_GetTick+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000d98 	.word	0x20000d98

080030a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a8:	f7ff ffee 	bl	8003088 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d005      	beq.n	80030c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <HAL_Delay+0x44>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030c6:	bf00      	nop
 80030c8:	f7ff ffde 	bl	8003088 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d8f7      	bhi.n	80030c8 <HAL_Delay+0x28>
  {
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000000c 	.word	0x2000000c

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4907      	ldr	r1, [pc, #28]	@ (8003184 <__NVIC_EnableIRQ+0x38>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100

08003188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db0a      	blt.n	80031b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	490c      	ldr	r1, [pc, #48]	@ (80031d4 <__NVIC_SetPriority+0x4c>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	440b      	add	r3, r1
 80031ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b0:	e00a      	b.n	80031c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4908      	ldr	r1, [pc, #32]	@ (80031d8 <__NVIC_SetPriority+0x50>)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3b04      	subs	r3, #4
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	761a      	strb	r2, [r3, #24]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	@ 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3304      	adds	r3, #4
 8003202:	2b06      	cmp	r3, #6
 8003204:	d902      	bls.n	800320c <NVIC_EncodePriority+0x30>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3b03      	subs	r3, #3
 800320a:	e000      	b.n	800320e <NVIC_EncodePriority+0x32>
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	401a      	ands	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43d9      	mvns	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	4313      	orrs	r3, r2
         );
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	@ 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003254:	d301      	bcc.n	800325a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003256:	2301      	movs	r3, #1
 8003258:	e00f      	b.n	800327a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <SysTick_Config+0x40>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003262:	210f      	movs	r1, #15
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f7ff ff8e 	bl	8003188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <SysTick_Config+0x40>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <SysTick_Config+0x40>)
 8003274:	2207      	movs	r2, #7
 8003276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000e010 	.word	0xe000e010

08003288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff29 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b0:	f7ff ff3e 	bl	8003130 <__NVIC_GetPriorityGrouping>
 80032b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	6978      	ldr	r0, [r7, #20]
 80032bc:	f7ff ff8e 	bl	80031dc <NVIC_EncodePriority>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff5d 	bl	8003188 <__NVIC_SetPriority>
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff31 	bl	800314c <__NVIC_EnableIRQ>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ffa2 	bl	8003244 <SysTick_Config>
 8003300:	4603      	mov	r3, r0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7ff feb6 	bl	8003088 <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d008      	beq.n	800333c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2280      	movs	r2, #128	@ 0x80
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e052      	b.n	80033e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0216 	bic.w	r2, r2, #22
 800334a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800335a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <HAL_DMA_Abort+0x62>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0208 	bic.w	r2, r2, #8
 800337a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338c:	e013      	b.n	80033b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800338e:	f7ff fe7b 	bl	8003088 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b05      	cmp	r3, #5
 800339a:	d90c      	bls.n	80033b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2203      	movs	r2, #3
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e015      	b.n	80033e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e4      	bne.n	800338e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	223f      	movs	r2, #63	@ 0x3f
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d004      	beq.n	8003408 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2280      	movs	r2, #128	@ 0x80
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e00c      	b.n	8003422 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2205      	movs	r2, #5
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	@ 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e159      	b.n	8003700 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	f040 8148 	bne.w	80036fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d005      	beq.n	8003482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800347e:	2b02      	cmp	r3, #2
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d017      	beq.n	8003520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d123      	bne.n	8003574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0203 	and.w	r2, r3, #3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a2 	beq.w	80036fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b57      	ldr	r3, [pc, #348]	@ (8003718 <HAL_GPIO_Init+0x2e8>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	4a56      	ldr	r2, [pc, #344]	@ (8003718 <HAL_GPIO_Init+0x2e8>)
 80035c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035c6:	4b54      	ldr	r3, [pc, #336]	@ (8003718 <HAL_GPIO_Init+0x2e8>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d2:	4a52      	ldr	r2, [pc, #328]	@ (800371c <HAL_GPIO_Init+0x2ec>)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a49      	ldr	r2, [pc, #292]	@ (8003720 <HAL_GPIO_Init+0x2f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_GPIO_Init+0x202>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a48      	ldr	r2, [pc, #288]	@ (8003724 <HAL_GPIO_Init+0x2f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x1fe>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <HAL_GPIO_Init+0x2f8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x1fa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a46      	ldr	r2, [pc, #280]	@ (800372c <HAL_GPIO_Init+0x2fc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x1f6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a45      	ldr	r2, [pc, #276]	@ (8003730 <HAL_GPIO_Init+0x300>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x1f2>
 800361e:	2304      	movs	r3, #4
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x204>
 8003622:	2307      	movs	r3, #7
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x204>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x204>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x204>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x204>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	@ (800371c <HAL_GPIO_Init+0x2ec>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <HAL_GPIO_Init+0x304>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a2f      	ldr	r2, [pc, #188]	@ (8003734 <HAL_GPIO_Init+0x304>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b2d      	ldr	r3, [pc, #180]	@ (8003734 <HAL_GPIO_Init+0x304>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a24      	ldr	r2, [pc, #144]	@ (8003734 <HAL_GPIO_Init+0x304>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a6:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <HAL_GPIO_Init+0x304>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003734 <HAL_GPIO_Init+0x304>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d0:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <HAL_GPIO_Init+0x304>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003734 <HAL_GPIO_Init+0x304>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f aea2 	bls.w	800344c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	@ 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e001      	b.n	800375a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003784:	e003      	b.n	800378e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	041a      	lsls	r2, r3, #16
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	400b      	ands	r3, r1
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	619a      	str	r2, [r3, #24]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e12b      	b.n	8003a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff f942 	bl	8002a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	@ 0x24
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003834:	f001 fc60 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a81      	ldr	r2, [pc, #516]	@ (8003a44 <HAL_I2C_Init+0x274>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d807      	bhi.n	8003854 <HAL_I2C_Init+0x84>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a80      	ldr	r2, [pc, #512]	@ (8003a48 <HAL_I2C_Init+0x278>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e006      	b.n	8003862 <HAL_I2C_Init+0x92>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a7d      	ldr	r2, [pc, #500]	@ (8003a4c <HAL_I2C_Init+0x27c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	bf94      	ite	ls
 800385c:	2301      	movls	r3, #1
 800385e:	2300      	movhi	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e0e7      	b.n	8003a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a78      	ldr	r2, [pc, #480]	@ (8003a50 <HAL_I2C_Init+0x280>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9b      	lsrs	r3, r3, #18
 8003874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a6a      	ldr	r2, [pc, #424]	@ (8003a44 <HAL_I2C_Init+0x274>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d802      	bhi.n	80038a4 <HAL_I2C_Init+0xd4>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	e009      	b.n	80038b8 <HAL_I2C_Init+0xe8>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	4a69      	ldr	r2, [pc, #420]	@ (8003a54 <HAL_I2C_Init+0x284>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	3301      	adds	r3, #1
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	495c      	ldr	r1, [pc, #368]	@ (8003a44 <HAL_I2C_Init+0x274>)
 80038d4:	428b      	cmp	r3, r1
 80038d6:	d819      	bhi.n	800390c <HAL_I2C_Init+0x13c>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e59      	subs	r1, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038ec:	400b      	ands	r3, r1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_I2C_Init+0x138>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e59      	subs	r1, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003900:	3301      	adds	r3, #1
 8003902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003906:	e051      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 8003908:	2304      	movs	r3, #4
 800390a:	e04f      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d111      	bne.n	8003938 <HAL_I2C_Init+0x168>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e012      	b.n	800395e <HAL_I2C_Init+0x18e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1e58      	subs	r0, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	0099      	lsls	r1, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x196>
 8003962:	2301      	movs	r3, #1
 8003964:	e022      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <HAL_I2C_Init+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e58      	subs	r0, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	440b      	add	r3, r1
 800397c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800398a:	e00f      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	0099      	lsls	r1, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	6809      	ldr	r1, [r1, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6911      	ldr	r1, [r2, #16]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	000186a0 	.word	0x000186a0
 8003a48:	001e847f 	.word	0x001e847f
 8003a4c:	003d08ff 	.word	0x003d08ff
 8003a50:	431bde83 	.word	0x431bde83
 8003a54:	10624dd3 	.word	0x10624dd3

08003a58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	817b      	strh	r3, [r7, #10]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	813b      	strh	r3, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a72:	f7ff fb09 	bl	8003088 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 80d9 	bne.w	8003c38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2319      	movs	r3, #25
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	496d      	ldr	r1, [pc, #436]	@ (8003c44 <HAL_I2C_Mem_Write+0x1ec>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fc8b 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0cc      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Mem_Write+0x56>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0c5      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d007      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	@ 0x21
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	@ 0x40
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a4d      	ldr	r2, [pc, #308]	@ (8003c48 <HAL_I2C_Mem_Write+0x1f0>)
 8003b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b16:	88f8      	ldrh	r0, [r7, #6]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	4603      	mov	r3, r0
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fac2 	bl	80040b0 <I2C_RequestMemoryWrite>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d052      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e081      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fd50 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06b      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_I2C_Mem_Write+0x180>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d017      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1aa      	bne.n	8003b36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fd43 	bl	8004670 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e016      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	00100002 	.word	0x00100002
 8003c48:	ffff0000 	.word	0xffff0000

08003c4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	@ 0x30
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	817b      	strh	r3, [r7, #10]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	813b      	strh	r3, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c66:	f7ff fa0f 	bl	8003088 <HAL_GetTick>
 8003c6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	f040 8214 	bne.w	80040a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	2319      	movs	r3, #25
 8003c80:	2201      	movs	r2, #1
 8003c82:	497b      	ldr	r1, [pc, #492]	@ (8003e70 <HAL_I2C_Mem_Read+0x224>)
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fb91 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
 8003c92:	e207      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x56>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e200      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d007      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2222      	movs	r2, #34	@ 0x22
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2240      	movs	r2, #64	@ 0x40
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a5b      	ldr	r2, [pc, #364]	@ (8003e74 <HAL_I2C_Mem_Read+0x228>)
 8003d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d0a:	88f8      	ldrh	r0, [r7, #6]
 8003d0c:	893a      	ldrh	r2, [r7, #8]
 8003d0e:	8979      	ldrh	r1, [r7, #10]
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	4603      	mov	r3, r0
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa5e 	bl	80041dc <I2C_RequestMemoryRead>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1bc      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d113      	bne.n	8003d5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e190      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d11b      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e170      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d11b      	bne.n	8003dda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	e150      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003df0:	e144      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	f200 80f1 	bhi.w	8003fde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d123      	bne.n	8003e4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fc79 	bl	8004700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e145      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e4a:	e117      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d14e      	bne.n	8003ef2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4906      	ldr	r1, [pc, #24]	@ (8003e78 <HAL_I2C_Mem_Read+0x22c>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 faa4 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e11a      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
 8003e6e:	bf00      	nop
 8003e70:	00100002 	.word	0x00100002
 8003e74:	ffff0000 	.word	0xffff0000
 8003e78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ef0:	e0c4      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	2200      	movs	r2, #0
 8003efa:	496c      	ldr	r1, [pc, #432]	@ (80040ac <HAL_I2C_Mem_Read+0x460>)
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fa55 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0cb      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f54:	2200      	movs	r2, #0
 8003f56:	4955      	ldr	r1, [pc, #340]	@ (80040ac <HAL_I2C_Mem_Read+0x460>)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa27 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09d      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fdc:	e04e      	b.n	800407c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fb8c 	bl	8004700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e058      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b04      	cmp	r3, #4
 8004030:	d124      	bne.n	800407c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004048:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	f47f aeb6 	bne.w	8003df2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	@ 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	00010004 	.word	0x00010004

080040b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	460b      	mov	r3, r1
 80040c4:	813b      	strh	r3, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f960 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004100:	d103      	bne.n	800410a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004108:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e05f      	b.n	80041ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800410e:	897b      	ldrh	r3, [r7, #10]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800411c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	492d      	ldr	r1, [pc, #180]	@ (80041d8 <I2C_RequestMemoryWrite+0x128>)
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f9bb 	bl	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e04c      	b.n	80041ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fa46 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e02b      	b.n	80041ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d105      	bne.n	8004188 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	e021      	b.n	80041cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004188:	893b      	ldrh	r3, [r7, #8]
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	b29b      	uxth	r3, r3
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004198:	6a39      	ldr	r1, [r7, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa20 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d107      	bne.n	80041be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e005      	b.n	80041ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	00010002 	.word	0x00010002

080041dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004204:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004214:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	2200      	movs	r2, #0
 800421e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8c2 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423c:	d103      	bne.n	8004246 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0aa      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004258:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	4952      	ldr	r1, [pc, #328]	@ (80043a8 <I2C_RequestMemoryRead+0x1cc>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f91d 	bl	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e097      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	6a39      	ldr	r1, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f9a8 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d107      	bne.n	80042ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e076      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]
 80042c2:	e021      	b.n	8004308 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042c4:	893b      	ldrh	r3, [r7, #8]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	6a39      	ldr	r1, [r7, #32]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f982 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d107      	bne.n	80042fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e050      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042fe:	893b      	ldrh	r3, [r7, #8]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430a:	6a39      	ldr	r1, [r7, #32]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f967 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b04      	cmp	r3, #4
 800431e:	d107      	bne.n	8004330 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e035      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004342:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2200      	movs	r2, #0
 800434c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f82b 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d103      	bne.n	8004374 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e013      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004378:	897b      	ldrh	r3, [r7, #10]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	4906      	ldr	r1, [pc, #24]	@ (80043a8 <I2C_RequestMemoryRead+0x1cc>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f886 	bl	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	00010002 	.word	0x00010002

080043ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043bc:	e048      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d044      	beq.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fe5f 	bl	8003088 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d139      	bne.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10d      	bne.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	e00c      	b.n	800441c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	43da      	mvns	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	429a      	cmp	r2, r3
 8004420:	d116      	bne.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e023      	b.n	8004498 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10d      	bne.n	8004476 <I2C_WaitOnFlagUntilTimeout+0xca>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	e00c      	b.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	429a      	cmp	r2, r3
 8004494:	d093      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ae:	e071      	b.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044be:	d123      	bne.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f043 0204 	orr.w	r2, r3, #4
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e067      	b.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d041      	beq.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004510:	f7fe fdba 	bl	8003088 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d136      	bne.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10c      	bne.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	e00b      	b.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	43da      	mvns	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e021      	b.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10c      	bne.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	43da      	mvns	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4013      	ands	r3, r2
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e00b      	b.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f af6d 	bne.w	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ec:	e034      	b.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8e3 	bl	80047ba <I2C_IsAcknowledgeFailed>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e034      	b.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d028      	beq.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fe fd3f 	bl	8003088 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11d      	bne.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004626:	2b80      	cmp	r3, #128	@ 0x80
 8004628:	d016      	beq.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e007      	b.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b80      	cmp	r3, #128	@ 0x80
 8004664:	d1c3      	bne.n	80045ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800467c:	e034      	b.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f89b 	bl	80047ba <I2C_IsAcknowledgeFailed>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e034      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d028      	beq.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fe fcf7 	bl	8003088 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11d      	bne.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d016      	beq.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e007      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d1c3      	bne.n	800467e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800470c:	e049      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b10      	cmp	r3, #16
 800471a:	d119      	bne.n	8004750 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0210 	mvn.w	r2, #16
 8004724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e030      	b.n	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004750:	f7fe fc9a 	bl	8003088 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11d      	bne.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b40      	cmp	r3, #64	@ 0x40
 8004772:	d016      	beq.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e007      	b.n	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d1ae      	bne.n	800470e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d0:	d11b      	bne.n	800480a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e267      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d075      	beq.n	8004922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004836:	4b88      	ldr	r3, [pc, #544]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b04      	cmp	r3, #4
 8004840:	d00c      	beq.n	800485c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004842:	4b85      	ldr	r3, [pc, #532]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800484a:	2b08      	cmp	r3, #8
 800484c:	d112      	bne.n	8004874 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800484e:	4b82      	ldr	r3, [pc, #520]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800485a:	d10b      	bne.n	8004874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05b      	beq.n	8004920 <HAL_RCC_OscConfig+0x108>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d157      	bne.n	8004920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e242      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d106      	bne.n	800488c <HAL_RCC_OscConfig+0x74>
 800487e:	4b76      	ldr	r3, [pc, #472]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a75      	ldr	r2, [pc, #468]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e01d      	b.n	80048c8 <HAL_RCC_OscConfig+0xb0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x98>
 8004896:	4b70      	ldr	r3, [pc, #448]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6f      	ldr	r2, [pc, #444]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 800489c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e00b      	b.n	80048c8 <HAL_RCC_OscConfig+0xb0>
 80048b0:	4b69      	ldr	r3, [pc, #420]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a68      	ldr	r2, [pc, #416]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	4b66      	ldr	r3, [pc, #408]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a65      	ldr	r2, [pc, #404]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d013      	beq.n	80048f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fe fbda 	bl	8003088 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fe fbd6 	bl	8003088 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	@ 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e207      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0xc0>
 80048f6:	e014      	b.n	8004922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fbc6 	bl	8003088 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004900:	f7fe fbc2 	bl	8003088 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	@ 0x64
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1f3      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	4b51      	ldr	r3, [pc, #324]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0xe8>
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d063      	beq.n	80049f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800492e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493a:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004942:	2b08      	cmp	r3, #8
 8004944:	d11c      	bne.n	8004980 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004946:	4b44      	ldr	r3, [pc, #272]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d116      	bne.n	8004980 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004952:	4b41      	ldr	r3, [pc, #260]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_RCC_OscConfig+0x152>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e1c7      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4937      	ldr	r1, [pc, #220]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800497e:	e03a      	b.n	80049f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d020      	beq.n	80049ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004988:	4b34      	ldr	r3, [pc, #208]	@ (8004a5c <HAL_RCC_OscConfig+0x244>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fe fb7b 	bl	8003088 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004996:	f7fe fb77 	bl	8003088 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e1a8      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b4:	4b28      	ldr	r3, [pc, #160]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4925      	ldr	r1, [pc, #148]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]
 80049c8:	e015      	b.n	80049f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ca:	4b24      	ldr	r3, [pc, #144]	@ (8004a5c <HAL_RCC_OscConfig+0x244>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fe fb5a 	bl	8003088 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d8:	f7fe fb56 	bl	8003088 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e187      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d036      	beq.n	8004a70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <HAL_RCC_OscConfig+0x248>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a10:	f7fe fb3a 	bl	8003088 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a18:	f7fe fb36 	bl	8003088 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e167      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x200>
 8004a36:	e01b      	b.n	8004a70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a38:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_OscConfig+0x248>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3e:	f7fe fb23 	bl	8003088 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a44:	e00e      	b.n	8004a64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a46:	f7fe fb1f 	bl	8003088 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d907      	bls.n	8004a64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e150      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	42470000 	.word	0x42470000
 8004a60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a64:	4b88      	ldr	r3, [pc, #544]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ea      	bne.n	8004a46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8097 	beq.w	8004bac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a82:	4b81      	ldr	r3, [pc, #516]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	4b7d      	ldr	r3, [pc, #500]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	4a7c      	ldr	r2, [pc, #496]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aae:	4b77      	ldr	r3, [pc, #476]	@ (8004c8c <HAL_RCC_OscConfig+0x474>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d118      	bne.n	8004aec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aba:	4b74      	ldr	r3, [pc, #464]	@ (8004c8c <HAL_RCC_OscConfig+0x474>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a73      	ldr	r2, [pc, #460]	@ (8004c8c <HAL_RCC_OscConfig+0x474>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac6:	f7fe fadf 	bl	8003088 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ace:	f7fe fadb 	bl	8003088 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e10c      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8004c8c <HAL_RCC_OscConfig+0x474>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x2ea>
 8004af4:	4b64      	ldr	r3, [pc, #400]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af8:	4a63      	ldr	r2, [pc, #396]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b00:	e01c      	b.n	8004b3c <HAL_RCC_OscConfig+0x324>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x30c>
 8004b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b16:	4b5c      	ldr	r3, [pc, #368]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_OscConfig+0x324>
 8004b24:	4b58      	ldr	r3, [pc, #352]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b28:	4a57      	ldr	r2, [pc, #348]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b30:	4b55      	ldr	r3, [pc, #340]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b34:	4a54      	ldr	r2, [pc, #336]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 0304 	bic.w	r3, r3, #4
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b44:	f7fe faa0 	bl	8003088 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4c:	f7fe fa9c 	bl	8003088 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e0cb      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b62:	4b49      	ldr	r3, [pc, #292]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0ee      	beq.n	8004b4c <HAL_RCC_OscConfig+0x334>
 8004b6e:	e014      	b.n	8004b9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b70:	f7fe fa8a 	bl	8003088 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fe fa86 	bl	8003088 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e0b5      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ee      	bne.n	8004b78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba0:	4b39      	ldr	r3, [pc, #228]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	4a38      	ldr	r2, [pc, #224]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a1 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bb6:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d05c      	beq.n	8004c7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d141      	bne.n	8004c4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b31      	ldr	r3, [pc, #196]	@ (8004c90 <HAL_RCC_OscConfig+0x478>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fa5a 	bl	8003088 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fe fa56 	bl	8003088 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e087      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	019b      	lsls	r3, r3, #6
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	491b      	ldr	r1, [pc, #108]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c20:	4b1b      	ldr	r3, [pc, #108]	@ (8004c90 <HAL_RCC_OscConfig+0x478>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c26:	f7fe fa2f 	bl	8003088 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fe fa2b 	bl	8003088 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e05c      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c40:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x416>
 8004c4c:	e054      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4e:	4b10      	ldr	r3, [pc, #64]	@ (8004c90 <HAL_RCC_OscConfig+0x478>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fe fa18 	bl	8003088 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fe fa14 	bl	8003088 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e045      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCC_OscConfig+0x470>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x444>
 8004c7a:	e03d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d107      	bne.n	8004c94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e038      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	40007000 	.word	0x40007000
 8004c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c94:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <HAL_RCC_OscConfig+0x4ec>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d028      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d121      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d11a      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d111      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023800 	.word	0x40023800

08004d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0cc      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b68      	ldr	r3, [pc, #416]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d90c      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b65      	ldr	r3, [pc, #404]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b63      	ldr	r3, [pc, #396]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0b8      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d5c:	4b59      	ldr	r3, [pc, #356]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a58      	ldr	r2, [pc, #352]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d74:	4b53      	ldr	r3, [pc, #332]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a52      	ldr	r2, [pc, #328]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b50      	ldr	r3, [pc, #320]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	494d      	ldr	r1, [pc, #308]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d044      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b47      	ldr	r3, [pc, #284]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d119      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e06f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e067      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004de6:	4b37      	ldr	r3, [pc, #220]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4934      	ldr	r1, [pc, #208]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df8:	f7fe f946 	bl	8003088 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e00:	f7fe f942 	bl	8003088 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e04f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 020c 	and.w	r2, r3, #12
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d1eb      	bne.n	8004e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e28:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d20c      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e36:	4b22      	ldr	r3, [pc, #136]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e032      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4916      	ldr	r1, [pc, #88]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	490e      	ldr	r1, [pc, #56]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e8e:	f000 f821 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e92:	4602      	mov	r2, r0
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	490a      	ldr	r1, [pc, #40]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea0:	5ccb      	ldrb	r3, [r1, r3]
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe f8a6 	bl	8003000 <HAL_InitTick>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023c00 	.word	0x40023c00
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	0800aa40 	.word	0x0800aa40
 8004ecc:	20000004 	.word	0x20000004
 8004ed0:	20000008 	.word	0x20000008

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b094      	sub	sp, #80	@ 0x50
 8004eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eec:	4b79      	ldr	r3, [pc, #484]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d00d      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x40>
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	f200 80e1 	bhi.w	80050c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x34>
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d003      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f06:	e0db      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f08:	4b73      	ldr	r3, [pc, #460]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f0c:	e0db      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f0e:	4b73      	ldr	r3, [pc, #460]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f12:	e0d8      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f14:	4b6f      	ldr	r3, [pc, #444]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	2200      	movs	r2, #0
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f3e:	2300      	movs	r3, #0
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	f04f 0000 	mov.w	r0, #0
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	0159      	lsls	r1, r3, #5
 8004f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f58:	0150      	lsls	r0, r2, #5
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4621      	mov	r1, r4
 8004f60:	1a51      	subs	r1, r2, r1
 8004f62:	6139      	str	r1, [r7, #16]
 8004f64:	4629      	mov	r1, r5
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f78:	4659      	mov	r1, fp
 8004f7a:	018b      	lsls	r3, r1, #6
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f82:	4651      	mov	r1, sl
 8004f84:	018a      	lsls	r2, r1, #6
 8004f86:	4651      	mov	r1, sl
 8004f88:	ebb2 0801 	subs.w	r8, r2, r1
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	4699      	mov	r9, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	eb18 0303 	adds.w	r3, r8, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	eb49 0303 	adc.w	r3, r9, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	024b      	lsls	r3, r1, #9
 8004fca:	4621      	mov	r1, r4
 8004fcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	024a      	lsls	r2, r1, #9
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fda:	2200      	movs	r2, #0
 8004fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fe0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fe4:	f7fb fe48 	bl	8000c78 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff0:	e058      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	2300      	movs	r3, #0
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
 8005008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	f04f 0000 	mov.w	r0, #0
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800501e:	0150      	lsls	r0, r2, #5
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4641      	mov	r1, r8
 8005026:	ebb2 0a01 	subs.w	sl, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800503c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005044:	ebb2 040a 	subs.w	r4, r2, sl
 8005048:	eb63 050b 	sbc.w	r5, r3, fp
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	00eb      	lsls	r3, r5, #3
 8005056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505a:	00e2      	lsls	r2, r4, #3
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	4643      	mov	r3, r8
 8005062:	18e3      	adds	r3, r4, r3
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	464b      	mov	r3, r9
 8005068:	eb45 0303 	adc.w	r3, r5, r3
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800507a:	4629      	mov	r1, r5
 800507c:	028b      	lsls	r3, r1, #10
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005084:	4621      	mov	r1, r4
 8005086:	028a      	lsls	r2, r1, #10
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800508e:	2200      	movs	r2, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	61fa      	str	r2, [r7, #28]
 8005094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005098:	f7fb fdee 	bl	8000c78 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050a4:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	3301      	adds	r3, #1
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050be:	e002      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3750      	adds	r7, #80	@ 0x50
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	00f42400 	.word	0x00f42400
 80050dc:	007a1200 	.word	0x007a1200

080050e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e4:	4b03      	ldr	r3, [pc, #12]	@ (80050f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000004 	.word	0x20000004

080050f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050fc:	f7ff fff0 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0a9b      	lsrs	r3, r3, #10
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4903      	ldr	r1, [pc, #12]	@ (800511c <HAL_RCC_GetPCLK1Freq+0x24>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	0800aa50 	.word	0x0800aa50

08005120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005124:	f7ff ffdc 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0b5b      	lsrs	r3, r3, #13
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4903      	ldr	r1, [pc, #12]	@ (8005144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40023800 	.word	0x40023800
 8005144:	0800aa50 	.word	0x0800aa50

08005148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e041      	b.n	80051de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd fcce 	bl	8002b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f000 fc6a 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e044      	b.n	800528a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <HAL_TIM_Base_Start_IT+0xb0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d013      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1a      	ldr	r2, [pc, #104]	@ (800529c <HAL_TIM_Base_Start_IT+0xb4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a19      	ldr	r2, [pc, #100]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d111      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d010      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e007      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a1a      	ldr	r2, [r3, #32]
 80052ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10f      	bne.n	80052f4 <HAL_TIM_Base_Stop_IT+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	f240 4344 	movw	r3, #1092	@ 0x444
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_Base_Stop_IT+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e041      	b.n	80053a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f839 	bl	80053a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 fb89 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_TIM_PWM_Start+0x24>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e022      	b.n	8005426 <HAL_TIM_PWM_Start+0x6a>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d109      	bne.n	80053fa <HAL_TIM_PWM_Start+0x3e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	e015      	b.n	8005426 <HAL_TIM_PWM_Start+0x6a>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x58>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e008      	b.n	8005426 <HAL_TIM_PWM_Start+0x6a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e068      	b.n	8005500 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0x82>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800543c:	e013      	b.n	8005466 <HAL_TIM_PWM_Start+0xaa>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0x92>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800544c:	e00b      	b.n	8005466 <HAL_TIM_PWM_Start+0xaa>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800545c:	e003      	b.n	8005466 <HAL_TIM_PWM_Start+0xaa>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2201      	movs	r2, #1
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fda8 	bl	8005fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a23      	ldr	r2, [pc, #140]	@ (8005508 <HAL_TIM_PWM_Start+0x14c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d107      	bne.n	800548e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800548c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <HAL_TIM_PWM_Start+0x14c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d018      	beq.n	80054ca <HAL_TIM_PWM_Start+0x10e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a0:	d013      	beq.n	80054ca <HAL_TIM_PWM_Start+0x10e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <HAL_TIM_PWM_Start+0x150>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00e      	beq.n	80054ca <HAL_TIM_PWM_Start+0x10e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a17      	ldr	r2, [pc, #92]	@ (8005510 <HAL_TIM_PWM_Start+0x154>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_TIM_PWM_Start+0x10e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <HAL_TIM_PWM_Start+0x158>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_TIM_PWM_Start+0x10e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a14      	ldr	r2, [pc, #80]	@ (8005518 <HAL_TIM_PWM_Start+0x15c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d111      	bne.n	80054ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b06      	cmp	r3, #6
 80054da:	d010      	beq.n	80054fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ec:	e007      	b.n	80054fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0201 	orr.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40010000 	.word	0x40010000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40014000 	.word	0x40014000

0800551c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d020      	beq.n	8005580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01b      	beq.n	8005580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0202 	mvn.w	r2, #2
 8005550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa5b 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa4d 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa5e 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d020      	beq.n	80055cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0204 	mvn.w	r2, #4
 800559c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa35 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa27 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa38 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d020      	beq.n	8005618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0208 	mvn.w	r2, #8
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2204      	movs	r2, #4
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa0f 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa01 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fa12 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d020      	beq.n	8005664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0210 	mvn.w	r2, #16
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2208      	movs	r2, #8
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9e9 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9db 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9ec 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0201 	mvn.w	r2, #1
 8005680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fd f992 	bl	80029ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fd2a 	bl	8006100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f9bd 	bl	8005a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0220 	mvn.w	r2, #32
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fcfc 	bl	80060ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005716:	2302      	movs	r3, #2
 8005718:	e0ae      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	f200 809f 	bhi.w	8005868 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800572a:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005765 	.word	0x08005765
 8005734:	08005869 	.word	0x08005869
 8005738:	08005869 	.word	0x08005869
 800573c:	08005869 	.word	0x08005869
 8005740:	080057a5 	.word	0x080057a5
 8005744:	08005869 	.word	0x08005869
 8005748:	08005869 	.word	0x08005869
 800574c:	08005869 	.word	0x08005869
 8005750:	080057e7 	.word	0x080057e7
 8005754:	08005869 	.word	0x08005869
 8005758:	08005869 	.word	0x08005869
 800575c:	08005869 	.word	0x08005869
 8005760:	08005827 	.word	0x08005827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fa04 	bl	8005b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0208 	orr.w	r2, r2, #8
 800577e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0204 	bic.w	r2, r2, #4
 800578e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6999      	ldr	r1, [r3, #24]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	619a      	str	r2, [r3, #24]
      break;
 80057a2:	e064      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fa4a 	bl	8005c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6999      	ldr	r1, [r3, #24]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	619a      	str	r2, [r3, #24]
      break;
 80057e4:	e043      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fa95 	bl	8005d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0208 	orr.w	r2, r2, #8
 8005800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0204 	bic.w	r2, r2, #4
 8005810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69d9      	ldr	r1, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	61da      	str	r2, [r3, #28]
      break;
 8005824:	e023      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fadf 	bl	8005df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69d9      	ldr	r1, [r3, #28]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	61da      	str	r2, [r3, #28]
      break;
 8005866:	e002      	b.n	800586e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
      break;
 800586c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_ConfigClockSource+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e0b4      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x186>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d4:	d03e      	beq.n	8005954 <HAL_TIM_ConfigClockSource+0xd4>
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058da:	f200 8087 	bhi.w	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e2:	f000 8086 	beq.w	80059f2 <HAL_TIM_ConfigClockSource+0x172>
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ea:	d87f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b70      	cmp	r3, #112	@ 0x70
 80058ee:	d01a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xa6>
 80058f0:	2b70      	cmp	r3, #112	@ 0x70
 80058f2:	d87b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b60      	cmp	r3, #96	@ 0x60
 80058f6:	d050      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x11a>
 80058f8:	2b60      	cmp	r3, #96	@ 0x60
 80058fa:	d877      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b50      	cmp	r3, #80	@ 0x50
 80058fe:	d03c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0xfa>
 8005900:	2b50      	cmp	r3, #80	@ 0x50
 8005902:	d873      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b40      	cmp	r3, #64	@ 0x40
 8005906:	d058      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x13a>
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d86f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b30      	cmp	r3, #48	@ 0x30
 800590e:	d064      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	2b30      	cmp	r3, #48	@ 0x30
 8005912:	d86b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d060      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d867      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d05a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	e062      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	f000 fb25 	bl	8005f84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	609a      	str	r2, [r3, #8]
      break;
 8005952:	e04f      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005964:	f000 fb0e 	bl	8005f84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005976:	609a      	str	r2, [r3, #8]
      break;
 8005978:	e03c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fa82 	bl	8005e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2150      	movs	r1, #80	@ 0x50
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fadb 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005998:	e02c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 faa1 	bl	8005eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2160      	movs	r1, #96	@ 0x60
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 facb 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 80059b8:	e01c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 fa62 	bl	8005e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2140      	movs	r1, #64	@ 0x40
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fabb 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 80059d8:	e00c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 fab2 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 80059ea:	e003      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3a      	ldr	r2, [pc, #232]	@ (8005b5c <TIM_Base_SetConfig+0xfc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00f      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7e:	d00b      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a37      	ldr	r2, [pc, #220]	@ (8005b60 <TIM_Base_SetConfig+0x100>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d007      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a36      	ldr	r2, [pc, #216]	@ (8005b64 <TIM_Base_SetConfig+0x104>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a35      	ldr	r2, [pc, #212]	@ (8005b68 <TIM_Base_SetConfig+0x108>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d108      	bne.n	8005aaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2b      	ldr	r2, [pc, #172]	@ (8005b5c <TIM_Base_SetConfig+0xfc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01b      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d017      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a28      	ldr	r2, [pc, #160]	@ (8005b60 <TIM_Base_SetConfig+0x100>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a27      	ldr	r2, [pc, #156]	@ (8005b64 <TIM_Base_SetConfig+0x104>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00f      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <TIM_Base_SetConfig+0x108>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a25      	ldr	r2, [pc, #148]	@ (8005b6c <TIM_Base_SetConfig+0x10c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d007      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a24      	ldr	r2, [pc, #144]	@ (8005b70 <TIM_Base_SetConfig+0x110>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a23      	ldr	r2, [pc, #140]	@ (8005b74 <TIM_Base_SetConfig+0x114>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a0e      	ldr	r2, [pc, #56]	@ (8005b5c <TIM_Base_SetConfig+0xfc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d103      	bne.n	8005b30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	611a      	str	r2, [r3, #16]
  }
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800

08005b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f023 0201 	bic.w	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f023 0302 	bic.w	r3, r3, #2
 8005bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	@ (8005c40 <TIM_OC1_SetConfig+0xc8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10c      	bne.n	8005bee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0308 	bic.w	r3, r3, #8
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 0304 	bic.w	r3, r3, #4
 8005bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a13      	ldr	r2, [pc, #76]	@ (8005c40 <TIM_OC1_SetConfig+0xc8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d111      	bne.n	8005c1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40010000 	.word	0x40010000

08005c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f023 0210 	bic.w	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0320 	bic.w	r3, r3, #32
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <TIM_OC2_SetConfig+0xd4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d10d      	bne.n	8005cc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a15      	ldr	r2, [pc, #84]	@ (8005d18 <TIM_OC2_SetConfig+0xd4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d113      	bne.n	8005cf0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000

08005d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <TIM_OC3_SetConfig+0xd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10d      	bne.n	8005d96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a14      	ldr	r2, [pc, #80]	@ (8005dec <TIM_OC3_SetConfig+0xd0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d113      	bne.n	8005dc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40010000 	.word	0x40010000

08005df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	031b      	lsls	r3, r3, #12
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a10      	ldr	r2, [pc, #64]	@ (8005e8c <TIM_OC4_SetConfig+0x9c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d109      	bne.n	8005e64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	019b      	lsls	r3, r3, #6
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000

08005e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0201 	bic.w	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 030a 	bic.w	r3, r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f023 0210 	bic.w	r2, r3, #16
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f043 0307 	orr.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e050      	b.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1c      	ldr	r2, [pc, #112]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006074:	d013      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a16      	ldr	r2, [pc, #88]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a15      	ldr	r2, [pc, #84]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a13      	ldr	r2, [pc, #76]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40014000 	.word	0x40014000

080060ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e042      	b.n	80061ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fc fd60 	bl	8002c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	@ 0x24
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fdbd 	bl	8006cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800616c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800617c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800618c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d175      	bne.n	80062c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Transmit+0x2c>
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e06e      	b.n	80062c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2221      	movs	r2, #33	@ 0x21
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061f2:	f7fc ff49 	bl	8003088 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	88fa      	ldrh	r2, [r7, #6]
 8006202:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620c:	d108      	bne.n	8006220 <HAL_UART_Transmit+0x6c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e003      	b.n	8006228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006228:	e02e      	b.n	8006288 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	2180      	movs	r1, #128	@ 0x80
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fb1f 	bl	8006878 <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e03a      	b.n	80062c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	3302      	adds	r3, #2
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e007      	b.n	800627a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3301      	adds	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1cb      	bne.n	800622a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	2140      	movs	r1, #64	@ 0x40
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 faeb 	bl	8006878 <UART_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e006      	b.n	80062c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	4613      	mov	r3, r2
 80062d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d112      	bne.n	800630a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_UART_Receive_IT+0x26>
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e00b      	b.n	800630c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fb12 	bl	800692a <UART_Start_Receive_IT>
 8006306:	4603      	mov	r3, r0
 8006308:	e000      	b.n	800630c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	@ 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fbf2 	bl	8006b5c <UART_Receive_IT>
      return;
 8006378:	e25b      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800637a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80de 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006394:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80d1 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
 80063aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	f043 0202 	orr.w	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006432:	f043 0208 	orr.w	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 81f2 	beq.w	8006828 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb7d 	bl	8006b5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_UART_IRQHandler+0x17a>
 8006486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04f      	beq.n	800652e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa85 	bl	800699e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d141      	bne.n	8006526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1d9      	bne.n	80064a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fa:	4a7e      	ldr	r2, [pc, #504]	@ (80066f4 <HAL_UART_IRQHandler+0x3e0>)
 80064fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006502:	4618      	mov	r0, r3
 8006504:	f7fc ff71 	bl	80033ea <HAL_DMA_Abort_IT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00e      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f994 	bl	800684c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00a      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f990 	bl	800684c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e006      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f98c 	bl	800684c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800653a:	e175      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	bf00      	nop
    return;
 800653e:	e173      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006544:	2b01      	cmp	r3, #1
 8006546:	f040 814f 	bne.w	80067e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8148 	beq.w	80067e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8141 	beq.w	80067e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	f040 80b6 	bne.w	80066f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8145 	beq.w	800682c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f080 813e 	bcs.w	800682c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c2:	f000 8088 	beq.w	80066d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d9      	bne.n	80065c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800663a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a6:	f023 0310 	bic.w	r3, r3, #16
 80066aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e3      	bne.n	8006694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fc fe1a 	bl	800330a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8b7 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066f2:	e09b      	b.n	800682c <HAL_UART_IRQHandler+0x518>
 80066f4:	08006a65 	.word	0x08006a65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006700:	b29b      	uxth	r3, r3
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 808e 	beq.w	8006830 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8089 	beq.w	8006830 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800672e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006734:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006742:	647a      	str	r2, [r7, #68]	@ 0x44
 8006744:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e3      	bne.n	800671e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	623b      	str	r3, [r7, #32]
   return(result);
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3314      	adds	r3, #20
 8006776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800677a:	633a      	str	r2, [r7, #48]	@ 0x30
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e3      	bne.n	8006756 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0310 	bic.w	r3, r3, #16
 80067b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067c0:	61fa      	str	r2, [r7, #28]
 80067c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	69b9      	ldr	r1, [r7, #24]
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	617b      	str	r3, [r7, #20]
   return(result);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e3      	bne.n	800679c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f83d 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e6:	e023      	b.n	8006830 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_UART_IRQHandler+0x4f4>
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f943 	bl	8006a8c <UART_Transmit_IT>
    return;
 8006806:	e014      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00e      	beq.n	8006832 <HAL_UART_IRQHandler+0x51e>
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f983 	bl	8006b2c <UART_EndTransmit_IT>
    return;
 8006826:	e004      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
    return;
 8006828:	bf00      	nop
 800682a:	e002      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
      return;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
      return;
 8006830:	bf00      	nop
  }
}
 8006832:	37e8      	adds	r7, #232	@ 0xe8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006888:	e03b      	b.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d037      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006892:	f7fc fbf9 	bl	8003088 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	6a3a      	ldr	r2, [r7, #32]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d302      	bcc.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e03a      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d023      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b80      	cmp	r3, #128	@ 0x80
 80068be:	d020      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b40      	cmp	r3, #64	@ 0x40
 80068c4:	d01d      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d116      	bne.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f857 	bl	800699e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2208      	movs	r2, #8
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e00f      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	429a      	cmp	r2, r3
 800691e:	d0b4      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	4613      	mov	r3, r2
 8006936:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2222      	movs	r2, #34	@ 0x22
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800696e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0220 	orr.w	r2, r2, #32
 800698e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800699e:	b480      	push	{r7}
 80069a0:	b095      	sub	sp, #84	@ 0x54
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	330c      	adds	r3, #12
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3314      	adds	r3, #20
 80069e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e5      	bne.n	80069da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d119      	bne.n	8006a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f023 0310 	bic.w	r3, r3, #16
 8006a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a36:	61ba      	str	r2, [r7, #24]
 8006a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	6979      	ldr	r1, [r7, #20]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	613b      	str	r3, [r7, #16]
   return(result);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e5      	bne.n	8006a16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a58:	bf00      	nop
 8006a5a:	3754      	adds	r7, #84	@ 0x54
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fee4 	bl	800684c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b21      	cmp	r3, #33	@ 0x21
 8006a9e:	d13e      	bne.n	8006b1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa8:	d114      	bne.n	8006ad4 <UART_Transmit_IT+0x48>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d110      	bne.n	8006ad4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ac6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]
 8006ad2:	e008      	b.n	8006ae6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	1c59      	adds	r1, r3, #1
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6211      	str	r1, [r2, #32]
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4619      	mov	r1, r3
 8006af4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e000      	b.n	8006b20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
  }
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fe73 	bl	8006838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	@ 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b22      	cmp	r3, #34	@ 0x22
 8006b6e:	f040 80ae 	bne.w	8006cce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7a:	d117      	bne.n	8006bac <UART_Receive_IT+0x50>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d113      	bne.n	8006bac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	1c9a      	adds	r2, r3, #2
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006baa:	e026      	b.n	8006bfa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbe:	d007      	beq.n	8006bd0 <UART_Receive_IT+0x74>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <UART_Receive_IT+0x82>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	e008      	b.n	8006bf0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4619      	mov	r1, r3
 8006c08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d15d      	bne.n	8006cca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0220 	bic.w	r2, r2, #32
 8006c1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d135      	bne.n	8006cc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f023 0310 	bic.w	r3, r3, #16
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c7a:	623a      	str	r2, [r7, #32]
 8006c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	69f9      	ldr	r1, [r7, #28]
 8006c80:	6a3a      	ldr	r2, [r7, #32]
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d10a      	bne.n	8006cb2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fdd1 	bl	8006860 <HAL_UARTEx_RxEventCallback>
 8006cbe:	e002      	b.n	8006cc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fa fce9 	bl	8001698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e002      	b.n	8006cd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
  }
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3730      	adds	r7, #48	@ 0x30
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cdc:	b0c0      	sub	sp, #256	@ 0x100
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	ea40 0301 	orr.w	r3, r0, r1
 8006d00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d30:	f021 010c 	bic.w	r1, r1, #12
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d52:	6999      	ldr	r1, [r3, #24]
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	ea40 0301 	orr.w	r3, r0, r1
 8006d5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b8f      	ldr	r3, [pc, #572]	@ (8006fa4 <UART_SetConfig+0x2cc>)
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d005      	beq.n	8006d78 <UART_SetConfig+0xa0>
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b8d      	ldr	r3, [pc, #564]	@ (8006fa8 <UART_SetConfig+0x2d0>)
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d104      	bne.n	8006d82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d78:	f7fe f9d2 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 8006d7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d80:	e003      	b.n	8006d8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d82:	f7fe f9b9 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8006d86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d94:	f040 810c 	bne.w	8006fb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006da2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006da6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006daa:	4622      	mov	r2, r4
 8006dac:	462b      	mov	r3, r5
 8006dae:	1891      	adds	r1, r2, r2
 8006db0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006db2:	415b      	adcs	r3, r3
 8006db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006db6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006dba:	4621      	mov	r1, r4
 8006dbc:	eb12 0801 	adds.w	r8, r2, r1
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	eb43 0901 	adc.w	r9, r3, r1
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dda:	4690      	mov	r8, r2
 8006ddc:	4699      	mov	r9, r3
 8006dde:	4623      	mov	r3, r4
 8006de0:	eb18 0303 	adds.w	r3, r8, r3
 8006de4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006de8:	462b      	mov	r3, r5
 8006dea:	eb49 0303 	adc.w	r3, r9, r3
 8006dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e06:	460b      	mov	r3, r1
 8006e08:	18db      	adds	r3, r3, r3
 8006e0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	eb42 0303 	adc.w	r3, r2, r3
 8006e12:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e1c:	f7f9 ff2c 	bl	8000c78 <__aeabi_uldivmod>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4b61      	ldr	r3, [pc, #388]	@ (8006fac <UART_SetConfig+0x2d4>)
 8006e26:	fba3 2302 	umull	r2, r3, r3, r2
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	011c      	lsls	r4, r3, #4
 8006e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e40:	4642      	mov	r2, r8
 8006e42:	464b      	mov	r3, r9
 8006e44:	1891      	adds	r1, r2, r2
 8006e46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e48:	415b      	adcs	r3, r3
 8006e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e50:	4641      	mov	r1, r8
 8006e52:	eb12 0a01 	adds.w	sl, r2, r1
 8006e56:	4649      	mov	r1, r9
 8006e58:	eb43 0b01 	adc.w	fp, r3, r1
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e70:	4692      	mov	sl, r2
 8006e72:	469b      	mov	fp, r3
 8006e74:	4643      	mov	r3, r8
 8006e76:	eb1a 0303 	adds.w	r3, sl, r3
 8006e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	eb4b 0303 	adc.w	r3, fp, r3
 8006e84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	18db      	adds	r3, r3, r3
 8006ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	eb42 0303 	adc.w	r3, r2, r3
 8006ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006eae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006eb2:	f7f9 fee1 	bl	8000c78 <__aeabi_uldivmod>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8006fac <UART_SetConfig+0x2d4>)
 8006ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	2264      	movs	r2, #100	@ 0x64
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	1acb      	subs	r3, r1, r3
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ed2:	4b36      	ldr	r3, [pc, #216]	@ (8006fac <UART_SetConfig+0x2d4>)
 8006ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ee0:	441c      	add	r4, r3
 8006ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006eec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ef0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	1891      	adds	r1, r2, r2
 8006efa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006efc:	415b      	adcs	r3, r3
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f04:	4641      	mov	r1, r8
 8006f06:	1851      	adds	r1, r2, r1
 8006f08:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	414b      	adcs	r3, r1
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	00cb      	lsls	r3, r1, #3
 8006f20:	4651      	mov	r1, sl
 8006f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f26:	4651      	mov	r1, sl
 8006f28:	00ca      	lsls	r2, r1, #3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4642      	mov	r2, r8
 8006f32:	189b      	adds	r3, r3, r2
 8006f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f38:	464b      	mov	r3, r9
 8006f3a:	460a      	mov	r2, r1
 8006f3c:	eb42 0303 	adc.w	r3, r2, r3
 8006f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f58:	460b      	mov	r3, r1
 8006f5a:	18db      	adds	r3, r3, r3
 8006f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f5e:	4613      	mov	r3, r2
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f6e:	f7f9 fe83 	bl	8000c78 <__aeabi_uldivmod>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <UART_SetConfig+0x2d4>)
 8006f78:	fba3 1302 	umull	r1, r3, r3, r2
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	2164      	movs	r1, #100	@ 0x64
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	3332      	adds	r3, #50	@ 0x32
 8006f8a:	4a08      	ldr	r2, [pc, #32]	@ (8006fac <UART_SetConfig+0x2d4>)
 8006f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	f003 0207 	and.w	r2, r3, #7
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4422      	add	r2, r4
 8006f9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fa0:	e106      	b.n	80071b0 <UART_SetConfig+0x4d8>
 8006fa2:	bf00      	nop
 8006fa4:	40011000 	.word	0x40011000
 8006fa8:	40011400 	.word	0x40011400
 8006fac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006fbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	1891      	adds	r1, r2, r2
 8006fc8:	6239      	str	r1, [r7, #32]
 8006fca:	415b      	adcs	r3, r3
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	1854      	adds	r4, r2, r1
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	eb43 0501 	adc.w	r5, r3, r1
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	00eb      	lsls	r3, r5, #3
 8006fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fea:	00e2      	lsls	r2, r4, #3
 8006fec:	4614      	mov	r4, r2
 8006fee:	461d      	mov	r5, r3
 8006ff0:	4643      	mov	r3, r8
 8006ff2:	18e3      	adds	r3, r4, r3
 8006ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	eb45 0303 	adc.w	r3, r5, r3
 8006ffe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800700e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800701e:	4629      	mov	r1, r5
 8007020:	008b      	lsls	r3, r1, #2
 8007022:	4621      	mov	r1, r4
 8007024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007028:	4621      	mov	r1, r4
 800702a:	008a      	lsls	r2, r1, #2
 800702c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007030:	f7f9 fe22 	bl	8000c78 <__aeabi_uldivmod>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4b60      	ldr	r3, [pc, #384]	@ (80071bc <UART_SetConfig+0x4e4>)
 800703a:	fba3 2302 	umull	r2, r3, r3, r2
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	011c      	lsls	r4, r3, #4
 8007042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007046:	2200      	movs	r2, #0
 8007048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800704c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007050:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007054:	4642      	mov	r2, r8
 8007056:	464b      	mov	r3, r9
 8007058:	1891      	adds	r1, r2, r2
 800705a:	61b9      	str	r1, [r7, #24]
 800705c:	415b      	adcs	r3, r3
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007064:	4641      	mov	r1, r8
 8007066:	1851      	adds	r1, r2, r1
 8007068:	6139      	str	r1, [r7, #16]
 800706a:	4649      	mov	r1, r9
 800706c:	414b      	adcs	r3, r1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800707c:	4659      	mov	r1, fp
 800707e:	00cb      	lsls	r3, r1, #3
 8007080:	4651      	mov	r1, sl
 8007082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007086:	4651      	mov	r1, sl
 8007088:	00ca      	lsls	r2, r1, #3
 800708a:	4610      	mov	r0, r2
 800708c:	4619      	mov	r1, r3
 800708e:	4603      	mov	r3, r0
 8007090:	4642      	mov	r2, r8
 8007092:	189b      	adds	r3, r3, r2
 8007094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007098:	464b      	mov	r3, r9
 800709a:	460a      	mov	r2, r1
 800709c:	eb42 0303 	adc.w	r3, r2, r3
 80070a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	f04f 0300 	mov.w	r3, #0
 80070b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070bc:	4649      	mov	r1, r9
 80070be:	008b      	lsls	r3, r1, #2
 80070c0:	4641      	mov	r1, r8
 80070c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c6:	4641      	mov	r1, r8
 80070c8:	008a      	lsls	r2, r1, #2
 80070ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070ce:	f7f9 fdd3 	bl	8000c78 <__aeabi_uldivmod>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	4b38      	ldr	r3, [pc, #224]	@ (80071bc <UART_SetConfig+0x4e4>)
 80070da:	fba3 2301 	umull	r2, r3, r3, r1
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2264      	movs	r2, #100	@ 0x64
 80070e2:	fb02 f303 	mul.w	r3, r2, r3
 80070e6:	1acb      	subs	r3, r1, r3
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	3332      	adds	r3, #50	@ 0x32
 80070ec:	4a33      	ldr	r2, [pc, #204]	@ (80071bc <UART_SetConfig+0x4e4>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070f8:	441c      	add	r4, r3
 80070fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070fe:	2200      	movs	r2, #0
 8007100:	673b      	str	r3, [r7, #112]	@ 0x70
 8007102:	677a      	str	r2, [r7, #116]	@ 0x74
 8007104:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007108:	4642      	mov	r2, r8
 800710a:	464b      	mov	r3, r9
 800710c:	1891      	adds	r1, r2, r2
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	415b      	adcs	r3, r3
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007118:	4641      	mov	r1, r8
 800711a:	1851      	adds	r1, r2, r1
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	4649      	mov	r1, r9
 8007120:	414b      	adcs	r3, r1
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007130:	4659      	mov	r1, fp
 8007132:	00cb      	lsls	r3, r1, #3
 8007134:	4651      	mov	r1, sl
 8007136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800713a:	4651      	mov	r1, sl
 800713c:	00ca      	lsls	r2, r1, #3
 800713e:	4610      	mov	r0, r2
 8007140:	4619      	mov	r1, r3
 8007142:	4603      	mov	r3, r0
 8007144:	4642      	mov	r2, r8
 8007146:	189b      	adds	r3, r3, r2
 8007148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800714a:	464b      	mov	r3, r9
 800714c:	460a      	mov	r2, r1
 800714e:	eb42 0303 	adc.w	r3, r2, r3
 8007152:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	663b      	str	r3, [r7, #96]	@ 0x60
 800715e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800716c:	4649      	mov	r1, r9
 800716e:	008b      	lsls	r3, r1, #2
 8007170:	4641      	mov	r1, r8
 8007172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007176:	4641      	mov	r1, r8
 8007178:	008a      	lsls	r2, r1, #2
 800717a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800717e:	f7f9 fd7b 	bl	8000c78 <__aeabi_uldivmod>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <UART_SetConfig+0x4e4>)
 8007188:	fba3 1302 	umull	r1, r3, r3, r2
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	2164      	movs	r1, #100	@ 0x64
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	3332      	adds	r3, #50	@ 0x32
 800719a:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <UART_SetConfig+0x4e4>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	f003 020f 	and.w	r2, r3, #15
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4422      	add	r2, r4
 80071ae:	609a      	str	r2, [r3, #8]
}
 80071b0:	bf00      	nop
 80071b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071b6:	46bd      	mov	sp, r7
 80071b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071bc:	51eb851f 	.word	0x51eb851f

080071c0 <atoi>:
 80071c0:	220a      	movs	r2, #10
 80071c2:	2100      	movs	r1, #0
 80071c4:	f000 b87a 	b.w	80072bc <strtol>

080071c8 <_strtol_l.constprop.0>:
 80071c8:	2b24      	cmp	r3, #36	@ 0x24
 80071ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ce:	4686      	mov	lr, r0
 80071d0:	4690      	mov	r8, r2
 80071d2:	d801      	bhi.n	80071d8 <_strtol_l.constprop.0+0x10>
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d106      	bne.n	80071e6 <_strtol_l.constprop.0+0x1e>
 80071d8:	f000 ffe8 	bl	80081ac <__errno>
 80071dc:	2316      	movs	r3, #22
 80071de:	6003      	str	r3, [r0, #0]
 80071e0:	2000      	movs	r0, #0
 80071e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e6:	4834      	ldr	r0, [pc, #208]	@ (80072b8 <_strtol_l.constprop.0+0xf0>)
 80071e8:	460d      	mov	r5, r1
 80071ea:	462a      	mov	r2, r5
 80071ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071f0:	5d06      	ldrb	r6, [r0, r4]
 80071f2:	f016 0608 	ands.w	r6, r6, #8
 80071f6:	d1f8      	bne.n	80071ea <_strtol_l.constprop.0+0x22>
 80071f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80071fa:	d12d      	bne.n	8007258 <_strtol_l.constprop.0+0x90>
 80071fc:	782c      	ldrb	r4, [r5, #0]
 80071fe:	2601      	movs	r6, #1
 8007200:	1c95      	adds	r5, r2, #2
 8007202:	f033 0210 	bics.w	r2, r3, #16
 8007206:	d109      	bne.n	800721c <_strtol_l.constprop.0+0x54>
 8007208:	2c30      	cmp	r4, #48	@ 0x30
 800720a:	d12a      	bne.n	8007262 <_strtol_l.constprop.0+0x9a>
 800720c:	782a      	ldrb	r2, [r5, #0]
 800720e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007212:	2a58      	cmp	r2, #88	@ 0x58
 8007214:	d125      	bne.n	8007262 <_strtol_l.constprop.0+0x9a>
 8007216:	786c      	ldrb	r4, [r5, #1]
 8007218:	2310      	movs	r3, #16
 800721a:	3502      	adds	r5, #2
 800721c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007220:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007224:	2200      	movs	r2, #0
 8007226:	fbbc f9f3 	udiv	r9, ip, r3
 800722a:	4610      	mov	r0, r2
 800722c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007230:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007234:	2f09      	cmp	r7, #9
 8007236:	d81b      	bhi.n	8007270 <_strtol_l.constprop.0+0xa8>
 8007238:	463c      	mov	r4, r7
 800723a:	42a3      	cmp	r3, r4
 800723c:	dd27      	ble.n	800728e <_strtol_l.constprop.0+0xc6>
 800723e:	1c57      	adds	r7, r2, #1
 8007240:	d007      	beq.n	8007252 <_strtol_l.constprop.0+0x8a>
 8007242:	4581      	cmp	r9, r0
 8007244:	d320      	bcc.n	8007288 <_strtol_l.constprop.0+0xc0>
 8007246:	d101      	bne.n	800724c <_strtol_l.constprop.0+0x84>
 8007248:	45a2      	cmp	sl, r4
 800724a:	db1d      	blt.n	8007288 <_strtol_l.constprop.0+0xc0>
 800724c:	fb00 4003 	mla	r0, r0, r3, r4
 8007250:	2201      	movs	r2, #1
 8007252:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007256:	e7eb      	b.n	8007230 <_strtol_l.constprop.0+0x68>
 8007258:	2c2b      	cmp	r4, #43	@ 0x2b
 800725a:	bf04      	itt	eq
 800725c:	782c      	ldrbeq	r4, [r5, #0]
 800725e:	1c95      	addeq	r5, r2, #2
 8007260:	e7cf      	b.n	8007202 <_strtol_l.constprop.0+0x3a>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1da      	bne.n	800721c <_strtol_l.constprop.0+0x54>
 8007266:	2c30      	cmp	r4, #48	@ 0x30
 8007268:	bf0c      	ite	eq
 800726a:	2308      	moveq	r3, #8
 800726c:	230a      	movne	r3, #10
 800726e:	e7d5      	b.n	800721c <_strtol_l.constprop.0+0x54>
 8007270:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007274:	2f19      	cmp	r7, #25
 8007276:	d801      	bhi.n	800727c <_strtol_l.constprop.0+0xb4>
 8007278:	3c37      	subs	r4, #55	@ 0x37
 800727a:	e7de      	b.n	800723a <_strtol_l.constprop.0+0x72>
 800727c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007280:	2f19      	cmp	r7, #25
 8007282:	d804      	bhi.n	800728e <_strtol_l.constprop.0+0xc6>
 8007284:	3c57      	subs	r4, #87	@ 0x57
 8007286:	e7d8      	b.n	800723a <_strtol_l.constprop.0+0x72>
 8007288:	f04f 32ff 	mov.w	r2, #4294967295
 800728c:	e7e1      	b.n	8007252 <_strtol_l.constprop.0+0x8a>
 800728e:	1c53      	adds	r3, r2, #1
 8007290:	d108      	bne.n	80072a4 <_strtol_l.constprop.0+0xdc>
 8007292:	2322      	movs	r3, #34	@ 0x22
 8007294:	f8ce 3000 	str.w	r3, [lr]
 8007298:	4660      	mov	r0, ip
 800729a:	f1b8 0f00 	cmp.w	r8, #0
 800729e:	d0a0      	beq.n	80071e2 <_strtol_l.constprop.0+0x1a>
 80072a0:	1e69      	subs	r1, r5, #1
 80072a2:	e006      	b.n	80072b2 <_strtol_l.constprop.0+0xea>
 80072a4:	b106      	cbz	r6, 80072a8 <_strtol_l.constprop.0+0xe0>
 80072a6:	4240      	negs	r0, r0
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d099      	beq.n	80071e2 <_strtol_l.constprop.0+0x1a>
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	d1f6      	bne.n	80072a0 <_strtol_l.constprop.0+0xd8>
 80072b2:	f8c8 1000 	str.w	r1, [r8]
 80072b6:	e794      	b.n	80071e2 <_strtol_l.constprop.0+0x1a>
 80072b8:	0800aa59 	.word	0x0800aa59

080072bc <strtol>:
 80072bc:	4613      	mov	r3, r2
 80072be:	460a      	mov	r2, r1
 80072c0:	4601      	mov	r1, r0
 80072c2:	4802      	ldr	r0, [pc, #8]	@ (80072cc <strtol+0x10>)
 80072c4:	6800      	ldr	r0, [r0, #0]
 80072c6:	f7ff bf7f 	b.w	80071c8 <_strtol_l.constprop.0>
 80072ca:	bf00      	nop
 80072cc:	2000001c 	.word	0x2000001c

080072d0 <__cvt>:
 80072d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	ec57 6b10 	vmov	r6, r7, d0
 80072d8:	2f00      	cmp	r7, #0
 80072da:	460c      	mov	r4, r1
 80072dc:	4619      	mov	r1, r3
 80072de:	463b      	mov	r3, r7
 80072e0:	bfbb      	ittet	lt
 80072e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072e6:	461f      	movlt	r7, r3
 80072e8:	2300      	movge	r3, #0
 80072ea:	232d      	movlt	r3, #45	@ 0x2d
 80072ec:	700b      	strb	r3, [r1, #0]
 80072ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072f4:	4691      	mov	r9, r2
 80072f6:	f023 0820 	bic.w	r8, r3, #32
 80072fa:	bfbc      	itt	lt
 80072fc:	4632      	movlt	r2, r6
 80072fe:	4616      	movlt	r6, r2
 8007300:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007304:	d005      	beq.n	8007312 <__cvt+0x42>
 8007306:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800730a:	d100      	bne.n	800730e <__cvt+0x3e>
 800730c:	3401      	adds	r4, #1
 800730e:	2102      	movs	r1, #2
 8007310:	e000      	b.n	8007314 <__cvt+0x44>
 8007312:	2103      	movs	r1, #3
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	ab02      	add	r3, sp, #8
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	ec47 6b10 	vmov	d0, r6, r7
 8007320:	4653      	mov	r3, sl
 8007322:	4622      	mov	r2, r4
 8007324:	f001 f82c 	bl	8008380 <_dtoa_r>
 8007328:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800732c:	4605      	mov	r5, r0
 800732e:	d119      	bne.n	8007364 <__cvt+0x94>
 8007330:	f019 0f01 	tst.w	r9, #1
 8007334:	d00e      	beq.n	8007354 <__cvt+0x84>
 8007336:	eb00 0904 	add.w	r9, r0, r4
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f9 fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 8007346:	b108      	cbz	r0, 800734c <__cvt+0x7c>
 8007348:	f8cd 900c 	str.w	r9, [sp, #12]
 800734c:	2230      	movs	r2, #48	@ 0x30
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	454b      	cmp	r3, r9
 8007352:	d31e      	bcc.n	8007392 <__cvt+0xc2>
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007358:	1b5b      	subs	r3, r3, r5
 800735a:	4628      	mov	r0, r5
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	b004      	add	sp, #16
 8007360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007364:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007368:	eb00 0904 	add.w	r9, r0, r4
 800736c:	d1e5      	bne.n	800733a <__cvt+0x6a>
 800736e:	7803      	ldrb	r3, [r0, #0]
 8007370:	2b30      	cmp	r3, #48	@ 0x30
 8007372:	d10a      	bne.n	800738a <__cvt+0xba>
 8007374:	2200      	movs	r2, #0
 8007376:	2300      	movs	r3, #0
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbbc 	bl	8000af8 <__aeabi_dcmpeq>
 8007380:	b918      	cbnz	r0, 800738a <__cvt+0xba>
 8007382:	f1c4 0401 	rsb	r4, r4, #1
 8007386:	f8ca 4000 	str.w	r4, [sl]
 800738a:	f8da 3000 	ldr.w	r3, [sl]
 800738e:	4499      	add	r9, r3
 8007390:	e7d3      	b.n	800733a <__cvt+0x6a>
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	9103      	str	r1, [sp, #12]
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e7d9      	b.n	800734e <__cvt+0x7e>

0800739a <__exponent>:
 800739a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800739c:	2900      	cmp	r1, #0
 800739e:	bfba      	itte	lt
 80073a0:	4249      	neglt	r1, r1
 80073a2:	232d      	movlt	r3, #45	@ 0x2d
 80073a4:	232b      	movge	r3, #43	@ 0x2b
 80073a6:	2909      	cmp	r1, #9
 80073a8:	7002      	strb	r2, [r0, #0]
 80073aa:	7043      	strb	r3, [r0, #1]
 80073ac:	dd29      	ble.n	8007402 <__exponent+0x68>
 80073ae:	f10d 0307 	add.w	r3, sp, #7
 80073b2:	461d      	mov	r5, r3
 80073b4:	270a      	movs	r7, #10
 80073b6:	461a      	mov	r2, r3
 80073b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80073bc:	fb07 1416 	mls	r4, r7, r6, r1
 80073c0:	3430      	adds	r4, #48	@ 0x30
 80073c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073c6:	460c      	mov	r4, r1
 80073c8:	2c63      	cmp	r4, #99	@ 0x63
 80073ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80073ce:	4631      	mov	r1, r6
 80073d0:	dcf1      	bgt.n	80073b6 <__exponent+0x1c>
 80073d2:	3130      	adds	r1, #48	@ 0x30
 80073d4:	1e94      	subs	r4, r2, #2
 80073d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073da:	1c41      	adds	r1, r0, #1
 80073dc:	4623      	mov	r3, r4
 80073de:	42ab      	cmp	r3, r5
 80073e0:	d30a      	bcc.n	80073f8 <__exponent+0x5e>
 80073e2:	f10d 0309 	add.w	r3, sp, #9
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	42ac      	cmp	r4, r5
 80073ea:	bf88      	it	hi
 80073ec:	2300      	movhi	r3, #0
 80073ee:	3302      	adds	r3, #2
 80073f0:	4403      	add	r3, r0
 80073f2:	1a18      	subs	r0, r3, r0
 80073f4:	b003      	add	sp, #12
 80073f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007400:	e7ed      	b.n	80073de <__exponent+0x44>
 8007402:	2330      	movs	r3, #48	@ 0x30
 8007404:	3130      	adds	r1, #48	@ 0x30
 8007406:	7083      	strb	r3, [r0, #2]
 8007408:	70c1      	strb	r1, [r0, #3]
 800740a:	1d03      	adds	r3, r0, #4
 800740c:	e7f1      	b.n	80073f2 <__exponent+0x58>
	...

08007410 <_printf_float>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	b08d      	sub	sp, #52	@ 0x34
 8007416:	460c      	mov	r4, r1
 8007418:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800741c:	4616      	mov	r6, r2
 800741e:	461f      	mov	r7, r3
 8007420:	4605      	mov	r5, r0
 8007422:	f000 fe79 	bl	8008118 <_localeconv_r>
 8007426:	6803      	ldr	r3, [r0, #0]
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	4618      	mov	r0, r3
 800742c:	f7f8 ff38 	bl	80002a0 <strlen>
 8007430:	2300      	movs	r3, #0
 8007432:	930a      	str	r3, [sp, #40]	@ 0x28
 8007434:	f8d8 3000 	ldr.w	r3, [r8]
 8007438:	9005      	str	r0, [sp, #20]
 800743a:	3307      	adds	r3, #7
 800743c:	f023 0307 	bic.w	r3, r3, #7
 8007440:	f103 0208 	add.w	r2, r3, #8
 8007444:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007448:	f8d4 b000 	ldr.w	fp, [r4]
 800744c:	f8c8 2000 	str.w	r2, [r8]
 8007450:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007454:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007458:	9307      	str	r3, [sp, #28]
 800745a:	f8cd 8018 	str.w	r8, [sp, #24]
 800745e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007466:	4b9c      	ldr	r3, [pc, #624]	@ (80076d8 <_printf_float+0x2c8>)
 8007468:	f04f 32ff 	mov.w	r2, #4294967295
 800746c:	f7f9 fb76 	bl	8000b5c <__aeabi_dcmpun>
 8007470:	bb70      	cbnz	r0, 80074d0 <_printf_float+0xc0>
 8007472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007476:	4b98      	ldr	r3, [pc, #608]	@ (80076d8 <_printf_float+0x2c8>)
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	f7f9 fb50 	bl	8000b20 <__aeabi_dcmple>
 8007480:	bb30      	cbnz	r0, 80074d0 <_printf_float+0xc0>
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	4640      	mov	r0, r8
 8007488:	4649      	mov	r1, r9
 800748a:	f7f9 fb3f 	bl	8000b0c <__aeabi_dcmplt>
 800748e:	b110      	cbz	r0, 8007496 <_printf_float+0x86>
 8007490:	232d      	movs	r3, #45	@ 0x2d
 8007492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007496:	4a91      	ldr	r2, [pc, #580]	@ (80076dc <_printf_float+0x2cc>)
 8007498:	4b91      	ldr	r3, [pc, #580]	@ (80076e0 <_printf_float+0x2d0>)
 800749a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800749e:	bf94      	ite	ls
 80074a0:	4690      	movls	r8, r2
 80074a2:	4698      	movhi	r8, r3
 80074a4:	2303      	movs	r3, #3
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	f02b 0304 	bic.w	r3, fp, #4
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	f04f 0900 	mov.w	r9, #0
 80074b2:	9700      	str	r7, [sp, #0]
 80074b4:	4633      	mov	r3, r6
 80074b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074b8:	4621      	mov	r1, r4
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 f9d2 	bl	8007864 <_printf_common>
 80074c0:	3001      	adds	r0, #1
 80074c2:	f040 808d 	bne.w	80075e0 <_printf_float+0x1d0>
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	b00d      	add	sp, #52	@ 0x34
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7f9 fb40 	bl	8000b5c <__aeabi_dcmpun>
 80074dc:	b140      	cbz	r0, 80074f0 <_printf_float+0xe0>
 80074de:	464b      	mov	r3, r9
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfbc      	itt	lt
 80074e4:	232d      	movlt	r3, #45	@ 0x2d
 80074e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074ea:	4a7e      	ldr	r2, [pc, #504]	@ (80076e4 <_printf_float+0x2d4>)
 80074ec:	4b7e      	ldr	r3, [pc, #504]	@ (80076e8 <_printf_float+0x2d8>)
 80074ee:	e7d4      	b.n	800749a <_printf_float+0x8a>
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074f6:	9206      	str	r2, [sp, #24]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	d13b      	bne.n	8007574 <_printf_float+0x164>
 80074fc:	2306      	movs	r3, #6
 80074fe:	6063      	str	r3, [r4, #4]
 8007500:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007504:	2300      	movs	r3, #0
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	ab0a      	add	r3, sp, #40	@ 0x28
 800750c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007510:	ab09      	add	r3, sp, #36	@ 0x24
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	6861      	ldr	r1, [r4, #4]
 8007516:	ec49 8b10 	vmov	d0, r8, r9
 800751a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800751e:	4628      	mov	r0, r5
 8007520:	f7ff fed6 	bl	80072d0 <__cvt>
 8007524:	9b06      	ldr	r3, [sp, #24]
 8007526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007528:	2b47      	cmp	r3, #71	@ 0x47
 800752a:	4680      	mov	r8, r0
 800752c:	d129      	bne.n	8007582 <_printf_float+0x172>
 800752e:	1cc8      	adds	r0, r1, #3
 8007530:	db02      	blt.n	8007538 <_printf_float+0x128>
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	4299      	cmp	r1, r3
 8007536:	dd41      	ble.n	80075bc <_printf_float+0x1ac>
 8007538:	f1aa 0a02 	sub.w	sl, sl, #2
 800753c:	fa5f fa8a 	uxtb.w	sl, sl
 8007540:	3901      	subs	r1, #1
 8007542:	4652      	mov	r2, sl
 8007544:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007548:	9109      	str	r1, [sp, #36]	@ 0x24
 800754a:	f7ff ff26 	bl	800739a <__exponent>
 800754e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007550:	1813      	adds	r3, r2, r0
 8007552:	2a01      	cmp	r2, #1
 8007554:	4681      	mov	r9, r0
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	dc02      	bgt.n	8007560 <_printf_float+0x150>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	07d2      	lsls	r2, r2, #31
 800755e:	d501      	bpl.n	8007564 <_printf_float+0x154>
 8007560:	3301      	adds	r3, #1
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0a2      	beq.n	80074b2 <_printf_float+0xa2>
 800756c:	232d      	movs	r3, #45	@ 0x2d
 800756e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007572:	e79e      	b.n	80074b2 <_printf_float+0xa2>
 8007574:	9a06      	ldr	r2, [sp, #24]
 8007576:	2a47      	cmp	r2, #71	@ 0x47
 8007578:	d1c2      	bne.n	8007500 <_printf_float+0xf0>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1c0      	bne.n	8007500 <_printf_float+0xf0>
 800757e:	2301      	movs	r3, #1
 8007580:	e7bd      	b.n	80074fe <_printf_float+0xee>
 8007582:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007586:	d9db      	bls.n	8007540 <_printf_float+0x130>
 8007588:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800758c:	d118      	bne.n	80075c0 <_printf_float+0x1b0>
 800758e:	2900      	cmp	r1, #0
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	dd0b      	ble.n	80075ac <_printf_float+0x19c>
 8007594:	6121      	str	r1, [r4, #16]
 8007596:	b913      	cbnz	r3, 800759e <_printf_float+0x18e>
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	07d0      	lsls	r0, r2, #31
 800759c:	d502      	bpl.n	80075a4 <_printf_float+0x194>
 800759e:	3301      	adds	r3, #1
 80075a0:	440b      	add	r3, r1
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075a6:	f04f 0900 	mov.w	r9, #0
 80075aa:	e7db      	b.n	8007564 <_printf_float+0x154>
 80075ac:	b913      	cbnz	r3, 80075b4 <_printf_float+0x1a4>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	07d2      	lsls	r2, r2, #31
 80075b2:	d501      	bpl.n	80075b8 <_printf_float+0x1a8>
 80075b4:	3302      	adds	r3, #2
 80075b6:	e7f4      	b.n	80075a2 <_printf_float+0x192>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e7f2      	b.n	80075a2 <_printf_float+0x192>
 80075bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075c2:	4299      	cmp	r1, r3
 80075c4:	db05      	blt.n	80075d2 <_printf_float+0x1c2>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	6121      	str	r1, [r4, #16]
 80075ca:	07d8      	lsls	r0, r3, #31
 80075cc:	d5ea      	bpl.n	80075a4 <_printf_float+0x194>
 80075ce:	1c4b      	adds	r3, r1, #1
 80075d0:	e7e7      	b.n	80075a2 <_printf_float+0x192>
 80075d2:	2900      	cmp	r1, #0
 80075d4:	bfd4      	ite	le
 80075d6:	f1c1 0202 	rsble	r2, r1, #2
 80075da:	2201      	movgt	r2, #1
 80075dc:	4413      	add	r3, r2
 80075de:	e7e0      	b.n	80075a2 <_printf_float+0x192>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	055a      	lsls	r2, r3, #21
 80075e4:	d407      	bmi.n	80075f6 <_printf_float+0x1e6>
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	4642      	mov	r2, r8
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	d12b      	bne.n	800764c <_printf_float+0x23c>
 80075f4:	e767      	b.n	80074c6 <_printf_float+0xb6>
 80075f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075fa:	f240 80dd 	bls.w	80077b8 <_printf_float+0x3a8>
 80075fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	f7f9 fa77 	bl	8000af8 <__aeabi_dcmpeq>
 800760a:	2800      	cmp	r0, #0
 800760c:	d033      	beq.n	8007676 <_printf_float+0x266>
 800760e:	4a37      	ldr	r2, [pc, #220]	@ (80076ec <_printf_float+0x2dc>)
 8007610:	2301      	movs	r3, #1
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	47b8      	blx	r7
 8007618:	3001      	adds	r0, #1
 800761a:	f43f af54 	beq.w	80074c6 <_printf_float+0xb6>
 800761e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007622:	4543      	cmp	r3, r8
 8007624:	db02      	blt.n	800762c <_printf_float+0x21c>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	07d8      	lsls	r0, r3, #31
 800762a:	d50f      	bpl.n	800764c <_printf_float+0x23c>
 800762c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f af45 	beq.w	80074c6 <_printf_float+0xb6>
 800763c:	f04f 0900 	mov.w	r9, #0
 8007640:	f108 38ff 	add.w	r8, r8, #4294967295
 8007644:	f104 0a1a 	add.w	sl, r4, #26
 8007648:	45c8      	cmp	r8, r9
 800764a:	dc09      	bgt.n	8007660 <_printf_float+0x250>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	079b      	lsls	r3, r3, #30
 8007650:	f100 8103 	bmi.w	800785a <_printf_float+0x44a>
 8007654:	68e0      	ldr	r0, [r4, #12]
 8007656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007658:	4298      	cmp	r0, r3
 800765a:	bfb8      	it	lt
 800765c:	4618      	movlt	r0, r3
 800765e:	e734      	b.n	80074ca <_printf_float+0xba>
 8007660:	2301      	movs	r3, #1
 8007662:	4652      	mov	r2, sl
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f af2b 	beq.w	80074c6 <_printf_float+0xb6>
 8007670:	f109 0901 	add.w	r9, r9, #1
 8007674:	e7e8      	b.n	8007648 <_printf_float+0x238>
 8007676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	dc39      	bgt.n	80076f0 <_printf_float+0x2e0>
 800767c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <_printf_float+0x2dc>)
 800767e:	2301      	movs	r3, #1
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f af1d 	beq.w	80074c6 <_printf_float+0xb6>
 800768c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007690:	ea59 0303 	orrs.w	r3, r9, r3
 8007694:	d102      	bne.n	800769c <_printf_float+0x28c>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	07d9      	lsls	r1, r3, #31
 800769a:	d5d7      	bpl.n	800764c <_printf_float+0x23c>
 800769c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af0d 	beq.w	80074c6 <_printf_float+0xb6>
 80076ac:	f04f 0a00 	mov.w	sl, #0
 80076b0:	f104 0b1a 	add.w	fp, r4, #26
 80076b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b6:	425b      	negs	r3, r3
 80076b8:	4553      	cmp	r3, sl
 80076ba:	dc01      	bgt.n	80076c0 <_printf_float+0x2b0>
 80076bc:	464b      	mov	r3, r9
 80076be:	e793      	b.n	80075e8 <_printf_float+0x1d8>
 80076c0:	2301      	movs	r3, #1
 80076c2:	465a      	mov	r2, fp
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f aefb 	beq.w	80074c6 <_printf_float+0xb6>
 80076d0:	f10a 0a01 	add.w	sl, sl, #1
 80076d4:	e7ee      	b.n	80076b4 <_printf_float+0x2a4>
 80076d6:	bf00      	nop
 80076d8:	7fefffff 	.word	0x7fefffff
 80076dc:	0800ab59 	.word	0x0800ab59
 80076e0:	0800ab5d 	.word	0x0800ab5d
 80076e4:	0800ab61 	.word	0x0800ab61
 80076e8:	0800ab65 	.word	0x0800ab65
 80076ec:	0800ab69 	.word	0x0800ab69
 80076f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076f6:	4553      	cmp	r3, sl
 80076f8:	bfa8      	it	ge
 80076fa:	4653      	movge	r3, sl
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	4699      	mov	r9, r3
 8007700:	dc36      	bgt.n	8007770 <_printf_float+0x360>
 8007702:	f04f 0b00 	mov.w	fp, #0
 8007706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800770a:	f104 021a 	add.w	r2, r4, #26
 800770e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007710:	9306      	str	r3, [sp, #24]
 8007712:	eba3 0309 	sub.w	r3, r3, r9
 8007716:	455b      	cmp	r3, fp
 8007718:	dc31      	bgt.n	800777e <_printf_float+0x36e>
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	459a      	cmp	sl, r3
 800771e:	dc3a      	bgt.n	8007796 <_printf_float+0x386>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	07da      	lsls	r2, r3, #31
 8007724:	d437      	bmi.n	8007796 <_printf_float+0x386>
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	ebaa 0903 	sub.w	r9, sl, r3
 800772c:	9b06      	ldr	r3, [sp, #24]
 800772e:	ebaa 0303 	sub.w	r3, sl, r3
 8007732:	4599      	cmp	r9, r3
 8007734:	bfa8      	it	ge
 8007736:	4699      	movge	r9, r3
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	dc33      	bgt.n	80077a6 <_printf_float+0x396>
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007746:	f104 0b1a 	add.w	fp, r4, #26
 800774a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774c:	ebaa 0303 	sub.w	r3, sl, r3
 8007750:	eba3 0309 	sub.w	r3, r3, r9
 8007754:	4543      	cmp	r3, r8
 8007756:	f77f af79 	ble.w	800764c <_printf_float+0x23c>
 800775a:	2301      	movs	r3, #1
 800775c:	465a      	mov	r2, fp
 800775e:	4631      	mov	r1, r6
 8007760:	4628      	mov	r0, r5
 8007762:	47b8      	blx	r7
 8007764:	3001      	adds	r0, #1
 8007766:	f43f aeae 	beq.w	80074c6 <_printf_float+0xb6>
 800776a:	f108 0801 	add.w	r8, r8, #1
 800776e:	e7ec      	b.n	800774a <_printf_float+0x33a>
 8007770:	4642      	mov	r2, r8
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	d1c2      	bne.n	8007702 <_printf_float+0x2f2>
 800777c:	e6a3      	b.n	80074c6 <_printf_float+0xb6>
 800777e:	2301      	movs	r3, #1
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	9206      	str	r2, [sp, #24]
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae9c 	beq.w	80074c6 <_printf_float+0xb6>
 800778e:	9a06      	ldr	r2, [sp, #24]
 8007790:	f10b 0b01 	add.w	fp, fp, #1
 8007794:	e7bb      	b.n	800770e <_printf_float+0x2fe>
 8007796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	d1c0      	bne.n	8007726 <_printf_float+0x316>
 80077a4:	e68f      	b.n	80074c6 <_printf_float+0xb6>
 80077a6:	9a06      	ldr	r2, [sp, #24]
 80077a8:	464b      	mov	r3, r9
 80077aa:	4442      	add	r2, r8
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	d1c3      	bne.n	800773e <_printf_float+0x32e>
 80077b6:	e686      	b.n	80074c6 <_printf_float+0xb6>
 80077b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077bc:	f1ba 0f01 	cmp.w	sl, #1
 80077c0:	dc01      	bgt.n	80077c6 <_printf_float+0x3b6>
 80077c2:	07db      	lsls	r3, r3, #31
 80077c4:	d536      	bpl.n	8007834 <_printf_float+0x424>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4642      	mov	r2, r8
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f ae78 	beq.w	80074c6 <_printf_float+0xb6>
 80077d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f ae70 	beq.w	80074c6 <_printf_float+0xb6>
 80077e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077ea:	2200      	movs	r2, #0
 80077ec:	2300      	movs	r3, #0
 80077ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077f2:	f7f9 f981 	bl	8000af8 <__aeabi_dcmpeq>
 80077f6:	b9c0      	cbnz	r0, 800782a <_printf_float+0x41a>
 80077f8:	4653      	mov	r3, sl
 80077fa:	f108 0201 	add.w	r2, r8, #1
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	d10c      	bne.n	8007822 <_printf_float+0x412>
 8007808:	e65d      	b.n	80074c6 <_printf_float+0xb6>
 800780a:	2301      	movs	r3, #1
 800780c:	465a      	mov	r2, fp
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	f43f ae56 	beq.w	80074c6 <_printf_float+0xb6>
 800781a:	f108 0801 	add.w	r8, r8, #1
 800781e:	45d0      	cmp	r8, sl
 8007820:	dbf3      	blt.n	800780a <_printf_float+0x3fa>
 8007822:	464b      	mov	r3, r9
 8007824:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007828:	e6df      	b.n	80075ea <_printf_float+0x1da>
 800782a:	f04f 0800 	mov.w	r8, #0
 800782e:	f104 0b1a 	add.w	fp, r4, #26
 8007832:	e7f4      	b.n	800781e <_printf_float+0x40e>
 8007834:	2301      	movs	r3, #1
 8007836:	4642      	mov	r2, r8
 8007838:	e7e1      	b.n	80077fe <_printf_float+0x3ee>
 800783a:	2301      	movs	r3, #1
 800783c:	464a      	mov	r2, r9
 800783e:	4631      	mov	r1, r6
 8007840:	4628      	mov	r0, r5
 8007842:	47b8      	blx	r7
 8007844:	3001      	adds	r0, #1
 8007846:	f43f ae3e 	beq.w	80074c6 <_printf_float+0xb6>
 800784a:	f108 0801 	add.w	r8, r8, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	4543      	cmp	r3, r8
 8007856:	dcf0      	bgt.n	800783a <_printf_float+0x42a>
 8007858:	e6fc      	b.n	8007654 <_printf_float+0x244>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 0919 	add.w	r9, r4, #25
 8007862:	e7f4      	b.n	800784e <_printf_float+0x43e>

08007864 <_printf_common>:
 8007864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	4616      	mov	r6, r2
 800786a:	4698      	mov	r8, r3
 800786c:	688a      	ldr	r2, [r1, #8]
 800786e:	690b      	ldr	r3, [r1, #16]
 8007870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007874:	4293      	cmp	r3, r2
 8007876:	bfb8      	it	lt
 8007878:	4613      	movlt	r3, r2
 800787a:	6033      	str	r3, [r6, #0]
 800787c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007880:	4607      	mov	r7, r0
 8007882:	460c      	mov	r4, r1
 8007884:	b10a      	cbz	r2, 800788a <_printf_common+0x26>
 8007886:	3301      	adds	r3, #1
 8007888:	6033      	str	r3, [r6, #0]
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	0699      	lsls	r1, r3, #26
 800788e:	bf42      	ittt	mi
 8007890:	6833      	ldrmi	r3, [r6, #0]
 8007892:	3302      	addmi	r3, #2
 8007894:	6033      	strmi	r3, [r6, #0]
 8007896:	6825      	ldr	r5, [r4, #0]
 8007898:	f015 0506 	ands.w	r5, r5, #6
 800789c:	d106      	bne.n	80078ac <_printf_common+0x48>
 800789e:	f104 0a19 	add.w	sl, r4, #25
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	6832      	ldr	r2, [r6, #0]
 80078a6:	1a9b      	subs	r3, r3, r2
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	dc26      	bgt.n	80078fa <_printf_common+0x96>
 80078ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078b0:	6822      	ldr	r2, [r4, #0]
 80078b2:	3b00      	subs	r3, #0
 80078b4:	bf18      	it	ne
 80078b6:	2301      	movne	r3, #1
 80078b8:	0692      	lsls	r2, r2, #26
 80078ba:	d42b      	bmi.n	8007914 <_printf_common+0xb0>
 80078bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078c0:	4641      	mov	r1, r8
 80078c2:	4638      	mov	r0, r7
 80078c4:	47c8      	blx	r9
 80078c6:	3001      	adds	r0, #1
 80078c8:	d01e      	beq.n	8007908 <_printf_common+0xa4>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	6922      	ldr	r2, [r4, #16]
 80078ce:	f003 0306 	and.w	r3, r3, #6
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	bf02      	ittt	eq
 80078d6:	68e5      	ldreq	r5, [r4, #12]
 80078d8:	6833      	ldreq	r3, [r6, #0]
 80078da:	1aed      	subeq	r5, r5, r3
 80078dc:	68a3      	ldr	r3, [r4, #8]
 80078de:	bf0c      	ite	eq
 80078e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e4:	2500      	movne	r5, #0
 80078e6:	4293      	cmp	r3, r2
 80078e8:	bfc4      	itt	gt
 80078ea:	1a9b      	subgt	r3, r3, r2
 80078ec:	18ed      	addgt	r5, r5, r3
 80078ee:	2600      	movs	r6, #0
 80078f0:	341a      	adds	r4, #26
 80078f2:	42b5      	cmp	r5, r6
 80078f4:	d11a      	bne.n	800792c <_printf_common+0xc8>
 80078f6:	2000      	movs	r0, #0
 80078f8:	e008      	b.n	800790c <_printf_common+0xa8>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4652      	mov	r2, sl
 80078fe:	4641      	mov	r1, r8
 8007900:	4638      	mov	r0, r7
 8007902:	47c8      	blx	r9
 8007904:	3001      	adds	r0, #1
 8007906:	d103      	bne.n	8007910 <_printf_common+0xac>
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	3501      	adds	r5, #1
 8007912:	e7c6      	b.n	80078a2 <_printf_common+0x3e>
 8007914:	18e1      	adds	r1, r4, r3
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	2030      	movs	r0, #48	@ 0x30
 800791a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800791e:	4422      	add	r2, r4
 8007920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007924:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007928:	3302      	adds	r3, #2
 800792a:	e7c7      	b.n	80078bc <_printf_common+0x58>
 800792c:	2301      	movs	r3, #1
 800792e:	4622      	mov	r2, r4
 8007930:	4641      	mov	r1, r8
 8007932:	4638      	mov	r0, r7
 8007934:	47c8      	blx	r9
 8007936:	3001      	adds	r0, #1
 8007938:	d0e6      	beq.n	8007908 <_printf_common+0xa4>
 800793a:	3601      	adds	r6, #1
 800793c:	e7d9      	b.n	80078f2 <_printf_common+0x8e>
	...

08007940 <_printf_i>:
 8007940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007944:	7e0f      	ldrb	r7, [r1, #24]
 8007946:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007948:	2f78      	cmp	r7, #120	@ 0x78
 800794a:	4691      	mov	r9, r2
 800794c:	4680      	mov	r8, r0
 800794e:	460c      	mov	r4, r1
 8007950:	469a      	mov	sl, r3
 8007952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007956:	d807      	bhi.n	8007968 <_printf_i+0x28>
 8007958:	2f62      	cmp	r7, #98	@ 0x62
 800795a:	d80a      	bhi.n	8007972 <_printf_i+0x32>
 800795c:	2f00      	cmp	r7, #0
 800795e:	f000 80d2 	beq.w	8007b06 <_printf_i+0x1c6>
 8007962:	2f58      	cmp	r7, #88	@ 0x58
 8007964:	f000 80b9 	beq.w	8007ada <_printf_i+0x19a>
 8007968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800796c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007970:	e03a      	b.n	80079e8 <_printf_i+0xa8>
 8007972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007976:	2b15      	cmp	r3, #21
 8007978:	d8f6      	bhi.n	8007968 <_printf_i+0x28>
 800797a:	a101      	add	r1, pc, #4	@ (adr r1, 8007980 <_printf_i+0x40>)
 800797c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007980:	080079d9 	.word	0x080079d9
 8007984:	080079ed 	.word	0x080079ed
 8007988:	08007969 	.word	0x08007969
 800798c:	08007969 	.word	0x08007969
 8007990:	08007969 	.word	0x08007969
 8007994:	08007969 	.word	0x08007969
 8007998:	080079ed 	.word	0x080079ed
 800799c:	08007969 	.word	0x08007969
 80079a0:	08007969 	.word	0x08007969
 80079a4:	08007969 	.word	0x08007969
 80079a8:	08007969 	.word	0x08007969
 80079ac:	08007aed 	.word	0x08007aed
 80079b0:	08007a17 	.word	0x08007a17
 80079b4:	08007aa7 	.word	0x08007aa7
 80079b8:	08007969 	.word	0x08007969
 80079bc:	08007969 	.word	0x08007969
 80079c0:	08007b0f 	.word	0x08007b0f
 80079c4:	08007969 	.word	0x08007969
 80079c8:	08007a17 	.word	0x08007a17
 80079cc:	08007969 	.word	0x08007969
 80079d0:	08007969 	.word	0x08007969
 80079d4:	08007aaf 	.word	0x08007aaf
 80079d8:	6833      	ldr	r3, [r6, #0]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6032      	str	r2, [r6, #0]
 80079e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079e8:	2301      	movs	r3, #1
 80079ea:	e09d      	b.n	8007b28 <_printf_i+0x1e8>
 80079ec:	6833      	ldr	r3, [r6, #0]
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	1d19      	adds	r1, r3, #4
 80079f2:	6031      	str	r1, [r6, #0]
 80079f4:	0606      	lsls	r6, r0, #24
 80079f6:	d501      	bpl.n	80079fc <_printf_i+0xbc>
 80079f8:	681d      	ldr	r5, [r3, #0]
 80079fa:	e003      	b.n	8007a04 <_printf_i+0xc4>
 80079fc:	0645      	lsls	r5, r0, #25
 80079fe:	d5fb      	bpl.n	80079f8 <_printf_i+0xb8>
 8007a00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	da03      	bge.n	8007a10 <_printf_i+0xd0>
 8007a08:	232d      	movs	r3, #45	@ 0x2d
 8007a0a:	426d      	negs	r5, r5
 8007a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a10:	4859      	ldr	r0, [pc, #356]	@ (8007b78 <_printf_i+0x238>)
 8007a12:	230a      	movs	r3, #10
 8007a14:	e011      	b.n	8007a3a <_printf_i+0xfa>
 8007a16:	6821      	ldr	r1, [r4, #0]
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	0608      	lsls	r0, r1, #24
 8007a1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a20:	d402      	bmi.n	8007a28 <_printf_i+0xe8>
 8007a22:	0649      	lsls	r1, r1, #25
 8007a24:	bf48      	it	mi
 8007a26:	b2ad      	uxthmi	r5, r5
 8007a28:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a2a:	4853      	ldr	r0, [pc, #332]	@ (8007b78 <_printf_i+0x238>)
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	bf14      	ite	ne
 8007a30:	230a      	movne	r3, #10
 8007a32:	2308      	moveq	r3, #8
 8007a34:	2100      	movs	r1, #0
 8007a36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a3a:	6866      	ldr	r6, [r4, #4]
 8007a3c:	60a6      	str	r6, [r4, #8]
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	bfa2      	ittt	ge
 8007a42:	6821      	ldrge	r1, [r4, #0]
 8007a44:	f021 0104 	bicge.w	r1, r1, #4
 8007a48:	6021      	strge	r1, [r4, #0]
 8007a4a:	b90d      	cbnz	r5, 8007a50 <_printf_i+0x110>
 8007a4c:	2e00      	cmp	r6, #0
 8007a4e:	d04b      	beq.n	8007ae8 <_printf_i+0x1a8>
 8007a50:	4616      	mov	r6, r2
 8007a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a56:	fb03 5711 	mls	r7, r3, r1, r5
 8007a5a:	5dc7      	ldrb	r7, [r0, r7]
 8007a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a60:	462f      	mov	r7, r5
 8007a62:	42bb      	cmp	r3, r7
 8007a64:	460d      	mov	r5, r1
 8007a66:	d9f4      	bls.n	8007a52 <_printf_i+0x112>
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d10b      	bne.n	8007a84 <_printf_i+0x144>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	07df      	lsls	r7, r3, #31
 8007a70:	d508      	bpl.n	8007a84 <_printf_i+0x144>
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	6861      	ldr	r1, [r4, #4]
 8007a76:	4299      	cmp	r1, r3
 8007a78:	bfde      	ittt	le
 8007a7a:	2330      	movle	r3, #48	@ 0x30
 8007a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a84:	1b92      	subs	r2, r2, r6
 8007a86:	6122      	str	r2, [r4, #16]
 8007a88:	f8cd a000 	str.w	sl, [sp]
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	aa03      	add	r2, sp, #12
 8007a90:	4621      	mov	r1, r4
 8007a92:	4640      	mov	r0, r8
 8007a94:	f7ff fee6 	bl	8007864 <_printf_common>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d14a      	bne.n	8007b32 <_printf_i+0x1f2>
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	b004      	add	sp, #16
 8007aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f043 0320 	orr.w	r3, r3, #32
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	4833      	ldr	r0, [pc, #204]	@ (8007b7c <_printf_i+0x23c>)
 8007ab0:	2778      	movs	r7, #120	@ 0x78
 8007ab2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	6831      	ldr	r1, [r6, #0]
 8007aba:	061f      	lsls	r7, r3, #24
 8007abc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ac0:	d402      	bmi.n	8007ac8 <_printf_i+0x188>
 8007ac2:	065f      	lsls	r7, r3, #25
 8007ac4:	bf48      	it	mi
 8007ac6:	b2ad      	uxthmi	r5, r5
 8007ac8:	6031      	str	r1, [r6, #0]
 8007aca:	07d9      	lsls	r1, r3, #31
 8007acc:	bf44      	itt	mi
 8007ace:	f043 0320 	orrmi.w	r3, r3, #32
 8007ad2:	6023      	strmi	r3, [r4, #0]
 8007ad4:	b11d      	cbz	r5, 8007ade <_printf_i+0x19e>
 8007ad6:	2310      	movs	r3, #16
 8007ad8:	e7ac      	b.n	8007a34 <_printf_i+0xf4>
 8007ada:	4827      	ldr	r0, [pc, #156]	@ (8007b78 <_printf_i+0x238>)
 8007adc:	e7e9      	b.n	8007ab2 <_printf_i+0x172>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f023 0320 	bic.w	r3, r3, #32
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	e7f6      	b.n	8007ad6 <_printf_i+0x196>
 8007ae8:	4616      	mov	r6, r2
 8007aea:	e7bd      	b.n	8007a68 <_printf_i+0x128>
 8007aec:	6833      	ldr	r3, [r6, #0]
 8007aee:	6825      	ldr	r5, [r4, #0]
 8007af0:	6961      	ldr	r1, [r4, #20]
 8007af2:	1d18      	adds	r0, r3, #4
 8007af4:	6030      	str	r0, [r6, #0]
 8007af6:	062e      	lsls	r6, r5, #24
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	d501      	bpl.n	8007b00 <_printf_i+0x1c0>
 8007afc:	6019      	str	r1, [r3, #0]
 8007afe:	e002      	b.n	8007b06 <_printf_i+0x1c6>
 8007b00:	0668      	lsls	r0, r5, #25
 8007b02:	d5fb      	bpl.n	8007afc <_printf_i+0x1bc>
 8007b04:	8019      	strh	r1, [r3, #0]
 8007b06:	2300      	movs	r3, #0
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	4616      	mov	r6, r2
 8007b0c:	e7bc      	b.n	8007a88 <_printf_i+0x148>
 8007b0e:	6833      	ldr	r3, [r6, #0]
 8007b10:	1d1a      	adds	r2, r3, #4
 8007b12:	6032      	str	r2, [r6, #0]
 8007b14:	681e      	ldr	r6, [r3, #0]
 8007b16:	6862      	ldr	r2, [r4, #4]
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7f8 fb70 	bl	8000200 <memchr>
 8007b20:	b108      	cbz	r0, 8007b26 <_printf_i+0x1e6>
 8007b22:	1b80      	subs	r0, r0, r6
 8007b24:	6060      	str	r0, [r4, #4]
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	6123      	str	r3, [r4, #16]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b30:	e7aa      	b.n	8007a88 <_printf_i+0x148>
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	4632      	mov	r2, r6
 8007b36:	4649      	mov	r1, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	47d0      	blx	sl
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d0ad      	beq.n	8007a9c <_printf_i+0x15c>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	079b      	lsls	r3, r3, #30
 8007b44:	d413      	bmi.n	8007b6e <_printf_i+0x22e>
 8007b46:	68e0      	ldr	r0, [r4, #12]
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	4298      	cmp	r0, r3
 8007b4c:	bfb8      	it	lt
 8007b4e:	4618      	movlt	r0, r3
 8007b50:	e7a6      	b.n	8007aa0 <_printf_i+0x160>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4632      	mov	r2, r6
 8007b56:	4649      	mov	r1, r9
 8007b58:	4640      	mov	r0, r8
 8007b5a:	47d0      	blx	sl
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d09d      	beq.n	8007a9c <_printf_i+0x15c>
 8007b60:	3501      	adds	r5, #1
 8007b62:	68e3      	ldr	r3, [r4, #12]
 8007b64:	9903      	ldr	r1, [sp, #12]
 8007b66:	1a5b      	subs	r3, r3, r1
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	dcf2      	bgt.n	8007b52 <_printf_i+0x212>
 8007b6c:	e7eb      	b.n	8007b46 <_printf_i+0x206>
 8007b6e:	2500      	movs	r5, #0
 8007b70:	f104 0619 	add.w	r6, r4, #25
 8007b74:	e7f5      	b.n	8007b62 <_printf_i+0x222>
 8007b76:	bf00      	nop
 8007b78:	0800ab6b 	.word	0x0800ab6b
 8007b7c:	0800ab7c 	.word	0x0800ab7c

08007b80 <std>:
 8007b80:	2300      	movs	r3, #0
 8007b82:	b510      	push	{r4, lr}
 8007b84:	4604      	mov	r4, r0
 8007b86:	e9c0 3300 	strd	r3, r3, [r0]
 8007b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b8e:	6083      	str	r3, [r0, #8]
 8007b90:	8181      	strh	r1, [r0, #12]
 8007b92:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b94:	81c2      	strh	r2, [r0, #14]
 8007b96:	6183      	str	r3, [r0, #24]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	2208      	movs	r2, #8
 8007b9c:	305c      	adds	r0, #92	@ 0x5c
 8007b9e:	f000 fa21 	bl	8007fe4 <memset>
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd8 <std+0x58>)
 8007ba4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <std+0x5c>)
 8007ba8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007baa:	4b0d      	ldr	r3, [pc, #52]	@ (8007be0 <std+0x60>)
 8007bac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <std+0x64>)
 8007bb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <std+0x68>)
 8007bb4:	6224      	str	r4, [r4, #32]
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d006      	beq.n	8007bc8 <std+0x48>
 8007bba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bbe:	4294      	cmp	r4, r2
 8007bc0:	d002      	beq.n	8007bc8 <std+0x48>
 8007bc2:	33d0      	adds	r3, #208	@ 0xd0
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	d105      	bne.n	8007bd4 <std+0x54>
 8007bc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd0:	f000 bb16 	b.w	8008200 <__retarget_lock_init_recursive>
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08007e35 	.word	0x08007e35
 8007bdc:	08007e57 	.word	0x08007e57
 8007be0:	08007e8f 	.word	0x08007e8f
 8007be4:	08007eb3 	.word	0x08007eb3
 8007be8:	20000d9c 	.word	0x20000d9c

08007bec <stdio_exit_handler>:
 8007bec:	4a02      	ldr	r2, [pc, #8]	@ (8007bf8 <stdio_exit_handler+0xc>)
 8007bee:	4903      	ldr	r1, [pc, #12]	@ (8007bfc <stdio_exit_handler+0x10>)
 8007bf0:	4803      	ldr	r0, [pc, #12]	@ (8007c00 <stdio_exit_handler+0x14>)
 8007bf2:	f000 b869 	b.w	8007cc8 <_fwalk_sglue>
 8007bf6:	bf00      	nop
 8007bf8:	20000010 	.word	0x20000010
 8007bfc:	08009e49 	.word	0x08009e49
 8007c00:	20000020 	.word	0x20000020

08007c04 <cleanup_stdio>:
 8007c04:	6841      	ldr	r1, [r0, #4]
 8007c06:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <cleanup_stdio+0x34>)
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	d001      	beq.n	8007c14 <cleanup_stdio+0x10>
 8007c10:	f002 f91a 	bl	8009e48 <_fflush_r>
 8007c14:	68a1      	ldr	r1, [r4, #8]
 8007c16:	4b09      	ldr	r3, [pc, #36]	@ (8007c3c <cleanup_stdio+0x38>)
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d002      	beq.n	8007c22 <cleanup_stdio+0x1e>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f002 f913 	bl	8009e48 <_fflush_r>
 8007c22:	68e1      	ldr	r1, [r4, #12]
 8007c24:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <cleanup_stdio+0x3c>)
 8007c26:	4299      	cmp	r1, r3
 8007c28:	d004      	beq.n	8007c34 <cleanup_stdio+0x30>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c30:	f002 b90a 	b.w	8009e48 <_fflush_r>
 8007c34:	bd10      	pop	{r4, pc}
 8007c36:	bf00      	nop
 8007c38:	20000d9c 	.word	0x20000d9c
 8007c3c:	20000e04 	.word	0x20000e04
 8007c40:	20000e6c 	.word	0x20000e6c

08007c44 <global_stdio_init.part.0>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	4b0b      	ldr	r3, [pc, #44]	@ (8007c74 <global_stdio_init.part.0+0x30>)
 8007c48:	4c0b      	ldr	r4, [pc, #44]	@ (8007c78 <global_stdio_init.part.0+0x34>)
 8007c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8007c7c <global_stdio_init.part.0+0x38>)
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	2200      	movs	r2, #0
 8007c52:	2104      	movs	r1, #4
 8007c54:	f7ff ff94 	bl	8007b80 <std>
 8007c58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	2109      	movs	r1, #9
 8007c60:	f7ff ff8e 	bl	8007b80 <std>
 8007c64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c68:	2202      	movs	r2, #2
 8007c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6e:	2112      	movs	r1, #18
 8007c70:	f7ff bf86 	b.w	8007b80 <std>
 8007c74:	20000ed4 	.word	0x20000ed4
 8007c78:	20000d9c 	.word	0x20000d9c
 8007c7c:	08007bed 	.word	0x08007bed

08007c80 <__sfp_lock_acquire>:
 8007c80:	4801      	ldr	r0, [pc, #4]	@ (8007c88 <__sfp_lock_acquire+0x8>)
 8007c82:	f000 babe 	b.w	8008202 <__retarget_lock_acquire_recursive>
 8007c86:	bf00      	nop
 8007c88:	20000edd 	.word	0x20000edd

08007c8c <__sfp_lock_release>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	@ (8007c94 <__sfp_lock_release+0x8>)
 8007c8e:	f000 bab9 	b.w	8008204 <__retarget_lock_release_recursive>
 8007c92:	bf00      	nop
 8007c94:	20000edd 	.word	0x20000edd

08007c98 <__sinit>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	f7ff fff0 	bl	8007c80 <__sfp_lock_acquire>
 8007ca0:	6a23      	ldr	r3, [r4, #32]
 8007ca2:	b11b      	cbz	r3, 8007cac <__sinit+0x14>
 8007ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca8:	f7ff bff0 	b.w	8007c8c <__sfp_lock_release>
 8007cac:	4b04      	ldr	r3, [pc, #16]	@ (8007cc0 <__sinit+0x28>)
 8007cae:	6223      	str	r3, [r4, #32]
 8007cb0:	4b04      	ldr	r3, [pc, #16]	@ (8007cc4 <__sinit+0x2c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f5      	bne.n	8007ca4 <__sinit+0xc>
 8007cb8:	f7ff ffc4 	bl	8007c44 <global_stdio_init.part.0>
 8007cbc:	e7f2      	b.n	8007ca4 <__sinit+0xc>
 8007cbe:	bf00      	nop
 8007cc0:	08007c05 	.word	0x08007c05
 8007cc4:	20000ed4 	.word	0x20000ed4

08007cc8 <_fwalk_sglue>:
 8007cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	4607      	mov	r7, r0
 8007cce:	4688      	mov	r8, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cd8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cdc:	d505      	bpl.n	8007cea <_fwalk_sglue+0x22>
 8007cde:	6824      	ldr	r4, [r4, #0]
 8007ce0:	2c00      	cmp	r4, #0
 8007ce2:	d1f7      	bne.n	8007cd4 <_fwalk_sglue+0xc>
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cea:	89ab      	ldrh	r3, [r5, #12]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d907      	bls.n	8007d00 <_fwalk_sglue+0x38>
 8007cf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	d003      	beq.n	8007d00 <_fwalk_sglue+0x38>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	47c0      	blx	r8
 8007cfe:	4306      	orrs	r6, r0
 8007d00:	3568      	adds	r5, #104	@ 0x68
 8007d02:	e7e9      	b.n	8007cd8 <_fwalk_sglue+0x10>

08007d04 <iprintf>:
 8007d04:	b40f      	push	{r0, r1, r2, r3}
 8007d06:	b507      	push	{r0, r1, r2, lr}
 8007d08:	4906      	ldr	r1, [pc, #24]	@ (8007d24 <iprintf+0x20>)
 8007d0a:	ab04      	add	r3, sp, #16
 8007d0c:	6808      	ldr	r0, [r1, #0]
 8007d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d12:	6881      	ldr	r1, [r0, #8]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	f001 fefb 	bl	8009b10 <_vfiprintf_r>
 8007d1a:	b003      	add	sp, #12
 8007d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d20:	b004      	add	sp, #16
 8007d22:	4770      	bx	lr
 8007d24:	2000001c 	.word	0x2000001c

08007d28 <putchar>:
 8007d28:	4b02      	ldr	r3, [pc, #8]	@ (8007d34 <putchar+0xc>)
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	6882      	ldr	r2, [r0, #8]
 8007d30:	f002 b926 	b.w	8009f80 <_putc_r>
 8007d34:	2000001c 	.word	0x2000001c

08007d38 <_puts_r>:
 8007d38:	6a03      	ldr	r3, [r0, #32]
 8007d3a:	b570      	push	{r4, r5, r6, lr}
 8007d3c:	6884      	ldr	r4, [r0, #8]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	460e      	mov	r6, r1
 8007d42:	b90b      	cbnz	r3, 8007d48 <_puts_r+0x10>
 8007d44:	f7ff ffa8 	bl	8007c98 <__sinit>
 8007d48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d4a:	07db      	lsls	r3, r3, #31
 8007d4c:	d405      	bmi.n	8007d5a <_puts_r+0x22>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	0598      	lsls	r0, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_puts_r+0x22>
 8007d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d56:	f000 fa54 	bl	8008202 <__retarget_lock_acquire_recursive>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	0719      	lsls	r1, r3, #28
 8007d5e:	d502      	bpl.n	8007d66 <_puts_r+0x2e>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d135      	bne.n	8007dd2 <_puts_r+0x9a>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 f8e5 	bl	8007f38 <__swsetup_r>
 8007d6e:	b380      	cbz	r0, 8007dd2 <_puts_r+0x9a>
 8007d70:	f04f 35ff 	mov.w	r5, #4294967295
 8007d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d76:	07da      	lsls	r2, r3, #31
 8007d78:	d405      	bmi.n	8007d86 <_puts_r+0x4e>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	059b      	lsls	r3, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_puts_r+0x4e>
 8007d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d82:	f000 fa3f 	bl	8008204 <__retarget_lock_release_recursive>
 8007d86:	4628      	mov	r0, r5
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da04      	bge.n	8007d98 <_puts_r+0x60>
 8007d8e:	69a2      	ldr	r2, [r4, #24]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	dc17      	bgt.n	8007dc4 <_puts_r+0x8c>
 8007d94:	290a      	cmp	r1, #10
 8007d96:	d015      	beq.n	8007dc4 <_puts_r+0x8c>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	7019      	strb	r1, [r3, #0]
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d1ed      	bne.n	8007d8a <_puts_r+0x52>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da11      	bge.n	8007dd6 <_puts_r+0x9e>
 8007db2:	4622      	mov	r2, r4
 8007db4:	210a      	movs	r1, #10
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f87f 	bl	8007eba <__swbuf_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d0d7      	beq.n	8007d70 <_puts_r+0x38>
 8007dc0:	250a      	movs	r5, #10
 8007dc2:	e7d7      	b.n	8007d74 <_puts_r+0x3c>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f877 	bl	8007eba <__swbuf_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d1e7      	bne.n	8007da0 <_puts_r+0x68>
 8007dd0:	e7ce      	b.n	8007d70 <_puts_r+0x38>
 8007dd2:	3e01      	subs	r6, #1
 8007dd4:	e7e4      	b.n	8007da0 <_puts_r+0x68>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	220a      	movs	r2, #10
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	e7ee      	b.n	8007dc0 <_puts_r+0x88>
	...

08007de4 <puts>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	@ (8007df0 <puts+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f7ff bfa5 	b.w	8007d38 <_puts_r>
 8007dee:	bf00      	nop
 8007df0:	2000001c 	.word	0x2000001c

08007df4 <siprintf>:
 8007df4:	b40e      	push	{r1, r2, r3}
 8007df6:	b500      	push	{lr}
 8007df8:	b09c      	sub	sp, #112	@ 0x70
 8007dfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8007dfc:	9002      	str	r0, [sp, #8]
 8007dfe:	9006      	str	r0, [sp, #24]
 8007e00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e04:	4809      	ldr	r0, [pc, #36]	@ (8007e2c <siprintf+0x38>)
 8007e06:	9107      	str	r1, [sp, #28]
 8007e08:	9104      	str	r1, [sp, #16]
 8007e0a:	4909      	ldr	r1, [pc, #36]	@ (8007e30 <siprintf+0x3c>)
 8007e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e10:	9105      	str	r1, [sp, #20]
 8007e12:	6800      	ldr	r0, [r0, #0]
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	a902      	add	r1, sp, #8
 8007e18:	f001 fd54 	bl	80098c4 <_svfiprintf_r>
 8007e1c:	9b02      	ldr	r3, [sp, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	b01c      	add	sp, #112	@ 0x70
 8007e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e28:	b003      	add	sp, #12
 8007e2a:	4770      	bx	lr
 8007e2c:	2000001c 	.word	0x2000001c
 8007e30:	ffff0208 	.word	0xffff0208

08007e34 <__sread>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	460c      	mov	r4, r1
 8007e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3c:	f000 f992 	bl	8008164 <_read_r>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	bfab      	itete	ge
 8007e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e46:	89a3      	ldrhlt	r3, [r4, #12]
 8007e48:	181b      	addge	r3, r3, r0
 8007e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e4e:	bfac      	ite	ge
 8007e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e52:	81a3      	strhlt	r3, [r4, #12]
 8007e54:	bd10      	pop	{r4, pc}

08007e56 <__swrite>:
 8007e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	898b      	ldrh	r3, [r1, #12]
 8007e5e:	05db      	lsls	r3, r3, #23
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4616      	mov	r6, r2
 8007e66:	d505      	bpl.n	8007e74 <__swrite+0x1e>
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f000 f966 	bl	8008140 <_lseek_r>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	4628      	mov	r0, r5
 8007e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8a:	f000 b97d 	b.w	8008188 <_write_r>

08007e8e <__sseek>:
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 f953 	bl	8008140 <_lseek_r>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	bf15      	itete	ne
 8007ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007eaa:	81a3      	strheq	r3, [r4, #12]
 8007eac:	bf18      	it	ne
 8007eae:	81a3      	strhne	r3, [r4, #12]
 8007eb0:	bd10      	pop	{r4, pc}

08007eb2 <__sclose>:
 8007eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb6:	f000 b933 	b.w	8008120 <_close_r>

08007eba <__swbuf_r>:
 8007eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebc:	460e      	mov	r6, r1
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b118      	cbz	r0, 8007ecc <__swbuf_r+0x12>
 8007ec4:	6a03      	ldr	r3, [r0, #32]
 8007ec6:	b90b      	cbnz	r3, 8007ecc <__swbuf_r+0x12>
 8007ec8:	f7ff fee6 	bl	8007c98 <__sinit>
 8007ecc:	69a3      	ldr	r3, [r4, #24]
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	071a      	lsls	r2, r3, #28
 8007ed4:	d501      	bpl.n	8007eda <__swbuf_r+0x20>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	b943      	cbnz	r3, 8007eec <__swbuf_r+0x32>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 f82b 	bl	8007f38 <__swsetup_r>
 8007ee2:	b118      	cbz	r0, 8007eec <__swbuf_r+0x32>
 8007ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ee8:	4638      	mov	r0, r7
 8007eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	6922      	ldr	r2, [r4, #16]
 8007ef0:	1a98      	subs	r0, r3, r2
 8007ef2:	6963      	ldr	r3, [r4, #20]
 8007ef4:	b2f6      	uxtb	r6, r6
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	4637      	mov	r7, r6
 8007efa:	dc05      	bgt.n	8007f08 <__swbuf_r+0x4e>
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f001 ffa2 	bl	8009e48 <_fflush_r>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d1ed      	bne.n	8007ee4 <__swbuf_r+0x2a>
 8007f08:	68a3      	ldr	r3, [r4, #8]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	60a3      	str	r3, [r4, #8]
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	701e      	strb	r6, [r3, #0]
 8007f16:	6962      	ldr	r2, [r4, #20]
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d004      	beq.n	8007f28 <__swbuf_r+0x6e>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	07db      	lsls	r3, r3, #31
 8007f22:	d5e1      	bpl.n	8007ee8 <__swbuf_r+0x2e>
 8007f24:	2e0a      	cmp	r6, #10
 8007f26:	d1df      	bne.n	8007ee8 <__swbuf_r+0x2e>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f001 ff8c 	bl	8009e48 <_fflush_r>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d0d9      	beq.n	8007ee8 <__swbuf_r+0x2e>
 8007f34:	e7d6      	b.n	8007ee4 <__swbuf_r+0x2a>
	...

08007f38 <__swsetup_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4b29      	ldr	r3, [pc, #164]	@ (8007fe0 <__swsetup_r+0xa8>)
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	460c      	mov	r4, r1
 8007f42:	b118      	cbz	r0, 8007f4c <__swsetup_r+0x14>
 8007f44:	6a03      	ldr	r3, [r0, #32]
 8007f46:	b90b      	cbnz	r3, 8007f4c <__swsetup_r+0x14>
 8007f48:	f7ff fea6 	bl	8007c98 <__sinit>
 8007f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f50:	0719      	lsls	r1, r3, #28
 8007f52:	d422      	bmi.n	8007f9a <__swsetup_r+0x62>
 8007f54:	06da      	lsls	r2, r3, #27
 8007f56:	d407      	bmi.n	8007f68 <__swsetup_r+0x30>
 8007f58:	2209      	movs	r2, #9
 8007f5a:	602a      	str	r2, [r5, #0]
 8007f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	f04f 30ff 	mov.w	r0, #4294967295
 8007f66:	e033      	b.n	8007fd0 <__swsetup_r+0x98>
 8007f68:	0758      	lsls	r0, r3, #29
 8007f6a:	d512      	bpl.n	8007f92 <__swsetup_r+0x5a>
 8007f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f6e:	b141      	cbz	r1, 8007f82 <__swsetup_r+0x4a>
 8007f70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f74:	4299      	cmp	r1, r3
 8007f76:	d002      	beq.n	8007f7e <__swsetup_r+0x46>
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 ffc5 	bl	8008f08 <_free_r>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	f043 0308 	orr.w	r3, r3, #8
 8007f98:	81a3      	strh	r3, [r4, #12]
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	b94b      	cbnz	r3, 8007fb2 <__swsetup_r+0x7a>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa8:	d003      	beq.n	8007fb2 <__swsetup_r+0x7a>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4628      	mov	r0, r5
 8007fae:	f001 ffab 	bl	8009f08 <__smakebuf_r>
 8007fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb6:	f013 0201 	ands.w	r2, r3, #1
 8007fba:	d00a      	beq.n	8007fd2 <__swsetup_r+0x9a>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	60a2      	str	r2, [r4, #8]
 8007fc0:	6962      	ldr	r2, [r4, #20]
 8007fc2:	4252      	negs	r2, r2
 8007fc4:	61a2      	str	r2, [r4, #24]
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	b942      	cbnz	r2, 8007fdc <__swsetup_r+0xa4>
 8007fca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fce:	d1c5      	bne.n	8007f5c <__swsetup_r+0x24>
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	0799      	lsls	r1, r3, #30
 8007fd4:	bf58      	it	pl
 8007fd6:	6962      	ldrpl	r2, [r4, #20]
 8007fd8:	60a2      	str	r2, [r4, #8]
 8007fda:	e7f4      	b.n	8007fc6 <__swsetup_r+0x8e>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	e7f7      	b.n	8007fd0 <__swsetup_r+0x98>
 8007fe0:	2000001c 	.word	0x2000001c

08007fe4 <memset>:
 8007fe4:	4402      	add	r2, r0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d100      	bne.n	8007fee <memset+0xa>
 8007fec:	4770      	bx	lr
 8007fee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff2:	e7f9      	b.n	8007fe8 <memset+0x4>

08007ff4 <strchr>:
 8007ff4:	b2c9      	uxtb	r1, r1
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ffe:	b112      	cbz	r2, 8008006 <strchr+0x12>
 8008000:	428a      	cmp	r2, r1
 8008002:	d1f9      	bne.n	8007ff8 <strchr+0x4>
 8008004:	4770      	bx	lr
 8008006:	2900      	cmp	r1, #0
 8008008:	bf18      	it	ne
 800800a:	2000      	movne	r0, #0
 800800c:	4770      	bx	lr

0800800e <strncmp>:
 800800e:	b510      	push	{r4, lr}
 8008010:	b16a      	cbz	r2, 800802e <strncmp+0x20>
 8008012:	3901      	subs	r1, #1
 8008014:	1884      	adds	r4, r0, r2
 8008016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800801a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800801e:	429a      	cmp	r2, r3
 8008020:	d103      	bne.n	800802a <strncmp+0x1c>
 8008022:	42a0      	cmp	r0, r4
 8008024:	d001      	beq.n	800802a <strncmp+0x1c>
 8008026:	2a00      	cmp	r2, #0
 8008028:	d1f5      	bne.n	8008016 <strncmp+0x8>
 800802a:	1ad0      	subs	r0, r2, r3
 800802c:	bd10      	pop	{r4, pc}
 800802e:	4610      	mov	r0, r2
 8008030:	e7fc      	b.n	800802c <strncmp+0x1e>
	...

08008034 <strtok>:
 8008034:	4b16      	ldr	r3, [pc, #88]	@ (8008090 <strtok+0x5c>)
 8008036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803a:	681f      	ldr	r7, [r3, #0]
 800803c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800803e:	4605      	mov	r5, r0
 8008040:	460e      	mov	r6, r1
 8008042:	b9ec      	cbnz	r4, 8008080 <strtok+0x4c>
 8008044:	2050      	movs	r0, #80	@ 0x50
 8008046:	f000 ffa9 	bl	8008f9c <malloc>
 800804a:	4602      	mov	r2, r0
 800804c:	6478      	str	r0, [r7, #68]	@ 0x44
 800804e:	b920      	cbnz	r0, 800805a <strtok+0x26>
 8008050:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <strtok+0x60>)
 8008052:	4811      	ldr	r0, [pc, #68]	@ (8008098 <strtok+0x64>)
 8008054:	215b      	movs	r1, #91	@ 0x5b
 8008056:	f000 f8ed 	bl	8008234 <__assert_func>
 800805a:	e9c0 4400 	strd	r4, r4, [r0]
 800805e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008062:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008066:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800806a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800806e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008072:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008076:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800807a:	6184      	str	r4, [r0, #24]
 800807c:	7704      	strb	r4, [r0, #28]
 800807e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	2301      	movs	r3, #1
 8008088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808c:	f000 b806 	b.w	800809c <__strtok_r>
 8008090:	2000001c 	.word	0x2000001c
 8008094:	0800ab8d 	.word	0x0800ab8d
 8008098:	0800aba4 	.word	0x0800aba4

0800809c <__strtok_r>:
 800809c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809e:	4604      	mov	r4, r0
 80080a0:	b908      	cbnz	r0, 80080a6 <__strtok_r+0xa>
 80080a2:	6814      	ldr	r4, [r2, #0]
 80080a4:	b144      	cbz	r4, 80080b8 <__strtok_r+0x1c>
 80080a6:	4620      	mov	r0, r4
 80080a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80080ac:	460f      	mov	r7, r1
 80080ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80080b2:	b91e      	cbnz	r6, 80080bc <__strtok_r+0x20>
 80080b4:	b965      	cbnz	r5, 80080d0 <__strtok_r+0x34>
 80080b6:	6015      	str	r5, [r2, #0]
 80080b8:	2000      	movs	r0, #0
 80080ba:	e005      	b.n	80080c8 <__strtok_r+0x2c>
 80080bc:	42b5      	cmp	r5, r6
 80080be:	d1f6      	bne.n	80080ae <__strtok_r+0x12>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <__strtok_r+0xa>
 80080c4:	6014      	str	r4, [r2, #0]
 80080c6:	7003      	strb	r3, [r0, #0]
 80080c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ca:	461c      	mov	r4, r3
 80080cc:	e00c      	b.n	80080e8 <__strtok_r+0x4c>
 80080ce:	b915      	cbnz	r5, 80080d6 <__strtok_r+0x3a>
 80080d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080d4:	460e      	mov	r6, r1
 80080d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80080da:	42ab      	cmp	r3, r5
 80080dc:	d1f7      	bne.n	80080ce <__strtok_r+0x32>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f3      	beq.n	80080ca <__strtok_r+0x2e>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80080e8:	6014      	str	r4, [r2, #0]
 80080ea:	e7ed      	b.n	80080c8 <__strtok_r+0x2c>

080080ec <strstr>:
 80080ec:	780a      	ldrb	r2, [r1, #0]
 80080ee:	b570      	push	{r4, r5, r6, lr}
 80080f0:	b96a      	cbnz	r2, 800810e <strstr+0x22>
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d109      	bne.n	800810c <strstr+0x20>
 80080f8:	460c      	mov	r4, r1
 80080fa:	4605      	mov	r5, r0
 80080fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0f6      	beq.n	80080f2 <strstr+0x6>
 8008104:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008108:	429e      	cmp	r6, r3
 800810a:	d0f7      	beq.n	80080fc <strstr+0x10>
 800810c:	3001      	adds	r0, #1
 800810e:	7803      	ldrb	r3, [r0, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1ef      	bne.n	80080f4 <strstr+0x8>
 8008114:	4618      	mov	r0, r3
 8008116:	e7ec      	b.n	80080f2 <strstr+0x6>

08008118 <_localeconv_r>:
 8008118:	4800      	ldr	r0, [pc, #0]	@ (800811c <_localeconv_r+0x4>)
 800811a:	4770      	bx	lr
 800811c:	2000015c 	.word	0x2000015c

08008120 <_close_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d06      	ldr	r5, [pc, #24]	@ (800813c <_close_r+0x1c>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	f7fa fea0 	bl	8002e70 <_close>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_close_r+0x1a>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_close_r+0x1a>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	20000ed8 	.word	0x20000ed8

08008140 <_lseek_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	@ (8008160 <_lseek_r+0x20>)
 8008144:	4604      	mov	r4, r0
 8008146:	4608      	mov	r0, r1
 8008148:	4611      	mov	r1, r2
 800814a:	2200      	movs	r2, #0
 800814c:	602a      	str	r2, [r5, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	f7fa feb5 	bl	8002ebe <_lseek>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_lseek_r+0x1e>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_lseek_r+0x1e>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	20000ed8 	.word	0x20000ed8

08008164 <_read_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d07      	ldr	r5, [pc, #28]	@ (8008184 <_read_r+0x20>)
 8008168:	4604      	mov	r4, r0
 800816a:	4608      	mov	r0, r1
 800816c:	4611      	mov	r1, r2
 800816e:	2200      	movs	r2, #0
 8008170:	602a      	str	r2, [r5, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	f7fa fe43 	bl	8002dfe <_read>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_read_r+0x1e>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_read_r+0x1e>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20000ed8 	.word	0x20000ed8

08008188 <_write_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	@ (80081a8 <_write_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7fa fe4e 	bl	8002e38 <_write>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_write_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_write_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20000ed8 	.word	0x20000ed8

080081ac <__errno>:
 80081ac:	4b01      	ldr	r3, [pc, #4]	@ (80081b4 <__errno+0x8>)
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000001c 	.word	0x2000001c

080081b8 <__libc_init_array>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	4d0d      	ldr	r5, [pc, #52]	@ (80081f0 <__libc_init_array+0x38>)
 80081bc:	4c0d      	ldr	r4, [pc, #52]	@ (80081f4 <__libc_init_array+0x3c>)
 80081be:	1b64      	subs	r4, r4, r5
 80081c0:	10a4      	asrs	r4, r4, #2
 80081c2:	2600      	movs	r6, #0
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	d109      	bne.n	80081dc <__libc_init_array+0x24>
 80081c8:	4d0b      	ldr	r5, [pc, #44]	@ (80081f8 <__libc_init_array+0x40>)
 80081ca:	4c0c      	ldr	r4, [pc, #48]	@ (80081fc <__libc_init_array+0x44>)
 80081cc:	f002 fa78 	bl	800a6c0 <_init>
 80081d0:	1b64      	subs	r4, r4, r5
 80081d2:	10a4      	asrs	r4, r4, #2
 80081d4:	2600      	movs	r6, #0
 80081d6:	42a6      	cmp	r6, r4
 80081d8:	d105      	bne.n	80081e6 <__libc_init_array+0x2e>
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e0:	4798      	blx	r3
 80081e2:	3601      	adds	r6, #1
 80081e4:	e7ee      	b.n	80081c4 <__libc_init_array+0xc>
 80081e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ea:	4798      	blx	r3
 80081ec:	3601      	adds	r6, #1
 80081ee:	e7f2      	b.n	80081d6 <__libc_init_array+0x1e>
 80081f0:	0800aea0 	.word	0x0800aea0
 80081f4:	0800aea0 	.word	0x0800aea0
 80081f8:	0800aea0 	.word	0x0800aea0
 80081fc:	0800aea4 	.word	0x0800aea4

08008200 <__retarget_lock_init_recursive>:
 8008200:	4770      	bx	lr

08008202 <__retarget_lock_acquire_recursive>:
 8008202:	4770      	bx	lr

08008204 <__retarget_lock_release_recursive>:
 8008204:	4770      	bx	lr

08008206 <strcpy>:
 8008206:	4603      	mov	r3, r0
 8008208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800820c:	f803 2b01 	strb.w	r2, [r3], #1
 8008210:	2a00      	cmp	r2, #0
 8008212:	d1f9      	bne.n	8008208 <strcpy+0x2>
 8008214:	4770      	bx	lr

08008216 <memcpy>:
 8008216:	440a      	add	r2, r1
 8008218:	4291      	cmp	r1, r2
 800821a:	f100 33ff 	add.w	r3, r0, #4294967295
 800821e:	d100      	bne.n	8008222 <memcpy+0xc>
 8008220:	4770      	bx	lr
 8008222:	b510      	push	{r4, lr}
 8008224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800822c:	4291      	cmp	r1, r2
 800822e:	d1f9      	bne.n	8008224 <memcpy+0xe>
 8008230:	bd10      	pop	{r4, pc}
	...

08008234 <__assert_func>:
 8008234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008236:	4614      	mov	r4, r2
 8008238:	461a      	mov	r2, r3
 800823a:	4b09      	ldr	r3, [pc, #36]	@ (8008260 <__assert_func+0x2c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4605      	mov	r5, r0
 8008240:	68d8      	ldr	r0, [r3, #12]
 8008242:	b954      	cbnz	r4, 800825a <__assert_func+0x26>
 8008244:	4b07      	ldr	r3, [pc, #28]	@ (8008264 <__assert_func+0x30>)
 8008246:	461c      	mov	r4, r3
 8008248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800824c:	9100      	str	r1, [sp, #0]
 800824e:	462b      	mov	r3, r5
 8008250:	4905      	ldr	r1, [pc, #20]	@ (8008268 <__assert_func+0x34>)
 8008252:	f001 fe21 	bl	8009e98 <fiprintf>
 8008256:	f001 ff13 	bl	800a080 <abort>
 800825a:	4b04      	ldr	r3, [pc, #16]	@ (800826c <__assert_func+0x38>)
 800825c:	e7f4      	b.n	8008248 <__assert_func+0x14>
 800825e:	bf00      	nop
 8008260:	2000001c 	.word	0x2000001c
 8008264:	0800ac39 	.word	0x0800ac39
 8008268:	0800ac0b 	.word	0x0800ac0b
 800826c:	0800abfe 	.word	0x0800abfe

08008270 <quorem>:
 8008270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	6903      	ldr	r3, [r0, #16]
 8008276:	690c      	ldr	r4, [r1, #16]
 8008278:	42a3      	cmp	r3, r4
 800827a:	4607      	mov	r7, r0
 800827c:	db7e      	blt.n	800837c <quorem+0x10c>
 800827e:	3c01      	subs	r4, #1
 8008280:	f101 0814 	add.w	r8, r1, #20
 8008284:	00a3      	lsls	r3, r4, #2
 8008286:	f100 0514 	add.w	r5, r0, #20
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800829a:	3301      	adds	r3, #1
 800829c:	429a      	cmp	r2, r3
 800829e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a6:	d32e      	bcc.n	8008306 <quorem+0x96>
 80082a8:	f04f 0a00 	mov.w	sl, #0
 80082ac:	46c4      	mov	ip, r8
 80082ae:	46ae      	mov	lr, r5
 80082b0:	46d3      	mov	fp, sl
 80082b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082b6:	b298      	uxth	r0, r3
 80082b8:	fb06 a000 	mla	r0, r6, r0, sl
 80082bc:	0c02      	lsrs	r2, r0, #16
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	fb06 2303 	mla	r3, r6, r3, r2
 80082c4:	f8de 2000 	ldr.w	r2, [lr]
 80082c8:	b280      	uxth	r0, r0
 80082ca:	b292      	uxth	r2, r2
 80082cc:	1a12      	subs	r2, r2, r0
 80082ce:	445a      	add	r2, fp
 80082d0:	f8de 0000 	ldr.w	r0, [lr]
 80082d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082e2:	b292      	uxth	r2, r2
 80082e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082e8:	45e1      	cmp	r9, ip
 80082ea:	f84e 2b04 	str.w	r2, [lr], #4
 80082ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082f2:	d2de      	bcs.n	80082b2 <quorem+0x42>
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	58eb      	ldr	r3, [r5, r3]
 80082f8:	b92b      	cbnz	r3, 8008306 <quorem+0x96>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	3b04      	subs	r3, #4
 80082fe:	429d      	cmp	r5, r3
 8008300:	461a      	mov	r2, r3
 8008302:	d32f      	bcc.n	8008364 <quorem+0xf4>
 8008304:	613c      	str	r4, [r7, #16]
 8008306:	4638      	mov	r0, r7
 8008308:	f001 f978 	bl	80095fc <__mcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	db25      	blt.n	800835c <quorem+0xec>
 8008310:	4629      	mov	r1, r5
 8008312:	2000      	movs	r0, #0
 8008314:	f858 2b04 	ldr.w	r2, [r8], #4
 8008318:	f8d1 c000 	ldr.w	ip, [r1]
 800831c:	fa1f fe82 	uxth.w	lr, r2
 8008320:	fa1f f38c 	uxth.w	r3, ip
 8008324:	eba3 030e 	sub.w	r3, r3, lr
 8008328:	4403      	add	r3, r0
 800832a:	0c12      	lsrs	r2, r2, #16
 800832c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008330:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008334:	b29b      	uxth	r3, r3
 8008336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833a:	45c1      	cmp	r9, r8
 800833c:	f841 3b04 	str.w	r3, [r1], #4
 8008340:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008344:	d2e6      	bcs.n	8008314 <quorem+0xa4>
 8008346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834e:	b922      	cbnz	r2, 800835a <quorem+0xea>
 8008350:	3b04      	subs	r3, #4
 8008352:	429d      	cmp	r5, r3
 8008354:	461a      	mov	r2, r3
 8008356:	d30b      	bcc.n	8008370 <quorem+0x100>
 8008358:	613c      	str	r4, [r7, #16]
 800835a:	3601      	adds	r6, #1
 800835c:	4630      	mov	r0, r6
 800835e:	b003      	add	sp, #12
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	3b04      	subs	r3, #4
 8008368:	2a00      	cmp	r2, #0
 800836a:	d1cb      	bne.n	8008304 <quorem+0x94>
 800836c:	3c01      	subs	r4, #1
 800836e:	e7c6      	b.n	80082fe <quorem+0x8e>
 8008370:	6812      	ldr	r2, [r2, #0]
 8008372:	3b04      	subs	r3, #4
 8008374:	2a00      	cmp	r2, #0
 8008376:	d1ef      	bne.n	8008358 <quorem+0xe8>
 8008378:	3c01      	subs	r4, #1
 800837a:	e7ea      	b.n	8008352 <quorem+0xe2>
 800837c:	2000      	movs	r0, #0
 800837e:	e7ee      	b.n	800835e <quorem+0xee>

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	69c7      	ldr	r7, [r0, #28]
 8008386:	b099      	sub	sp, #100	@ 0x64
 8008388:	ed8d 0b02 	vstr	d0, [sp, #8]
 800838c:	ec55 4b10 	vmov	r4, r5, d0
 8008390:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008392:	9109      	str	r1, [sp, #36]	@ 0x24
 8008394:	4683      	mov	fp, r0
 8008396:	920e      	str	r2, [sp, #56]	@ 0x38
 8008398:	9313      	str	r3, [sp, #76]	@ 0x4c
 800839a:	b97f      	cbnz	r7, 80083bc <_dtoa_r+0x3c>
 800839c:	2010      	movs	r0, #16
 800839e:	f000 fdfd 	bl	8008f9c <malloc>
 80083a2:	4602      	mov	r2, r0
 80083a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80083a8:	b920      	cbnz	r0, 80083b4 <_dtoa_r+0x34>
 80083aa:	4ba7      	ldr	r3, [pc, #668]	@ (8008648 <_dtoa_r+0x2c8>)
 80083ac:	21ef      	movs	r1, #239	@ 0xef
 80083ae:	48a7      	ldr	r0, [pc, #668]	@ (800864c <_dtoa_r+0x2cc>)
 80083b0:	f7ff ff40 	bl	8008234 <__assert_func>
 80083b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083b8:	6007      	str	r7, [r0, #0]
 80083ba:	60c7      	str	r7, [r0, #12]
 80083bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083c0:	6819      	ldr	r1, [r3, #0]
 80083c2:	b159      	cbz	r1, 80083dc <_dtoa_r+0x5c>
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	604a      	str	r2, [r1, #4]
 80083c8:	2301      	movs	r3, #1
 80083ca:	4093      	lsls	r3, r2
 80083cc:	608b      	str	r3, [r1, #8]
 80083ce:	4658      	mov	r0, fp
 80083d0:	f000 feda 	bl	8009188 <_Bfree>
 80083d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	1e2b      	subs	r3, r5, #0
 80083de:	bfb9      	ittee	lt
 80083e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083e4:	9303      	strlt	r3, [sp, #12]
 80083e6:	2300      	movge	r3, #0
 80083e8:	6033      	strge	r3, [r6, #0]
 80083ea:	9f03      	ldr	r7, [sp, #12]
 80083ec:	4b98      	ldr	r3, [pc, #608]	@ (8008650 <_dtoa_r+0x2d0>)
 80083ee:	bfbc      	itt	lt
 80083f0:	2201      	movlt	r2, #1
 80083f2:	6032      	strlt	r2, [r6, #0]
 80083f4:	43bb      	bics	r3, r7
 80083f6:	d112      	bne.n	800841e <_dtoa_r+0x9e>
 80083f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008404:	4323      	orrs	r3, r4
 8008406:	f000 854d 	beq.w	8008ea4 <_dtoa_r+0xb24>
 800840a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800840c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008664 <_dtoa_r+0x2e4>
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 854f 	beq.w	8008eb4 <_dtoa_r+0xb34>
 8008416:	f10a 0303 	add.w	r3, sl, #3
 800841a:	f000 bd49 	b.w	8008eb0 <_dtoa_r+0xb30>
 800841e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	ec51 0b17 	vmov	r0, r1, d7
 8008428:	2300      	movs	r3, #0
 800842a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800842e:	f7f8 fb63 	bl	8000af8 <__aeabi_dcmpeq>
 8008432:	4680      	mov	r8, r0
 8008434:	b158      	cbz	r0, 800844e <_dtoa_r+0xce>
 8008436:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008438:	2301      	movs	r3, #1
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800843e:	b113      	cbz	r3, 8008446 <_dtoa_r+0xc6>
 8008440:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008442:	4b84      	ldr	r3, [pc, #528]	@ (8008654 <_dtoa_r+0x2d4>)
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008668 <_dtoa_r+0x2e8>
 800844a:	f000 bd33 	b.w	8008eb4 <_dtoa_r+0xb34>
 800844e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008452:	aa16      	add	r2, sp, #88	@ 0x58
 8008454:	a917      	add	r1, sp, #92	@ 0x5c
 8008456:	4658      	mov	r0, fp
 8008458:	f001 f980 	bl	800975c <__d2b>
 800845c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008460:	4681      	mov	r9, r0
 8008462:	2e00      	cmp	r6, #0
 8008464:	d077      	beq.n	8008556 <_dtoa_r+0x1d6>
 8008466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008468:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800846c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008474:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008478:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800847c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008480:	4619      	mov	r1, r3
 8008482:	2200      	movs	r2, #0
 8008484:	4b74      	ldr	r3, [pc, #464]	@ (8008658 <_dtoa_r+0x2d8>)
 8008486:	f7f7 ff17 	bl	80002b8 <__aeabi_dsub>
 800848a:	a369      	add	r3, pc, #420	@ (adr r3, 8008630 <_dtoa_r+0x2b0>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f7f8 f8ca 	bl	8000628 <__aeabi_dmul>
 8008494:	a368      	add	r3, pc, #416	@ (adr r3, 8008638 <_dtoa_r+0x2b8>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 ff0f 	bl	80002bc <__adddf3>
 800849e:	4604      	mov	r4, r0
 80084a0:	4630      	mov	r0, r6
 80084a2:	460d      	mov	r5, r1
 80084a4:	f7f8 f856 	bl	8000554 <__aeabi_i2d>
 80084a8:	a365      	add	r3, pc, #404	@ (adr r3, 8008640 <_dtoa_r+0x2c0>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f8 f8bb 	bl	8000628 <__aeabi_dmul>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f7 feff 	bl	80002bc <__adddf3>
 80084be:	4604      	mov	r4, r0
 80084c0:	460d      	mov	r5, r1
 80084c2:	f7f8 fb61 	bl	8000b88 <__aeabi_d2iz>
 80084c6:	2200      	movs	r2, #0
 80084c8:	4607      	mov	r7, r0
 80084ca:	2300      	movs	r3, #0
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f8 fb1c 	bl	8000b0c <__aeabi_dcmplt>
 80084d4:	b140      	cbz	r0, 80084e8 <_dtoa_r+0x168>
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7f8 f83c 	bl	8000554 <__aeabi_i2d>
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	f7f8 fb0a 	bl	8000af8 <__aeabi_dcmpeq>
 80084e4:	b900      	cbnz	r0, 80084e8 <_dtoa_r+0x168>
 80084e6:	3f01      	subs	r7, #1
 80084e8:	2f16      	cmp	r7, #22
 80084ea:	d851      	bhi.n	8008590 <_dtoa_r+0x210>
 80084ec:	4b5b      	ldr	r3, [pc, #364]	@ (800865c <_dtoa_r+0x2dc>)
 80084ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084fa:	f7f8 fb07 	bl	8000b0c <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d048      	beq.n	8008594 <_dtoa_r+0x214>
 8008502:	3f01      	subs	r7, #1
 8008504:	2300      	movs	r3, #0
 8008506:	9312      	str	r3, [sp, #72]	@ 0x48
 8008508:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800850a:	1b9b      	subs	r3, r3, r6
 800850c:	1e5a      	subs	r2, r3, #1
 800850e:	bf44      	itt	mi
 8008510:	f1c3 0801 	rsbmi	r8, r3, #1
 8008514:	2300      	movmi	r3, #0
 8008516:	9208      	str	r2, [sp, #32]
 8008518:	bf54      	ite	pl
 800851a:	f04f 0800 	movpl.w	r8, #0
 800851e:	9308      	strmi	r3, [sp, #32]
 8008520:	2f00      	cmp	r7, #0
 8008522:	db39      	blt.n	8008598 <_dtoa_r+0x218>
 8008524:	9b08      	ldr	r3, [sp, #32]
 8008526:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008528:	443b      	add	r3, r7
 800852a:	9308      	str	r3, [sp, #32]
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008532:	2b09      	cmp	r3, #9
 8008534:	d864      	bhi.n	8008600 <_dtoa_r+0x280>
 8008536:	2b05      	cmp	r3, #5
 8008538:	bfc4      	itt	gt
 800853a:	3b04      	subgt	r3, #4
 800853c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800853e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008540:	f1a3 0302 	sub.w	r3, r3, #2
 8008544:	bfcc      	ite	gt
 8008546:	2400      	movgt	r4, #0
 8008548:	2401      	movle	r4, #1
 800854a:	2b03      	cmp	r3, #3
 800854c:	d863      	bhi.n	8008616 <_dtoa_r+0x296>
 800854e:	e8df f003 	tbb	[pc, r3]
 8008552:	372a      	.short	0x372a
 8008554:	5535      	.short	0x5535
 8008556:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800855a:	441e      	add	r6, r3
 800855c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008560:	2b20      	cmp	r3, #32
 8008562:	bfc1      	itttt	gt
 8008564:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008568:	409f      	lslgt	r7, r3
 800856a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800856e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008572:	bfd6      	itet	le
 8008574:	f1c3 0320 	rsble	r3, r3, #32
 8008578:	ea47 0003 	orrgt.w	r0, r7, r3
 800857c:	fa04 f003 	lslle.w	r0, r4, r3
 8008580:	f7f7 ffd8 	bl	8000534 <__aeabi_ui2d>
 8008584:	2201      	movs	r2, #1
 8008586:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800858a:	3e01      	subs	r6, #1
 800858c:	9214      	str	r2, [sp, #80]	@ 0x50
 800858e:	e777      	b.n	8008480 <_dtoa_r+0x100>
 8008590:	2301      	movs	r3, #1
 8008592:	e7b8      	b.n	8008506 <_dtoa_r+0x186>
 8008594:	9012      	str	r0, [sp, #72]	@ 0x48
 8008596:	e7b7      	b.n	8008508 <_dtoa_r+0x188>
 8008598:	427b      	negs	r3, r7
 800859a:	930a      	str	r3, [sp, #40]	@ 0x28
 800859c:	2300      	movs	r3, #0
 800859e:	eba8 0807 	sub.w	r8, r8, r7
 80085a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085a4:	e7c4      	b.n	8008530 <_dtoa_r+0x1b0>
 80085a6:	2300      	movs	r3, #0
 80085a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dc35      	bgt.n	800861c <_dtoa_r+0x29c>
 80085b0:	2301      	movs	r3, #1
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	9307      	str	r3, [sp, #28]
 80085b6:	461a      	mov	r2, r3
 80085b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80085ba:	e00b      	b.n	80085d4 <_dtoa_r+0x254>
 80085bc:	2301      	movs	r3, #1
 80085be:	e7f3      	b.n	80085a8 <_dtoa_r+0x228>
 80085c0:	2300      	movs	r3, #0
 80085c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085c6:	18fb      	adds	r3, r7, r3
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	bfb8      	it	lt
 80085d2:	2301      	movlt	r3, #1
 80085d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80085d8:	2100      	movs	r1, #0
 80085da:	2204      	movs	r2, #4
 80085dc:	f102 0514 	add.w	r5, r2, #20
 80085e0:	429d      	cmp	r5, r3
 80085e2:	d91f      	bls.n	8008624 <_dtoa_r+0x2a4>
 80085e4:	6041      	str	r1, [r0, #4]
 80085e6:	4658      	mov	r0, fp
 80085e8:	f000 fd8e 	bl	8009108 <_Balloc>
 80085ec:	4682      	mov	sl, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d13c      	bne.n	800866c <_dtoa_r+0x2ec>
 80085f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008660 <_dtoa_r+0x2e0>)
 80085f4:	4602      	mov	r2, r0
 80085f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80085fa:	e6d8      	b.n	80083ae <_dtoa_r+0x2e>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e7e0      	b.n	80085c2 <_dtoa_r+0x242>
 8008600:	2401      	movs	r4, #1
 8008602:	2300      	movs	r3, #0
 8008604:	9309      	str	r3, [sp, #36]	@ 0x24
 8008606:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008608:	f04f 33ff 	mov.w	r3, #4294967295
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	9307      	str	r3, [sp, #28]
 8008610:	2200      	movs	r2, #0
 8008612:	2312      	movs	r3, #18
 8008614:	e7d0      	b.n	80085b8 <_dtoa_r+0x238>
 8008616:	2301      	movs	r3, #1
 8008618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800861a:	e7f5      	b.n	8008608 <_dtoa_r+0x288>
 800861c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	9307      	str	r3, [sp, #28]
 8008622:	e7d7      	b.n	80085d4 <_dtoa_r+0x254>
 8008624:	3101      	adds	r1, #1
 8008626:	0052      	lsls	r2, r2, #1
 8008628:	e7d8      	b.n	80085dc <_dtoa_r+0x25c>
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w
 8008630:	636f4361 	.word	0x636f4361
 8008634:	3fd287a7 	.word	0x3fd287a7
 8008638:	8b60c8b3 	.word	0x8b60c8b3
 800863c:	3fc68a28 	.word	0x3fc68a28
 8008640:	509f79fb 	.word	0x509f79fb
 8008644:	3fd34413 	.word	0x3fd34413
 8008648:	0800ab8d 	.word	0x0800ab8d
 800864c:	0800ac47 	.word	0x0800ac47
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0800ab6a 	.word	0x0800ab6a
 8008658:	3ff80000 	.word	0x3ff80000
 800865c:	0800ad40 	.word	0x0800ad40
 8008660:	0800ac9f 	.word	0x0800ac9f
 8008664:	0800ac43 	.word	0x0800ac43
 8008668:	0800ab69 	.word	0x0800ab69
 800866c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008670:	6018      	str	r0, [r3, #0]
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	2b0e      	cmp	r3, #14
 8008676:	f200 80a4 	bhi.w	80087c2 <_dtoa_r+0x442>
 800867a:	2c00      	cmp	r4, #0
 800867c:	f000 80a1 	beq.w	80087c2 <_dtoa_r+0x442>
 8008680:	2f00      	cmp	r7, #0
 8008682:	dd33      	ble.n	80086ec <_dtoa_r+0x36c>
 8008684:	4bad      	ldr	r3, [pc, #692]	@ (800893c <_dtoa_r+0x5bc>)
 8008686:	f007 020f 	and.w	r2, r7, #15
 800868a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868e:	ed93 7b00 	vldr	d7, [r3]
 8008692:	05f8      	lsls	r0, r7, #23
 8008694:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008698:	ea4f 1427 	mov.w	r4, r7, asr #4
 800869c:	d516      	bpl.n	80086cc <_dtoa_r+0x34c>
 800869e:	4ba8      	ldr	r3, [pc, #672]	@ (8008940 <_dtoa_r+0x5c0>)
 80086a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086a8:	f7f8 f8e8 	bl	800087c <__aeabi_ddiv>
 80086ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b0:	f004 040f 	and.w	r4, r4, #15
 80086b4:	2603      	movs	r6, #3
 80086b6:	4da2      	ldr	r5, [pc, #648]	@ (8008940 <_dtoa_r+0x5c0>)
 80086b8:	b954      	cbnz	r4, 80086d0 <_dtoa_r+0x350>
 80086ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086c2:	f7f8 f8db 	bl	800087c <__aeabi_ddiv>
 80086c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ca:	e028      	b.n	800871e <_dtoa_r+0x39e>
 80086cc:	2602      	movs	r6, #2
 80086ce:	e7f2      	b.n	80086b6 <_dtoa_r+0x336>
 80086d0:	07e1      	lsls	r1, r4, #31
 80086d2:	d508      	bpl.n	80086e6 <_dtoa_r+0x366>
 80086d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086dc:	f7f7 ffa4 	bl	8000628 <__aeabi_dmul>
 80086e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086e4:	3601      	adds	r6, #1
 80086e6:	1064      	asrs	r4, r4, #1
 80086e8:	3508      	adds	r5, #8
 80086ea:	e7e5      	b.n	80086b8 <_dtoa_r+0x338>
 80086ec:	f000 80d2 	beq.w	8008894 <_dtoa_r+0x514>
 80086f0:	427c      	negs	r4, r7
 80086f2:	4b92      	ldr	r3, [pc, #584]	@ (800893c <_dtoa_r+0x5bc>)
 80086f4:	4d92      	ldr	r5, [pc, #584]	@ (8008940 <_dtoa_r+0x5c0>)
 80086f6:	f004 020f 	and.w	r2, r4, #15
 80086fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008706:	f7f7 ff8f 	bl	8000628 <__aeabi_dmul>
 800870a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800870e:	1124      	asrs	r4, r4, #4
 8008710:	2300      	movs	r3, #0
 8008712:	2602      	movs	r6, #2
 8008714:	2c00      	cmp	r4, #0
 8008716:	f040 80b2 	bne.w	800887e <_dtoa_r+0x4fe>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1d3      	bne.n	80086c6 <_dtoa_r+0x346>
 800871e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008720:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80b7 	beq.w	8008898 <_dtoa_r+0x518>
 800872a:	4b86      	ldr	r3, [pc, #536]	@ (8008944 <_dtoa_r+0x5c4>)
 800872c:	2200      	movs	r2, #0
 800872e:	4620      	mov	r0, r4
 8008730:	4629      	mov	r1, r5
 8008732:	f7f8 f9eb 	bl	8000b0c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f000 80ae 	beq.w	8008898 <_dtoa_r+0x518>
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80aa 	beq.w	8008898 <_dtoa_r+0x518>
 8008744:	9b00      	ldr	r3, [sp, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	dd37      	ble.n	80087ba <_dtoa_r+0x43a>
 800874a:	1e7b      	subs	r3, r7, #1
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	4620      	mov	r0, r4
 8008750:	4b7d      	ldr	r3, [pc, #500]	@ (8008948 <_dtoa_r+0x5c8>)
 8008752:	2200      	movs	r2, #0
 8008754:	4629      	mov	r1, r5
 8008756:	f7f7 ff67 	bl	8000628 <__aeabi_dmul>
 800875a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800875e:	9c00      	ldr	r4, [sp, #0]
 8008760:	3601      	adds	r6, #1
 8008762:	4630      	mov	r0, r6
 8008764:	f7f7 fef6 	bl	8000554 <__aeabi_i2d>
 8008768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800876c:	f7f7 ff5c 	bl	8000628 <__aeabi_dmul>
 8008770:	4b76      	ldr	r3, [pc, #472]	@ (800894c <_dtoa_r+0x5cc>)
 8008772:	2200      	movs	r2, #0
 8008774:	f7f7 fda2 	bl	80002bc <__adddf3>
 8008778:	4605      	mov	r5, r0
 800877a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800877e:	2c00      	cmp	r4, #0
 8008780:	f040 808d 	bne.w	800889e <_dtoa_r+0x51e>
 8008784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008788:	4b71      	ldr	r3, [pc, #452]	@ (8008950 <_dtoa_r+0x5d0>)
 800878a:	2200      	movs	r2, #0
 800878c:	f7f7 fd94 	bl	80002b8 <__aeabi_dsub>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008798:	462a      	mov	r2, r5
 800879a:	4633      	mov	r3, r6
 800879c:	f7f8 f9d4 	bl	8000b48 <__aeabi_dcmpgt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f040 828b 	bne.w	8008cbc <_dtoa_r+0x93c>
 80087a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087aa:	462a      	mov	r2, r5
 80087ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087b0:	f7f8 f9ac 	bl	8000b0c <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f040 8128 	bne.w	8008a0a <_dtoa_r+0x68a>
 80087ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80087be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f2c0 815a 	blt.w	8008a7e <_dtoa_r+0x6fe>
 80087ca:	2f0e      	cmp	r7, #14
 80087cc:	f300 8157 	bgt.w	8008a7e <_dtoa_r+0x6fe>
 80087d0:	4b5a      	ldr	r3, [pc, #360]	@ (800893c <_dtoa_r+0x5bc>)
 80087d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087d6:	ed93 7b00 	vldr	d7, [r3]
 80087da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	ed8d 7b00 	vstr	d7, [sp]
 80087e2:	da03      	bge.n	80087ec <_dtoa_r+0x46c>
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f340 8101 	ble.w	80089ee <_dtoa_r+0x66e>
 80087ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087f0:	4656      	mov	r6, sl
 80087f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f8 f83f 	bl	800087c <__aeabi_ddiv>
 80087fe:	f7f8 f9c3 	bl	8000b88 <__aeabi_d2iz>
 8008802:	4680      	mov	r8, r0
 8008804:	f7f7 fea6 	bl	8000554 <__aeabi_i2d>
 8008808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800880c:	f7f7 ff0c 	bl	8000628 <__aeabi_dmul>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800881c:	f7f7 fd4c 	bl	80002b8 <__aeabi_dsub>
 8008820:	f806 4b01 	strb.w	r4, [r6], #1
 8008824:	9d07      	ldr	r5, [sp, #28]
 8008826:	eba6 040a 	sub.w	r4, r6, sl
 800882a:	42a5      	cmp	r5, r4
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	f040 8117 	bne.w	8008a62 <_dtoa_r+0x6e2>
 8008834:	f7f7 fd42 	bl	80002bc <__adddf3>
 8008838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	f7f8 f982 	bl	8000b48 <__aeabi_dcmpgt>
 8008844:	2800      	cmp	r0, #0
 8008846:	f040 80f9 	bne.w	8008a3c <_dtoa_r+0x6bc>
 800884a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f951 	bl	8000af8 <__aeabi_dcmpeq>
 8008856:	b118      	cbz	r0, 8008860 <_dtoa_r+0x4e0>
 8008858:	f018 0f01 	tst.w	r8, #1
 800885c:	f040 80ee 	bne.w	8008a3c <_dtoa_r+0x6bc>
 8008860:	4649      	mov	r1, r9
 8008862:	4658      	mov	r0, fp
 8008864:	f000 fc90 	bl	8009188 <_Bfree>
 8008868:	2300      	movs	r3, #0
 800886a:	7033      	strb	r3, [r6, #0]
 800886c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800886e:	3701      	adds	r7, #1
 8008870:	601f      	str	r7, [r3, #0]
 8008872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 831d 	beq.w	8008eb4 <_dtoa_r+0xb34>
 800887a:	601e      	str	r6, [r3, #0]
 800887c:	e31a      	b.n	8008eb4 <_dtoa_r+0xb34>
 800887e:	07e2      	lsls	r2, r4, #31
 8008880:	d505      	bpl.n	800888e <_dtoa_r+0x50e>
 8008882:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008886:	f7f7 fecf 	bl	8000628 <__aeabi_dmul>
 800888a:	3601      	adds	r6, #1
 800888c:	2301      	movs	r3, #1
 800888e:	1064      	asrs	r4, r4, #1
 8008890:	3508      	adds	r5, #8
 8008892:	e73f      	b.n	8008714 <_dtoa_r+0x394>
 8008894:	2602      	movs	r6, #2
 8008896:	e742      	b.n	800871e <_dtoa_r+0x39e>
 8008898:	9c07      	ldr	r4, [sp, #28]
 800889a:	9704      	str	r7, [sp, #16]
 800889c:	e761      	b.n	8008762 <_dtoa_r+0x3e2>
 800889e:	4b27      	ldr	r3, [pc, #156]	@ (800893c <_dtoa_r+0x5bc>)
 80088a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088aa:	4454      	add	r4, sl
 80088ac:	2900      	cmp	r1, #0
 80088ae:	d053      	beq.n	8008958 <_dtoa_r+0x5d8>
 80088b0:	4928      	ldr	r1, [pc, #160]	@ (8008954 <_dtoa_r+0x5d4>)
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7f7 ffe2 	bl	800087c <__aeabi_ddiv>
 80088b8:	4633      	mov	r3, r6
 80088ba:	462a      	mov	r2, r5
 80088bc:	f7f7 fcfc 	bl	80002b8 <__aeabi_dsub>
 80088c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088c4:	4656      	mov	r6, sl
 80088c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ca:	f7f8 f95d 	bl	8000b88 <__aeabi_d2iz>
 80088ce:	4605      	mov	r5, r0
 80088d0:	f7f7 fe40 	bl	8000554 <__aeabi_i2d>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088dc:	f7f7 fcec 	bl	80002b8 <__aeabi_dsub>
 80088e0:	3530      	adds	r5, #48	@ 0x30
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088ea:	f806 5b01 	strb.w	r5, [r6], #1
 80088ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088f2:	f7f8 f90b 	bl	8000b0c <__aeabi_dcmplt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d171      	bne.n	80089de <_dtoa_r+0x65e>
 80088fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088fe:	4911      	ldr	r1, [pc, #68]	@ (8008944 <_dtoa_r+0x5c4>)
 8008900:	2000      	movs	r0, #0
 8008902:	f7f7 fcd9 	bl	80002b8 <__aeabi_dsub>
 8008906:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800890a:	f7f8 f8ff 	bl	8000b0c <__aeabi_dcmplt>
 800890e:	2800      	cmp	r0, #0
 8008910:	f040 8095 	bne.w	8008a3e <_dtoa_r+0x6be>
 8008914:	42a6      	cmp	r6, r4
 8008916:	f43f af50 	beq.w	80087ba <_dtoa_r+0x43a>
 800891a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800891e:	4b0a      	ldr	r3, [pc, #40]	@ (8008948 <_dtoa_r+0x5c8>)
 8008920:	2200      	movs	r2, #0
 8008922:	f7f7 fe81 	bl	8000628 <__aeabi_dmul>
 8008926:	4b08      	ldr	r3, [pc, #32]	@ (8008948 <_dtoa_r+0x5c8>)
 8008928:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800892c:	2200      	movs	r2, #0
 800892e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008932:	f7f7 fe79 	bl	8000628 <__aeabi_dmul>
 8008936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800893a:	e7c4      	b.n	80088c6 <_dtoa_r+0x546>
 800893c:	0800ad40 	.word	0x0800ad40
 8008940:	0800ad18 	.word	0x0800ad18
 8008944:	3ff00000 	.word	0x3ff00000
 8008948:	40240000 	.word	0x40240000
 800894c:	401c0000 	.word	0x401c0000
 8008950:	40140000 	.word	0x40140000
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	f7f7 fe64 	bl	8000628 <__aeabi_dmul>
 8008960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008964:	9415      	str	r4, [sp, #84]	@ 0x54
 8008966:	4656      	mov	r6, sl
 8008968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896c:	f7f8 f90c 	bl	8000b88 <__aeabi_d2iz>
 8008970:	4605      	mov	r5, r0
 8008972:	f7f7 fdef 	bl	8000554 <__aeabi_i2d>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800897e:	f7f7 fc9b 	bl	80002b8 <__aeabi_dsub>
 8008982:	3530      	adds	r5, #48	@ 0x30
 8008984:	f806 5b01 	strb.w	r5, [r6], #1
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	42a6      	cmp	r6, r4
 800898e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	d124      	bne.n	80089e2 <_dtoa_r+0x662>
 8008998:	4bac      	ldr	r3, [pc, #688]	@ (8008c4c <_dtoa_r+0x8cc>)
 800899a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800899e:	f7f7 fc8d 	bl	80002bc <__adddf3>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089aa:	f7f8 f8cd 	bl	8000b48 <__aeabi_dcmpgt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d145      	bne.n	8008a3e <_dtoa_r+0x6be>
 80089b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089b6:	49a5      	ldr	r1, [pc, #660]	@ (8008c4c <_dtoa_r+0x8cc>)
 80089b8:	2000      	movs	r0, #0
 80089ba:	f7f7 fc7d 	bl	80002b8 <__aeabi_dsub>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089c6:	f7f8 f8a1 	bl	8000b0c <__aeabi_dcmplt>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f43f aef5 	beq.w	80087ba <_dtoa_r+0x43a>
 80089d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80089d2:	1e73      	subs	r3, r6, #1
 80089d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80089d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089da:	2b30      	cmp	r3, #48	@ 0x30
 80089dc:	d0f8      	beq.n	80089d0 <_dtoa_r+0x650>
 80089de:	9f04      	ldr	r7, [sp, #16]
 80089e0:	e73e      	b.n	8008860 <_dtoa_r+0x4e0>
 80089e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008c50 <_dtoa_r+0x8d0>)
 80089e4:	f7f7 fe20 	bl	8000628 <__aeabi_dmul>
 80089e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ec:	e7bc      	b.n	8008968 <_dtoa_r+0x5e8>
 80089ee:	d10c      	bne.n	8008a0a <_dtoa_r+0x68a>
 80089f0:	4b98      	ldr	r3, [pc, #608]	@ (8008c54 <_dtoa_r+0x8d4>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089f8:	f7f7 fe16 	bl	8000628 <__aeabi_dmul>
 80089fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a00:	f7f8 f898 	bl	8000b34 <__aeabi_dcmpge>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f000 8157 	beq.w	8008cb8 <_dtoa_r+0x938>
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	4625      	mov	r5, r4
 8008a0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a10:	43db      	mvns	r3, r3
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	4656      	mov	r6, sl
 8008a16:	2700      	movs	r7, #0
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4658      	mov	r0, fp
 8008a1c:	f000 fbb4 	bl	8009188 <_Bfree>
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	d0dc      	beq.n	80089de <_dtoa_r+0x65e>
 8008a24:	b12f      	cbz	r7, 8008a32 <_dtoa_r+0x6b2>
 8008a26:	42af      	cmp	r7, r5
 8008a28:	d003      	beq.n	8008a32 <_dtoa_r+0x6b2>
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	4658      	mov	r0, fp
 8008a2e:	f000 fbab 	bl	8009188 <_Bfree>
 8008a32:	4629      	mov	r1, r5
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 fba7 	bl	8009188 <_Bfree>
 8008a3a:	e7d0      	b.n	80089de <_dtoa_r+0x65e>
 8008a3c:	9704      	str	r7, [sp, #16]
 8008a3e:	4633      	mov	r3, r6
 8008a40:	461e      	mov	r6, r3
 8008a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a46:	2a39      	cmp	r2, #57	@ 0x39
 8008a48:	d107      	bne.n	8008a5a <_dtoa_r+0x6da>
 8008a4a:	459a      	cmp	sl, r3
 8008a4c:	d1f8      	bne.n	8008a40 <_dtoa_r+0x6c0>
 8008a4e:	9a04      	ldr	r2, [sp, #16]
 8008a50:	3201      	adds	r2, #1
 8008a52:	9204      	str	r2, [sp, #16]
 8008a54:	2230      	movs	r2, #48	@ 0x30
 8008a56:	f88a 2000 	strb.w	r2, [sl]
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	701a      	strb	r2, [r3, #0]
 8008a60:	e7bd      	b.n	80089de <_dtoa_r+0x65e>
 8008a62:	4b7b      	ldr	r3, [pc, #492]	@ (8008c50 <_dtoa_r+0x8d0>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	f7f7 fddf 	bl	8000628 <__aeabi_dmul>
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	460d      	mov	r5, r1
 8008a72:	f7f8 f841 	bl	8000af8 <__aeabi_dcmpeq>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f aebb 	beq.w	80087f2 <_dtoa_r+0x472>
 8008a7c:	e6f0      	b.n	8008860 <_dtoa_r+0x4e0>
 8008a7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	f000 80db 	beq.w	8008c3c <_dtoa_r+0x8bc>
 8008a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a88:	2a01      	cmp	r2, #1
 8008a8a:	f300 80bf 	bgt.w	8008c0c <_dtoa_r+0x88c>
 8008a8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	f000 80b7 	beq.w	8008c04 <_dtoa_r+0x884>
 8008a96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a9c:	4646      	mov	r6, r8
 8008a9e:	9a08      	ldr	r2, [sp, #32]
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	441a      	add	r2, r3
 8008aa4:	4658      	mov	r0, fp
 8008aa6:	4498      	add	r8, r3
 8008aa8:	9208      	str	r2, [sp, #32]
 8008aaa:	f000 fc21 	bl	80092f0 <__i2b>
 8008aae:	4605      	mov	r5, r0
 8008ab0:	b15e      	cbz	r6, 8008aca <_dtoa_r+0x74a>
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dd08      	ble.n	8008aca <_dtoa_r+0x74a>
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	9a08      	ldr	r2, [sp, #32]
 8008abc:	bfa8      	it	ge
 8008abe:	4633      	movge	r3, r6
 8008ac0:	eba8 0803 	sub.w	r8, r8, r3
 8008ac4:	1af6      	subs	r6, r6, r3
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008acc:	b1f3      	cbz	r3, 8008b0c <_dtoa_r+0x78c>
 8008ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80b7 	beq.w	8008c44 <_dtoa_r+0x8c4>
 8008ad6:	b18c      	cbz	r4, 8008afc <_dtoa_r+0x77c>
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4622      	mov	r2, r4
 8008adc:	4658      	mov	r0, fp
 8008ade:	f000 fcc7 	bl	8009470 <__pow5mult>
 8008ae2:	464a      	mov	r2, r9
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	4658      	mov	r0, fp
 8008aea:	f000 fc17 	bl	800931c <__multiply>
 8008aee:	4649      	mov	r1, r9
 8008af0:	9004      	str	r0, [sp, #16]
 8008af2:	4658      	mov	r0, fp
 8008af4:	f000 fb48 	bl	8009188 <_Bfree>
 8008af8:	9b04      	ldr	r3, [sp, #16]
 8008afa:	4699      	mov	r9, r3
 8008afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008afe:	1b1a      	subs	r2, r3, r4
 8008b00:	d004      	beq.n	8008b0c <_dtoa_r+0x78c>
 8008b02:	4649      	mov	r1, r9
 8008b04:	4658      	mov	r0, fp
 8008b06:	f000 fcb3 	bl	8009470 <__pow5mult>
 8008b0a:	4681      	mov	r9, r0
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4658      	mov	r0, fp
 8008b10:	f000 fbee 	bl	80092f0 <__i2b>
 8008b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b16:	4604      	mov	r4, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 81cf 	beq.w	8008ebc <_dtoa_r+0xb3c>
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4601      	mov	r1, r0
 8008b22:	4658      	mov	r0, fp
 8008b24:	f000 fca4 	bl	8009470 <__pow5mult>
 8008b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	f300 8095 	bgt.w	8008c5c <_dtoa_r+0x8dc>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f040 8087 	bne.w	8008c48 <_dtoa_r+0x8c8>
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f040 8089 	bne.w	8008c58 <_dtoa_r+0x8d8>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b4c:	0d1b      	lsrs	r3, r3, #20
 8008b4e:	051b      	lsls	r3, r3, #20
 8008b50:	b12b      	cbz	r3, 8008b5e <_dtoa_r+0x7de>
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	3301      	adds	r3, #1
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	f108 0801 	add.w	r8, r8, #1
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 81b0 	beq.w	8008ec8 <_dtoa_r+0xb48>
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b6e:	6918      	ldr	r0, [r3, #16]
 8008b70:	f000 fb72 	bl	8009258 <__hi0bits>
 8008b74:	f1c0 0020 	rsb	r0, r0, #32
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	4418      	add	r0, r3
 8008b7c:	f010 001f 	ands.w	r0, r0, #31
 8008b80:	d077      	beq.n	8008c72 <_dtoa_r+0x8f2>
 8008b82:	f1c0 0320 	rsb	r3, r0, #32
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	dd6b      	ble.n	8008c62 <_dtoa_r+0x8e2>
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	f1c0 001c 	rsb	r0, r0, #28
 8008b90:	4403      	add	r3, r0
 8008b92:	4480      	add	r8, r0
 8008b94:	4406      	add	r6, r0
 8008b96:	9308      	str	r3, [sp, #32]
 8008b98:	f1b8 0f00 	cmp.w	r8, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x82a>
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	4658      	mov	r0, fp
 8008ba4:	f000 fcbe 	bl	8009524 <__lshift>
 8008ba8:	4681      	mov	r9, r0
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dd05      	ble.n	8008bbc <_dtoa_r+0x83c>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4658      	mov	r0, fp
 8008bb6:	f000 fcb5 	bl	8009524 <__lshift>
 8008bba:	4604      	mov	r4, r0
 8008bbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d059      	beq.n	8008c76 <_dtoa_r+0x8f6>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f000 fd19 	bl	80095fc <__mcmp>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	da53      	bge.n	8008c76 <_dtoa_r+0x8f6>
 8008bce:	1e7b      	subs	r3, r7, #1
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	220a      	movs	r2, #10
 8008bd8:	4658      	mov	r0, fp
 8008bda:	f000 faf7 	bl	80091cc <__multadd>
 8008bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008be0:	4681      	mov	r9, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 8172 	beq.w	8008ecc <_dtoa_r+0xb4c>
 8008be8:	2300      	movs	r3, #0
 8008bea:	4629      	mov	r1, r5
 8008bec:	220a      	movs	r2, #10
 8008bee:	4658      	mov	r0, fp
 8008bf0:	f000 faec 	bl	80091cc <__multadd>
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	dc67      	bgt.n	8008ccc <_dtoa_r+0x94c>
 8008bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc41      	bgt.n	8008c86 <_dtoa_r+0x906>
 8008c02:	e063      	b.n	8008ccc <_dtoa_r+0x94c>
 8008c04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c0a:	e746      	b.n	8008a9a <_dtoa_r+0x71a>
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	1e5c      	subs	r4, r3, #1
 8008c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c12:	42a3      	cmp	r3, r4
 8008c14:	bfbf      	itttt	lt
 8008c16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c1c:	1ae3      	sublt	r3, r4, r3
 8008c1e:	bfb4      	ite	lt
 8008c20:	18d2      	addlt	r2, r2, r3
 8008c22:	1b1c      	subge	r4, r3, r4
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	bfbc      	itt	lt
 8008c28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c2a:	2400      	movlt	r4, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb5      	itete	lt
 8008c30:	eba8 0603 	sublt.w	r6, r8, r3
 8008c34:	9b07      	ldrge	r3, [sp, #28]
 8008c36:	2300      	movlt	r3, #0
 8008c38:	4646      	movge	r6, r8
 8008c3a:	e730      	b.n	8008a9e <_dtoa_r+0x71e>
 8008c3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c40:	4646      	mov	r6, r8
 8008c42:	e735      	b.n	8008ab0 <_dtoa_r+0x730>
 8008c44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c46:	e75c      	b.n	8008b02 <_dtoa_r+0x782>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e788      	b.n	8008b5e <_dtoa_r+0x7de>
 8008c4c:	3fe00000 	.word	0x3fe00000
 8008c50:	40240000 	.word	0x40240000
 8008c54:	40140000 	.word	0x40140000
 8008c58:	9b02      	ldr	r3, [sp, #8]
 8008c5a:	e780      	b.n	8008b5e <_dtoa_r+0x7de>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c60:	e782      	b.n	8008b68 <_dtoa_r+0x7e8>
 8008c62:	d099      	beq.n	8008b98 <_dtoa_r+0x818>
 8008c64:	9a08      	ldr	r2, [sp, #32]
 8008c66:	331c      	adds	r3, #28
 8008c68:	441a      	add	r2, r3
 8008c6a:	4498      	add	r8, r3
 8008c6c:	441e      	add	r6, r3
 8008c6e:	9208      	str	r2, [sp, #32]
 8008c70:	e792      	b.n	8008b98 <_dtoa_r+0x818>
 8008c72:	4603      	mov	r3, r0
 8008c74:	e7f6      	b.n	8008c64 <_dtoa_r+0x8e4>
 8008c76:	9b07      	ldr	r3, [sp, #28]
 8008c78:	9704      	str	r7, [sp, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dc20      	bgt.n	8008cc0 <_dtoa_r+0x940>
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	dd1e      	ble.n	8008cc4 <_dtoa_r+0x944>
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f aec0 	bne.w	8008a0e <_dtoa_r+0x68e>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	2205      	movs	r2, #5
 8008c92:	4658      	mov	r0, fp
 8008c94:	f000 fa9a 	bl	80091cc <__multadd>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4648      	mov	r0, r9
 8008c9e:	f000 fcad 	bl	80095fc <__mcmp>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f77f aeb3 	ble.w	8008a0e <_dtoa_r+0x68e>
 8008ca8:	4656      	mov	r6, sl
 8008caa:	2331      	movs	r3, #49	@ 0x31
 8008cac:	f806 3b01 	strb.w	r3, [r6], #1
 8008cb0:	9b04      	ldr	r3, [sp, #16]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	e6ae      	b.n	8008a16 <_dtoa_r+0x696>
 8008cb8:	9c07      	ldr	r4, [sp, #28]
 8008cba:	9704      	str	r7, [sp, #16]
 8008cbc:	4625      	mov	r5, r4
 8008cbe:	e7f3      	b.n	8008ca8 <_dtoa_r+0x928>
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 8104 	beq.w	8008ed4 <_dtoa_r+0xb54>
 8008ccc:	2e00      	cmp	r6, #0
 8008cce:	dd05      	ble.n	8008cdc <_dtoa_r+0x95c>
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f000 fc25 	bl	8009524 <__lshift>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d05a      	beq.n	8008d98 <_dtoa_r+0xa18>
 8008ce2:	6869      	ldr	r1, [r5, #4]
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f000 fa0f 	bl	8009108 <_Balloc>
 8008cea:	4606      	mov	r6, r0
 8008cec:	b928      	cbnz	r0, 8008cfa <_dtoa_r+0x97a>
 8008cee:	4b84      	ldr	r3, [pc, #528]	@ (8008f00 <_dtoa_r+0xb80>)
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cf6:	f7ff bb5a 	b.w	80083ae <_dtoa_r+0x2e>
 8008cfa:	692a      	ldr	r2, [r5, #16]
 8008cfc:	3202      	adds	r2, #2
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	f105 010c 	add.w	r1, r5, #12
 8008d04:	300c      	adds	r0, #12
 8008d06:	f7ff fa86 	bl	8008216 <memcpy>
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4658      	mov	r0, fp
 8008d10:	f000 fc08 	bl	8009524 <__lshift>
 8008d14:	f10a 0301 	add.w	r3, sl, #1
 8008d18:	9307      	str	r3, [sp, #28]
 8008d1a:	9b00      	ldr	r3, [sp, #0]
 8008d1c:	4453      	add	r3, sl
 8008d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d20:	9b02      	ldr	r3, [sp, #8]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	462f      	mov	r7, r5
 8008d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	9b07      	ldr	r3, [sp, #28]
 8008d2e:	4621      	mov	r1, r4
 8008d30:	3b01      	subs	r3, #1
 8008d32:	4648      	mov	r0, r9
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	f7ff fa9b 	bl	8008270 <quorem>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	9002      	str	r0, [sp, #8]
 8008d3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d42:	4648      	mov	r0, r9
 8008d44:	f000 fc5a 	bl	80095fc <__mcmp>
 8008d48:	462a      	mov	r2, r5
 8008d4a:	9008      	str	r0, [sp, #32]
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4658      	mov	r0, fp
 8008d50:	f000 fc70 	bl	8009634 <__mdiff>
 8008d54:	68c2      	ldr	r2, [r0, #12]
 8008d56:	4606      	mov	r6, r0
 8008d58:	bb02      	cbnz	r2, 8008d9c <_dtoa_r+0xa1c>
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4648      	mov	r0, r9
 8008d5e:	f000 fc4d 	bl	80095fc <__mcmp>
 8008d62:	4602      	mov	r2, r0
 8008d64:	4631      	mov	r1, r6
 8008d66:	4658      	mov	r0, fp
 8008d68:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d6a:	f000 fa0d 	bl	8009188 <_Bfree>
 8008d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d72:	9e07      	ldr	r6, [sp, #28]
 8008d74:	ea43 0102 	orr.w	r1, r3, r2
 8008d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7a:	4319      	orrs	r1, r3
 8008d7c:	d110      	bne.n	8008da0 <_dtoa_r+0xa20>
 8008d7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d82:	d029      	beq.n	8008dd8 <_dtoa_r+0xa58>
 8008d84:	9b08      	ldr	r3, [sp, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dd02      	ble.n	8008d90 <_dtoa_r+0xa10>
 8008d8a:	9b02      	ldr	r3, [sp, #8]
 8008d8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d90:	9b00      	ldr	r3, [sp, #0]
 8008d92:	f883 8000 	strb.w	r8, [r3]
 8008d96:	e63f      	b.n	8008a18 <_dtoa_r+0x698>
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e7bb      	b.n	8008d14 <_dtoa_r+0x994>
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	e7e1      	b.n	8008d64 <_dtoa_r+0x9e4>
 8008da0:	9b08      	ldr	r3, [sp, #32]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	db04      	blt.n	8008db0 <_dtoa_r+0xa30>
 8008da6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008da8:	430b      	orrs	r3, r1
 8008daa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dac:	430b      	orrs	r3, r1
 8008dae:	d120      	bne.n	8008df2 <_dtoa_r+0xa72>
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	dded      	ble.n	8008d90 <_dtoa_r+0xa10>
 8008db4:	4649      	mov	r1, r9
 8008db6:	2201      	movs	r2, #1
 8008db8:	4658      	mov	r0, fp
 8008dba:	f000 fbb3 	bl	8009524 <__lshift>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4681      	mov	r9, r0
 8008dc2:	f000 fc1b 	bl	80095fc <__mcmp>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	dc03      	bgt.n	8008dd2 <_dtoa_r+0xa52>
 8008dca:	d1e1      	bne.n	8008d90 <_dtoa_r+0xa10>
 8008dcc:	f018 0f01 	tst.w	r8, #1
 8008dd0:	d0de      	beq.n	8008d90 <_dtoa_r+0xa10>
 8008dd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dd6:	d1d8      	bne.n	8008d8a <_dtoa_r+0xa0a>
 8008dd8:	9a00      	ldr	r2, [sp, #0]
 8008dda:	2339      	movs	r3, #57	@ 0x39
 8008ddc:	7013      	strb	r3, [r2, #0]
 8008dde:	4633      	mov	r3, r6
 8008de0:	461e      	mov	r6, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008de8:	2a39      	cmp	r2, #57	@ 0x39
 8008dea:	d052      	beq.n	8008e92 <_dtoa_r+0xb12>
 8008dec:	3201      	adds	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e612      	b.n	8008a18 <_dtoa_r+0x698>
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	dd07      	ble.n	8008e06 <_dtoa_r+0xa86>
 8008df6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dfa:	d0ed      	beq.n	8008dd8 <_dtoa_r+0xa58>
 8008dfc:	9a00      	ldr	r2, [sp, #0]
 8008dfe:	f108 0301 	add.w	r3, r8, #1
 8008e02:	7013      	strb	r3, [r2, #0]
 8008e04:	e608      	b.n	8008a18 <_dtoa_r+0x698>
 8008e06:	9b07      	ldr	r3, [sp, #28]
 8008e08:	9a07      	ldr	r2, [sp, #28]
 8008e0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d028      	beq.n	8008e66 <_dtoa_r+0xae6>
 8008e14:	4649      	mov	r1, r9
 8008e16:	2300      	movs	r3, #0
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f000 f9d6 	bl	80091cc <__multadd>
 8008e20:	42af      	cmp	r7, r5
 8008e22:	4681      	mov	r9, r0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	f04f 020a 	mov.w	r2, #10
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4658      	mov	r0, fp
 8008e30:	d107      	bne.n	8008e42 <_dtoa_r+0xac2>
 8008e32:	f000 f9cb 	bl	80091cc <__multadd>
 8008e36:	4607      	mov	r7, r0
 8008e38:	4605      	mov	r5, r0
 8008e3a:	9b07      	ldr	r3, [sp, #28]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	9307      	str	r3, [sp, #28]
 8008e40:	e774      	b.n	8008d2c <_dtoa_r+0x9ac>
 8008e42:	f000 f9c3 	bl	80091cc <__multadd>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4607      	mov	r7, r0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	4658      	mov	r0, fp
 8008e50:	f000 f9bc 	bl	80091cc <__multadd>
 8008e54:	4605      	mov	r5, r0
 8008e56:	e7f0      	b.n	8008e3a <_dtoa_r+0xaba>
 8008e58:	9b00      	ldr	r3, [sp, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfcc      	ite	gt
 8008e5e:	461e      	movgt	r6, r3
 8008e60:	2601      	movle	r6, #1
 8008e62:	4456      	add	r6, sl
 8008e64:	2700      	movs	r7, #0
 8008e66:	4649      	mov	r1, r9
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4658      	mov	r0, fp
 8008e6c:	f000 fb5a 	bl	8009524 <__lshift>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4681      	mov	r9, r0
 8008e74:	f000 fbc2 	bl	80095fc <__mcmp>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	dcb0      	bgt.n	8008dde <_dtoa_r+0xa5e>
 8008e7c:	d102      	bne.n	8008e84 <_dtoa_r+0xb04>
 8008e7e:	f018 0f01 	tst.w	r8, #1
 8008e82:	d1ac      	bne.n	8008dde <_dtoa_r+0xa5e>
 8008e84:	4633      	mov	r3, r6
 8008e86:	461e      	mov	r6, r3
 8008e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e8c:	2a30      	cmp	r2, #48	@ 0x30
 8008e8e:	d0fa      	beq.n	8008e86 <_dtoa_r+0xb06>
 8008e90:	e5c2      	b.n	8008a18 <_dtoa_r+0x698>
 8008e92:	459a      	cmp	sl, r3
 8008e94:	d1a4      	bne.n	8008de0 <_dtoa_r+0xa60>
 8008e96:	9b04      	ldr	r3, [sp, #16]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	9304      	str	r3, [sp, #16]
 8008e9c:	2331      	movs	r3, #49	@ 0x31
 8008e9e:	f88a 3000 	strb.w	r3, [sl]
 8008ea2:	e5b9      	b.n	8008a18 <_dtoa_r+0x698>
 8008ea4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ea6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f04 <_dtoa_r+0xb84>
 8008eaa:	b11b      	cbz	r3, 8008eb4 <_dtoa_r+0xb34>
 8008eac:	f10a 0308 	add.w	r3, sl, #8
 8008eb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	b019      	add	sp, #100	@ 0x64
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	f77f ae37 	ble.w	8008b32 <_dtoa_r+0x7b2>
 8008ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec8:	2001      	movs	r0, #1
 8008eca:	e655      	b.n	8008b78 <_dtoa_r+0x7f8>
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f77f aed6 	ble.w	8008c80 <_dtoa_r+0x900>
 8008ed4:	4656      	mov	r6, sl
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4648      	mov	r0, r9
 8008eda:	f7ff f9c9 	bl	8008270 <quorem>
 8008ede:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ee2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	eba6 020a 	sub.w	r2, r6, sl
 8008eec:	4293      	cmp	r3, r2
 8008eee:	ddb3      	ble.n	8008e58 <_dtoa_r+0xad8>
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	220a      	movs	r2, #10
 8008ef6:	4658      	mov	r0, fp
 8008ef8:	f000 f968 	bl	80091cc <__multadd>
 8008efc:	4681      	mov	r9, r0
 8008efe:	e7ea      	b.n	8008ed6 <_dtoa_r+0xb56>
 8008f00:	0800ac9f 	.word	0x0800ac9f
 8008f04:	0800ac3a 	.word	0x0800ac3a

08008f08 <_free_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d041      	beq.n	8008f94 <_free_r+0x8c>
 8008f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f14:	1f0c      	subs	r4, r1, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	18e4      	addlt	r4, r4, r3
 8008f1c:	f000 f8e8 	bl	80090f0 <__malloc_lock>
 8008f20:	4a1d      	ldr	r2, [pc, #116]	@ (8008f98 <_free_r+0x90>)
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	b933      	cbnz	r3, 8008f34 <_free_r+0x2c>
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	6014      	str	r4, [r2, #0]
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f30:	f000 b8e4 	b.w	80090fc <__malloc_unlock>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d908      	bls.n	8008f4a <_free_r+0x42>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	1821      	adds	r1, r4, r0
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	bf01      	itttt	eq
 8008f40:	6819      	ldreq	r1, [r3, #0]
 8008f42:	685b      	ldreq	r3, [r3, #4]
 8008f44:	1809      	addeq	r1, r1, r0
 8008f46:	6021      	streq	r1, [r4, #0]
 8008f48:	e7ed      	b.n	8008f26 <_free_r+0x1e>
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b10b      	cbz	r3, 8008f54 <_free_r+0x4c>
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d9fa      	bls.n	8008f4a <_free_r+0x42>
 8008f54:	6811      	ldr	r1, [r2, #0]
 8008f56:	1850      	adds	r0, r2, r1
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d10b      	bne.n	8008f74 <_free_r+0x6c>
 8008f5c:	6820      	ldr	r0, [r4, #0]
 8008f5e:	4401      	add	r1, r0
 8008f60:	1850      	adds	r0, r2, r1
 8008f62:	4283      	cmp	r3, r0
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	d1e0      	bne.n	8008f2a <_free_r+0x22>
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	6053      	str	r3, [r2, #4]
 8008f6e:	4408      	add	r0, r1
 8008f70:	6010      	str	r0, [r2, #0]
 8008f72:	e7da      	b.n	8008f2a <_free_r+0x22>
 8008f74:	d902      	bls.n	8008f7c <_free_r+0x74>
 8008f76:	230c      	movs	r3, #12
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	e7d6      	b.n	8008f2a <_free_r+0x22>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	1821      	adds	r1, r4, r0
 8008f80:	428b      	cmp	r3, r1
 8008f82:	bf04      	itt	eq
 8008f84:	6819      	ldreq	r1, [r3, #0]
 8008f86:	685b      	ldreq	r3, [r3, #4]
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	bf04      	itt	eq
 8008f8c:	1809      	addeq	r1, r1, r0
 8008f8e:	6021      	streq	r1, [r4, #0]
 8008f90:	6054      	str	r4, [r2, #4]
 8008f92:	e7ca      	b.n	8008f2a <_free_r+0x22>
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	bf00      	nop
 8008f98:	20000ee4 	.word	0x20000ee4

08008f9c <malloc>:
 8008f9c:	4b02      	ldr	r3, [pc, #8]	@ (8008fa8 <malloc+0xc>)
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	6818      	ldr	r0, [r3, #0]
 8008fa2:	f000 b825 	b.w	8008ff0 <_malloc_r>
 8008fa6:	bf00      	nop
 8008fa8:	2000001c 	.word	0x2000001c

08008fac <sbrk_aligned>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	4e0f      	ldr	r6, [pc, #60]	@ (8008fec <sbrk_aligned+0x40>)
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	6831      	ldr	r1, [r6, #0]
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	b911      	cbnz	r1, 8008fbe <sbrk_aligned+0x12>
 8008fb8:	f001 f852 	bl	800a060 <_sbrk_r>
 8008fbc:	6030      	str	r0, [r6, #0]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f001 f84d 	bl	800a060 <_sbrk_r>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d103      	bne.n	8008fd2 <sbrk_aligned+0x26>
 8008fca:	f04f 34ff 	mov.w	r4, #4294967295
 8008fce:	4620      	mov	r0, r4
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	1cc4      	adds	r4, r0, #3
 8008fd4:	f024 0403 	bic.w	r4, r4, #3
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d0f8      	beq.n	8008fce <sbrk_aligned+0x22>
 8008fdc:	1a21      	subs	r1, r4, r0
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f001 f83e 	bl	800a060 <_sbrk_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d1f2      	bne.n	8008fce <sbrk_aligned+0x22>
 8008fe8:	e7ef      	b.n	8008fca <sbrk_aligned+0x1e>
 8008fea:	bf00      	nop
 8008fec:	20000ee0 	.word	0x20000ee0

08008ff0 <_malloc_r>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	1ccd      	adds	r5, r1, #3
 8008ff6:	f025 0503 	bic.w	r5, r5, #3
 8008ffa:	3508      	adds	r5, #8
 8008ffc:	2d0c      	cmp	r5, #12
 8008ffe:	bf38      	it	cc
 8009000:	250c      	movcc	r5, #12
 8009002:	2d00      	cmp	r5, #0
 8009004:	4606      	mov	r6, r0
 8009006:	db01      	blt.n	800900c <_malloc_r+0x1c>
 8009008:	42a9      	cmp	r1, r5
 800900a:	d904      	bls.n	8009016 <_malloc_r+0x26>
 800900c:	230c      	movs	r3, #12
 800900e:	6033      	str	r3, [r6, #0]
 8009010:	2000      	movs	r0, #0
 8009012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090ec <_malloc_r+0xfc>
 800901a:	f000 f869 	bl	80090f0 <__malloc_lock>
 800901e:	f8d8 3000 	ldr.w	r3, [r8]
 8009022:	461c      	mov	r4, r3
 8009024:	bb44      	cbnz	r4, 8009078 <_malloc_r+0x88>
 8009026:	4629      	mov	r1, r5
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff ffbf 	bl	8008fac <sbrk_aligned>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	4604      	mov	r4, r0
 8009032:	d158      	bne.n	80090e6 <_malloc_r+0xf6>
 8009034:	f8d8 4000 	ldr.w	r4, [r8]
 8009038:	4627      	mov	r7, r4
 800903a:	2f00      	cmp	r7, #0
 800903c:	d143      	bne.n	80090c6 <_malloc_r+0xd6>
 800903e:	2c00      	cmp	r4, #0
 8009040:	d04b      	beq.n	80090da <_malloc_r+0xea>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	4639      	mov	r1, r7
 8009046:	4630      	mov	r0, r6
 8009048:	eb04 0903 	add.w	r9, r4, r3
 800904c:	f001 f808 	bl	800a060 <_sbrk_r>
 8009050:	4581      	cmp	r9, r0
 8009052:	d142      	bne.n	80090da <_malloc_r+0xea>
 8009054:	6821      	ldr	r1, [r4, #0]
 8009056:	1a6d      	subs	r5, r5, r1
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ffa6 	bl	8008fac <sbrk_aligned>
 8009060:	3001      	adds	r0, #1
 8009062:	d03a      	beq.n	80090da <_malloc_r+0xea>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	442b      	add	r3, r5
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	f8d8 3000 	ldr.w	r3, [r8]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	bb62      	cbnz	r2, 80090cc <_malloc_r+0xdc>
 8009072:	f8c8 7000 	str.w	r7, [r8]
 8009076:	e00f      	b.n	8009098 <_malloc_r+0xa8>
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	1b52      	subs	r2, r2, r5
 800907c:	d420      	bmi.n	80090c0 <_malloc_r+0xd0>
 800907e:	2a0b      	cmp	r2, #11
 8009080:	d917      	bls.n	80090b2 <_malloc_r+0xc2>
 8009082:	1961      	adds	r1, r4, r5
 8009084:	42a3      	cmp	r3, r4
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	bf18      	it	ne
 800908a:	6059      	strne	r1, [r3, #4]
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	bf08      	it	eq
 8009090:	f8c8 1000 	streq.w	r1, [r8]
 8009094:	5162      	str	r2, [r4, r5]
 8009096:	604b      	str	r3, [r1, #4]
 8009098:	4630      	mov	r0, r6
 800909a:	f000 f82f 	bl	80090fc <__malloc_unlock>
 800909e:	f104 000b 	add.w	r0, r4, #11
 80090a2:	1d23      	adds	r3, r4, #4
 80090a4:	f020 0007 	bic.w	r0, r0, #7
 80090a8:	1ac2      	subs	r2, r0, r3
 80090aa:	bf1c      	itt	ne
 80090ac:	1a1b      	subne	r3, r3, r0
 80090ae:	50a3      	strne	r3, [r4, r2]
 80090b0:	e7af      	b.n	8009012 <_malloc_r+0x22>
 80090b2:	6862      	ldr	r2, [r4, #4]
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	bf0c      	ite	eq
 80090b8:	f8c8 2000 	streq.w	r2, [r8]
 80090bc:	605a      	strne	r2, [r3, #4]
 80090be:	e7eb      	b.n	8009098 <_malloc_r+0xa8>
 80090c0:	4623      	mov	r3, r4
 80090c2:	6864      	ldr	r4, [r4, #4]
 80090c4:	e7ae      	b.n	8009024 <_malloc_r+0x34>
 80090c6:	463c      	mov	r4, r7
 80090c8:	687f      	ldr	r7, [r7, #4]
 80090ca:	e7b6      	b.n	800903a <_malloc_r+0x4a>
 80090cc:	461a      	mov	r2, r3
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d1fb      	bne.n	80090cc <_malloc_r+0xdc>
 80090d4:	2300      	movs	r3, #0
 80090d6:	6053      	str	r3, [r2, #4]
 80090d8:	e7de      	b.n	8009098 <_malloc_r+0xa8>
 80090da:	230c      	movs	r3, #12
 80090dc:	6033      	str	r3, [r6, #0]
 80090de:	4630      	mov	r0, r6
 80090e0:	f000 f80c 	bl	80090fc <__malloc_unlock>
 80090e4:	e794      	b.n	8009010 <_malloc_r+0x20>
 80090e6:	6005      	str	r5, [r0, #0]
 80090e8:	e7d6      	b.n	8009098 <_malloc_r+0xa8>
 80090ea:	bf00      	nop
 80090ec:	20000ee4 	.word	0x20000ee4

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	@ (80090f8 <__malloc_lock+0x8>)
 80090f2:	f7ff b886 	b.w	8008202 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20000edc 	.word	0x20000edc

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	@ (8009104 <__malloc_unlock+0x8>)
 80090fe:	f7ff b881 	b.w	8008204 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20000edc 	.word	0x20000edc

08009108 <_Balloc>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	69c6      	ldr	r6, [r0, #28]
 800910c:	4604      	mov	r4, r0
 800910e:	460d      	mov	r5, r1
 8009110:	b976      	cbnz	r6, 8009130 <_Balloc+0x28>
 8009112:	2010      	movs	r0, #16
 8009114:	f7ff ff42 	bl	8008f9c <malloc>
 8009118:	4602      	mov	r2, r0
 800911a:	61e0      	str	r0, [r4, #28]
 800911c:	b920      	cbnz	r0, 8009128 <_Balloc+0x20>
 800911e:	4b18      	ldr	r3, [pc, #96]	@ (8009180 <_Balloc+0x78>)
 8009120:	4818      	ldr	r0, [pc, #96]	@ (8009184 <_Balloc+0x7c>)
 8009122:	216b      	movs	r1, #107	@ 0x6b
 8009124:	f7ff f886 	bl	8008234 <__assert_func>
 8009128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800912c:	6006      	str	r6, [r0, #0]
 800912e:	60c6      	str	r6, [r0, #12]
 8009130:	69e6      	ldr	r6, [r4, #28]
 8009132:	68f3      	ldr	r3, [r6, #12]
 8009134:	b183      	cbz	r3, 8009158 <_Balloc+0x50>
 8009136:	69e3      	ldr	r3, [r4, #28]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800913e:	b9b8      	cbnz	r0, 8009170 <_Balloc+0x68>
 8009140:	2101      	movs	r1, #1
 8009142:	fa01 f605 	lsl.w	r6, r1, r5
 8009146:	1d72      	adds	r2, r6, #5
 8009148:	0092      	lsls	r2, r2, #2
 800914a:	4620      	mov	r0, r4
 800914c:	f000 ff9f 	bl	800a08e <_calloc_r>
 8009150:	b160      	cbz	r0, 800916c <_Balloc+0x64>
 8009152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009156:	e00e      	b.n	8009176 <_Balloc+0x6e>
 8009158:	2221      	movs	r2, #33	@ 0x21
 800915a:	2104      	movs	r1, #4
 800915c:	4620      	mov	r0, r4
 800915e:	f000 ff96 	bl	800a08e <_calloc_r>
 8009162:	69e3      	ldr	r3, [r4, #28]
 8009164:	60f0      	str	r0, [r6, #12]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e4      	bne.n	8009136 <_Balloc+0x2e>
 800916c:	2000      	movs	r0, #0
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	6802      	ldr	r2, [r0, #0]
 8009172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009176:	2300      	movs	r3, #0
 8009178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800917c:	e7f7      	b.n	800916e <_Balloc+0x66>
 800917e:	bf00      	nop
 8009180:	0800ab8d 	.word	0x0800ab8d
 8009184:	0800acb0 	.word	0x0800acb0

08009188 <_Bfree>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	69c6      	ldr	r6, [r0, #28]
 800918c:	4605      	mov	r5, r0
 800918e:	460c      	mov	r4, r1
 8009190:	b976      	cbnz	r6, 80091b0 <_Bfree+0x28>
 8009192:	2010      	movs	r0, #16
 8009194:	f7ff ff02 	bl	8008f9c <malloc>
 8009198:	4602      	mov	r2, r0
 800919a:	61e8      	str	r0, [r5, #28]
 800919c:	b920      	cbnz	r0, 80091a8 <_Bfree+0x20>
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <_Bfree+0x3c>)
 80091a0:	4809      	ldr	r0, [pc, #36]	@ (80091c8 <_Bfree+0x40>)
 80091a2:	218f      	movs	r1, #143	@ 0x8f
 80091a4:	f7ff f846 	bl	8008234 <__assert_func>
 80091a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091ac:	6006      	str	r6, [r0, #0]
 80091ae:	60c6      	str	r6, [r0, #12]
 80091b0:	b13c      	cbz	r4, 80091c2 <_Bfree+0x3a>
 80091b2:	69eb      	ldr	r3, [r5, #28]
 80091b4:	6862      	ldr	r2, [r4, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091bc:	6021      	str	r1, [r4, #0]
 80091be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	0800ab8d 	.word	0x0800ab8d
 80091c8:	0800acb0 	.word	0x0800acb0

080091cc <__multadd>:
 80091cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d0:	690d      	ldr	r5, [r1, #16]
 80091d2:	4607      	mov	r7, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	461e      	mov	r6, r3
 80091d8:	f101 0c14 	add.w	ip, r1, #20
 80091dc:	2000      	movs	r0, #0
 80091de:	f8dc 3000 	ldr.w	r3, [ip]
 80091e2:	b299      	uxth	r1, r3
 80091e4:	fb02 6101 	mla	r1, r2, r1, r6
 80091e8:	0c1e      	lsrs	r6, r3, #16
 80091ea:	0c0b      	lsrs	r3, r1, #16
 80091ec:	fb02 3306 	mla	r3, r2, r6, r3
 80091f0:	b289      	uxth	r1, r1
 80091f2:	3001      	adds	r0, #1
 80091f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091f8:	4285      	cmp	r5, r0
 80091fa:	f84c 1b04 	str.w	r1, [ip], #4
 80091fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009202:	dcec      	bgt.n	80091de <__multadd+0x12>
 8009204:	b30e      	cbz	r6, 800924a <__multadd+0x7e>
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	42ab      	cmp	r3, r5
 800920a:	dc19      	bgt.n	8009240 <__multadd+0x74>
 800920c:	6861      	ldr	r1, [r4, #4]
 800920e:	4638      	mov	r0, r7
 8009210:	3101      	adds	r1, #1
 8009212:	f7ff ff79 	bl	8009108 <_Balloc>
 8009216:	4680      	mov	r8, r0
 8009218:	b928      	cbnz	r0, 8009226 <__multadd+0x5a>
 800921a:	4602      	mov	r2, r0
 800921c:	4b0c      	ldr	r3, [pc, #48]	@ (8009250 <__multadd+0x84>)
 800921e:	480d      	ldr	r0, [pc, #52]	@ (8009254 <__multadd+0x88>)
 8009220:	21ba      	movs	r1, #186	@ 0xba
 8009222:	f7ff f807 	bl	8008234 <__assert_func>
 8009226:	6922      	ldr	r2, [r4, #16]
 8009228:	3202      	adds	r2, #2
 800922a:	f104 010c 	add.w	r1, r4, #12
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	300c      	adds	r0, #12
 8009232:	f7fe fff0 	bl	8008216 <memcpy>
 8009236:	4621      	mov	r1, r4
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ffa5 	bl	8009188 <_Bfree>
 800923e:	4644      	mov	r4, r8
 8009240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009244:	3501      	adds	r5, #1
 8009246:	615e      	str	r6, [r3, #20]
 8009248:	6125      	str	r5, [r4, #16]
 800924a:	4620      	mov	r0, r4
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	0800ac9f 	.word	0x0800ac9f
 8009254:	0800acb0 	.word	0x0800acb0

08009258 <__hi0bits>:
 8009258:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800925c:	4603      	mov	r3, r0
 800925e:	bf36      	itet	cc
 8009260:	0403      	lslcc	r3, r0, #16
 8009262:	2000      	movcs	r0, #0
 8009264:	2010      	movcc	r0, #16
 8009266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800926a:	bf3c      	itt	cc
 800926c:	021b      	lslcc	r3, r3, #8
 800926e:	3008      	addcc	r0, #8
 8009270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009274:	bf3c      	itt	cc
 8009276:	011b      	lslcc	r3, r3, #4
 8009278:	3004      	addcc	r0, #4
 800927a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927e:	bf3c      	itt	cc
 8009280:	009b      	lslcc	r3, r3, #2
 8009282:	3002      	addcc	r0, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	db05      	blt.n	8009294 <__hi0bits+0x3c>
 8009288:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800928c:	f100 0001 	add.w	r0, r0, #1
 8009290:	bf08      	it	eq
 8009292:	2020      	moveq	r0, #32
 8009294:	4770      	bx	lr

08009296 <__lo0bits>:
 8009296:	6803      	ldr	r3, [r0, #0]
 8009298:	4602      	mov	r2, r0
 800929a:	f013 0007 	ands.w	r0, r3, #7
 800929e:	d00b      	beq.n	80092b8 <__lo0bits+0x22>
 80092a0:	07d9      	lsls	r1, r3, #31
 80092a2:	d421      	bmi.n	80092e8 <__lo0bits+0x52>
 80092a4:	0798      	lsls	r0, r3, #30
 80092a6:	bf49      	itett	mi
 80092a8:	085b      	lsrmi	r3, r3, #1
 80092aa:	089b      	lsrpl	r3, r3, #2
 80092ac:	2001      	movmi	r0, #1
 80092ae:	6013      	strmi	r3, [r2, #0]
 80092b0:	bf5c      	itt	pl
 80092b2:	6013      	strpl	r3, [r2, #0]
 80092b4:	2002      	movpl	r0, #2
 80092b6:	4770      	bx	lr
 80092b8:	b299      	uxth	r1, r3
 80092ba:	b909      	cbnz	r1, 80092c0 <__lo0bits+0x2a>
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	2010      	movs	r0, #16
 80092c0:	b2d9      	uxtb	r1, r3
 80092c2:	b909      	cbnz	r1, 80092c8 <__lo0bits+0x32>
 80092c4:	3008      	adds	r0, #8
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	0719      	lsls	r1, r3, #28
 80092ca:	bf04      	itt	eq
 80092cc:	091b      	lsreq	r3, r3, #4
 80092ce:	3004      	addeq	r0, #4
 80092d0:	0799      	lsls	r1, r3, #30
 80092d2:	bf04      	itt	eq
 80092d4:	089b      	lsreq	r3, r3, #2
 80092d6:	3002      	addeq	r0, #2
 80092d8:	07d9      	lsls	r1, r3, #31
 80092da:	d403      	bmi.n	80092e4 <__lo0bits+0x4e>
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	f100 0001 	add.w	r0, r0, #1
 80092e2:	d003      	beq.n	80092ec <__lo0bits+0x56>
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4770      	bx	lr
 80092e8:	2000      	movs	r0, #0
 80092ea:	4770      	bx	lr
 80092ec:	2020      	movs	r0, #32
 80092ee:	4770      	bx	lr

080092f0 <__i2b>:
 80092f0:	b510      	push	{r4, lr}
 80092f2:	460c      	mov	r4, r1
 80092f4:	2101      	movs	r1, #1
 80092f6:	f7ff ff07 	bl	8009108 <_Balloc>
 80092fa:	4602      	mov	r2, r0
 80092fc:	b928      	cbnz	r0, 800930a <__i2b+0x1a>
 80092fe:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <__i2b+0x24>)
 8009300:	4805      	ldr	r0, [pc, #20]	@ (8009318 <__i2b+0x28>)
 8009302:	f240 1145 	movw	r1, #325	@ 0x145
 8009306:	f7fe ff95 	bl	8008234 <__assert_func>
 800930a:	2301      	movs	r3, #1
 800930c:	6144      	str	r4, [r0, #20]
 800930e:	6103      	str	r3, [r0, #16]
 8009310:	bd10      	pop	{r4, pc}
 8009312:	bf00      	nop
 8009314:	0800ac9f 	.word	0x0800ac9f
 8009318:	0800acb0 	.word	0x0800acb0

0800931c <__multiply>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	4614      	mov	r4, r2
 8009322:	690a      	ldr	r2, [r1, #16]
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	429a      	cmp	r2, r3
 8009328:	bfa8      	it	ge
 800932a:	4623      	movge	r3, r4
 800932c:	460f      	mov	r7, r1
 800932e:	bfa4      	itt	ge
 8009330:	460c      	movge	r4, r1
 8009332:	461f      	movge	r7, r3
 8009334:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009338:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	6861      	ldr	r1, [r4, #4]
 8009340:	eb0a 0609 	add.w	r6, sl, r9
 8009344:	42b3      	cmp	r3, r6
 8009346:	b085      	sub	sp, #20
 8009348:	bfb8      	it	lt
 800934a:	3101      	addlt	r1, #1
 800934c:	f7ff fedc 	bl	8009108 <_Balloc>
 8009350:	b930      	cbnz	r0, 8009360 <__multiply+0x44>
 8009352:	4602      	mov	r2, r0
 8009354:	4b44      	ldr	r3, [pc, #272]	@ (8009468 <__multiply+0x14c>)
 8009356:	4845      	ldr	r0, [pc, #276]	@ (800946c <__multiply+0x150>)
 8009358:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800935c:	f7fe ff6a 	bl	8008234 <__assert_func>
 8009360:	f100 0514 	add.w	r5, r0, #20
 8009364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009368:	462b      	mov	r3, r5
 800936a:	2200      	movs	r2, #0
 800936c:	4543      	cmp	r3, r8
 800936e:	d321      	bcc.n	80093b4 <__multiply+0x98>
 8009370:	f107 0114 	add.w	r1, r7, #20
 8009374:	f104 0214 	add.w	r2, r4, #20
 8009378:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800937c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009380:	9302      	str	r3, [sp, #8]
 8009382:	1b13      	subs	r3, r2, r4
 8009384:	3b15      	subs	r3, #21
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	3304      	adds	r3, #4
 800938c:	f104 0715 	add.w	r7, r4, #21
 8009390:	42ba      	cmp	r2, r7
 8009392:	bf38      	it	cc
 8009394:	2304      	movcc	r3, #4
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	9b02      	ldr	r3, [sp, #8]
 800939a:	9103      	str	r1, [sp, #12]
 800939c:	428b      	cmp	r3, r1
 800939e:	d80c      	bhi.n	80093ba <__multiply+0x9e>
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	dd03      	ble.n	80093ac <__multiply+0x90>
 80093a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d05b      	beq.n	8009464 <__multiply+0x148>
 80093ac:	6106      	str	r6, [r0, #16]
 80093ae:	b005      	add	sp, #20
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b4:	f843 2b04 	str.w	r2, [r3], #4
 80093b8:	e7d8      	b.n	800936c <__multiply+0x50>
 80093ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80093be:	f1ba 0f00 	cmp.w	sl, #0
 80093c2:	d024      	beq.n	800940e <__multiply+0xf2>
 80093c4:	f104 0e14 	add.w	lr, r4, #20
 80093c8:	46a9      	mov	r9, r5
 80093ca:	f04f 0c00 	mov.w	ip, #0
 80093ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093d2:	f8d9 3000 	ldr.w	r3, [r9]
 80093d6:	fa1f fb87 	uxth.w	fp, r7
 80093da:	b29b      	uxth	r3, r3
 80093dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80093e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093e4:	f8d9 7000 	ldr.w	r7, [r9]
 80093e8:	4463      	add	r3, ip
 80093ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80093f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093fc:	4572      	cmp	r2, lr
 80093fe:	f849 3b04 	str.w	r3, [r9], #4
 8009402:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009406:	d8e2      	bhi.n	80093ce <__multiply+0xb2>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	f845 c003 	str.w	ip, [r5, r3]
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009414:	3104      	adds	r1, #4
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	d021      	beq.n	8009460 <__multiply+0x144>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	f104 0c14 	add.w	ip, r4, #20
 8009422:	46ae      	mov	lr, r5
 8009424:	f04f 0a00 	mov.w	sl, #0
 8009428:	f8bc b000 	ldrh.w	fp, [ip]
 800942c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009430:	fb09 770b 	mla	r7, r9, fp, r7
 8009434:	4457      	add	r7, sl
 8009436:	b29b      	uxth	r3, r3
 8009438:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800943c:	f84e 3b04 	str.w	r3, [lr], #4
 8009440:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009444:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009448:	f8be 3000 	ldrh.w	r3, [lr]
 800944c:	fb09 330a 	mla	r3, r9, sl, r3
 8009450:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009454:	4562      	cmp	r2, ip
 8009456:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800945a:	d8e5      	bhi.n	8009428 <__multiply+0x10c>
 800945c:	9f01      	ldr	r7, [sp, #4]
 800945e:	51eb      	str	r3, [r5, r7]
 8009460:	3504      	adds	r5, #4
 8009462:	e799      	b.n	8009398 <__multiply+0x7c>
 8009464:	3e01      	subs	r6, #1
 8009466:	e79b      	b.n	80093a0 <__multiply+0x84>
 8009468:	0800ac9f 	.word	0x0800ac9f
 800946c:	0800acb0 	.word	0x0800acb0

08009470 <__pow5mult>:
 8009470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009474:	4615      	mov	r5, r2
 8009476:	f012 0203 	ands.w	r2, r2, #3
 800947a:	4607      	mov	r7, r0
 800947c:	460e      	mov	r6, r1
 800947e:	d007      	beq.n	8009490 <__pow5mult+0x20>
 8009480:	4c25      	ldr	r4, [pc, #148]	@ (8009518 <__pow5mult+0xa8>)
 8009482:	3a01      	subs	r2, #1
 8009484:	2300      	movs	r3, #0
 8009486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800948a:	f7ff fe9f 	bl	80091cc <__multadd>
 800948e:	4606      	mov	r6, r0
 8009490:	10ad      	asrs	r5, r5, #2
 8009492:	d03d      	beq.n	8009510 <__pow5mult+0xa0>
 8009494:	69fc      	ldr	r4, [r7, #28]
 8009496:	b97c      	cbnz	r4, 80094b8 <__pow5mult+0x48>
 8009498:	2010      	movs	r0, #16
 800949a:	f7ff fd7f 	bl	8008f9c <malloc>
 800949e:	4602      	mov	r2, r0
 80094a0:	61f8      	str	r0, [r7, #28]
 80094a2:	b928      	cbnz	r0, 80094b0 <__pow5mult+0x40>
 80094a4:	4b1d      	ldr	r3, [pc, #116]	@ (800951c <__pow5mult+0xac>)
 80094a6:	481e      	ldr	r0, [pc, #120]	@ (8009520 <__pow5mult+0xb0>)
 80094a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094ac:	f7fe fec2 	bl	8008234 <__assert_func>
 80094b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094b4:	6004      	str	r4, [r0, #0]
 80094b6:	60c4      	str	r4, [r0, #12]
 80094b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094c0:	b94c      	cbnz	r4, 80094d6 <__pow5mult+0x66>
 80094c2:	f240 2171 	movw	r1, #625	@ 0x271
 80094c6:	4638      	mov	r0, r7
 80094c8:	f7ff ff12 	bl	80092f0 <__i2b>
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80094d2:	4604      	mov	r4, r0
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	f04f 0900 	mov.w	r9, #0
 80094da:	07eb      	lsls	r3, r5, #31
 80094dc:	d50a      	bpl.n	80094f4 <__pow5mult+0x84>
 80094de:	4631      	mov	r1, r6
 80094e0:	4622      	mov	r2, r4
 80094e2:	4638      	mov	r0, r7
 80094e4:	f7ff ff1a 	bl	800931c <__multiply>
 80094e8:	4631      	mov	r1, r6
 80094ea:	4680      	mov	r8, r0
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7ff fe4b 	bl	8009188 <_Bfree>
 80094f2:	4646      	mov	r6, r8
 80094f4:	106d      	asrs	r5, r5, #1
 80094f6:	d00b      	beq.n	8009510 <__pow5mult+0xa0>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	b938      	cbnz	r0, 800950c <__pow5mult+0x9c>
 80094fc:	4622      	mov	r2, r4
 80094fe:	4621      	mov	r1, r4
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ff0b 	bl	800931c <__multiply>
 8009506:	6020      	str	r0, [r4, #0]
 8009508:	f8c0 9000 	str.w	r9, [r0]
 800950c:	4604      	mov	r4, r0
 800950e:	e7e4      	b.n	80094da <__pow5mult+0x6a>
 8009510:	4630      	mov	r0, r6
 8009512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009516:	bf00      	nop
 8009518:	0800ad0c 	.word	0x0800ad0c
 800951c:	0800ab8d 	.word	0x0800ab8d
 8009520:	0800acb0 	.word	0x0800acb0

08009524 <__lshift>:
 8009524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009528:	460c      	mov	r4, r1
 800952a:	6849      	ldr	r1, [r1, #4]
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009532:	68a3      	ldr	r3, [r4, #8]
 8009534:	4607      	mov	r7, r0
 8009536:	4691      	mov	r9, r2
 8009538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800953c:	f108 0601 	add.w	r6, r8, #1
 8009540:	42b3      	cmp	r3, r6
 8009542:	db0b      	blt.n	800955c <__lshift+0x38>
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff fddf 	bl	8009108 <_Balloc>
 800954a:	4605      	mov	r5, r0
 800954c:	b948      	cbnz	r0, 8009562 <__lshift+0x3e>
 800954e:	4602      	mov	r2, r0
 8009550:	4b28      	ldr	r3, [pc, #160]	@ (80095f4 <__lshift+0xd0>)
 8009552:	4829      	ldr	r0, [pc, #164]	@ (80095f8 <__lshift+0xd4>)
 8009554:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009558:	f7fe fe6c 	bl	8008234 <__assert_func>
 800955c:	3101      	adds	r1, #1
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	e7ee      	b.n	8009540 <__lshift+0x1c>
 8009562:	2300      	movs	r3, #0
 8009564:	f100 0114 	add.w	r1, r0, #20
 8009568:	f100 0210 	add.w	r2, r0, #16
 800956c:	4618      	mov	r0, r3
 800956e:	4553      	cmp	r3, sl
 8009570:	db33      	blt.n	80095da <__lshift+0xb6>
 8009572:	6920      	ldr	r0, [r4, #16]
 8009574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009578:	f104 0314 	add.w	r3, r4, #20
 800957c:	f019 091f 	ands.w	r9, r9, #31
 8009580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009588:	d02b      	beq.n	80095e2 <__lshift+0xbe>
 800958a:	f1c9 0e20 	rsb	lr, r9, #32
 800958e:	468a      	mov	sl, r1
 8009590:	2200      	movs	r2, #0
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	fa00 f009 	lsl.w	r0, r0, r9
 8009598:	4310      	orrs	r0, r2
 800959a:	f84a 0b04 	str.w	r0, [sl], #4
 800959e:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a2:	459c      	cmp	ip, r3
 80095a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80095a8:	d8f3      	bhi.n	8009592 <__lshift+0x6e>
 80095aa:	ebac 0304 	sub.w	r3, ip, r4
 80095ae:	3b15      	subs	r3, #21
 80095b0:	f023 0303 	bic.w	r3, r3, #3
 80095b4:	3304      	adds	r3, #4
 80095b6:	f104 0015 	add.w	r0, r4, #21
 80095ba:	4584      	cmp	ip, r0
 80095bc:	bf38      	it	cc
 80095be:	2304      	movcc	r3, #4
 80095c0:	50ca      	str	r2, [r1, r3]
 80095c2:	b10a      	cbz	r2, 80095c8 <__lshift+0xa4>
 80095c4:	f108 0602 	add.w	r6, r8, #2
 80095c8:	3e01      	subs	r6, #1
 80095ca:	4638      	mov	r0, r7
 80095cc:	612e      	str	r6, [r5, #16]
 80095ce:	4621      	mov	r1, r4
 80095d0:	f7ff fdda 	bl	8009188 <_Bfree>
 80095d4:	4628      	mov	r0, r5
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	f842 0f04 	str.w	r0, [r2, #4]!
 80095de:	3301      	adds	r3, #1
 80095e0:	e7c5      	b.n	800956e <__lshift+0x4a>
 80095e2:	3904      	subs	r1, #4
 80095e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095ec:	459c      	cmp	ip, r3
 80095ee:	d8f9      	bhi.n	80095e4 <__lshift+0xc0>
 80095f0:	e7ea      	b.n	80095c8 <__lshift+0xa4>
 80095f2:	bf00      	nop
 80095f4:	0800ac9f 	.word	0x0800ac9f
 80095f8:	0800acb0 	.word	0x0800acb0

080095fc <__mcmp>:
 80095fc:	690a      	ldr	r2, [r1, #16]
 80095fe:	4603      	mov	r3, r0
 8009600:	6900      	ldr	r0, [r0, #16]
 8009602:	1a80      	subs	r0, r0, r2
 8009604:	b530      	push	{r4, r5, lr}
 8009606:	d10e      	bne.n	8009626 <__mcmp+0x2a>
 8009608:	3314      	adds	r3, #20
 800960a:	3114      	adds	r1, #20
 800960c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009610:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009614:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009618:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800961c:	4295      	cmp	r5, r2
 800961e:	d003      	beq.n	8009628 <__mcmp+0x2c>
 8009620:	d205      	bcs.n	800962e <__mcmp+0x32>
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	bd30      	pop	{r4, r5, pc}
 8009628:	42a3      	cmp	r3, r4
 800962a:	d3f3      	bcc.n	8009614 <__mcmp+0x18>
 800962c:	e7fb      	b.n	8009626 <__mcmp+0x2a>
 800962e:	2001      	movs	r0, #1
 8009630:	e7f9      	b.n	8009626 <__mcmp+0x2a>
	...

08009634 <__mdiff>:
 8009634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	4689      	mov	r9, r1
 800963a:	4606      	mov	r6, r0
 800963c:	4611      	mov	r1, r2
 800963e:	4648      	mov	r0, r9
 8009640:	4614      	mov	r4, r2
 8009642:	f7ff ffdb 	bl	80095fc <__mcmp>
 8009646:	1e05      	subs	r5, r0, #0
 8009648:	d112      	bne.n	8009670 <__mdiff+0x3c>
 800964a:	4629      	mov	r1, r5
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff fd5b 	bl	8009108 <_Balloc>
 8009652:	4602      	mov	r2, r0
 8009654:	b928      	cbnz	r0, 8009662 <__mdiff+0x2e>
 8009656:	4b3f      	ldr	r3, [pc, #252]	@ (8009754 <__mdiff+0x120>)
 8009658:	f240 2137 	movw	r1, #567	@ 0x237
 800965c:	483e      	ldr	r0, [pc, #248]	@ (8009758 <__mdiff+0x124>)
 800965e:	f7fe fde9 	bl	8008234 <__assert_func>
 8009662:	2301      	movs	r3, #1
 8009664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009668:	4610      	mov	r0, r2
 800966a:	b003      	add	sp, #12
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009670:	bfbc      	itt	lt
 8009672:	464b      	movlt	r3, r9
 8009674:	46a1      	movlt	r9, r4
 8009676:	4630      	mov	r0, r6
 8009678:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800967c:	bfba      	itte	lt
 800967e:	461c      	movlt	r4, r3
 8009680:	2501      	movlt	r5, #1
 8009682:	2500      	movge	r5, #0
 8009684:	f7ff fd40 	bl	8009108 <_Balloc>
 8009688:	4602      	mov	r2, r0
 800968a:	b918      	cbnz	r0, 8009694 <__mdiff+0x60>
 800968c:	4b31      	ldr	r3, [pc, #196]	@ (8009754 <__mdiff+0x120>)
 800968e:	f240 2145 	movw	r1, #581	@ 0x245
 8009692:	e7e3      	b.n	800965c <__mdiff+0x28>
 8009694:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009698:	6926      	ldr	r6, [r4, #16]
 800969a:	60c5      	str	r5, [r0, #12]
 800969c:	f109 0310 	add.w	r3, r9, #16
 80096a0:	f109 0514 	add.w	r5, r9, #20
 80096a4:	f104 0e14 	add.w	lr, r4, #20
 80096a8:	f100 0b14 	add.w	fp, r0, #20
 80096ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	46d9      	mov	r9, fp
 80096b8:	f04f 0c00 	mov.w	ip, #0
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	fa1f f38a 	uxth.w	r3, sl
 80096cc:	4619      	mov	r1, r3
 80096ce:	b283      	uxth	r3, r0
 80096d0:	1acb      	subs	r3, r1, r3
 80096d2:	0c00      	lsrs	r0, r0, #16
 80096d4:	4463      	add	r3, ip
 80096d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096de:	b29b      	uxth	r3, r3
 80096e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096e4:	4576      	cmp	r6, lr
 80096e6:	f849 3b04 	str.w	r3, [r9], #4
 80096ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096ee:	d8e5      	bhi.n	80096bc <__mdiff+0x88>
 80096f0:	1b33      	subs	r3, r6, r4
 80096f2:	3b15      	subs	r3, #21
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	3415      	adds	r4, #21
 80096fa:	3304      	adds	r3, #4
 80096fc:	42a6      	cmp	r6, r4
 80096fe:	bf38      	it	cc
 8009700:	2304      	movcc	r3, #4
 8009702:	441d      	add	r5, r3
 8009704:	445b      	add	r3, fp
 8009706:	461e      	mov	r6, r3
 8009708:	462c      	mov	r4, r5
 800970a:	4544      	cmp	r4, r8
 800970c:	d30e      	bcc.n	800972c <__mdiff+0xf8>
 800970e:	f108 0103 	add.w	r1, r8, #3
 8009712:	1b49      	subs	r1, r1, r5
 8009714:	f021 0103 	bic.w	r1, r1, #3
 8009718:	3d03      	subs	r5, #3
 800971a:	45a8      	cmp	r8, r5
 800971c:	bf38      	it	cc
 800971e:	2100      	movcc	r1, #0
 8009720:	440b      	add	r3, r1
 8009722:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009726:	b191      	cbz	r1, 800974e <__mdiff+0x11a>
 8009728:	6117      	str	r7, [r2, #16]
 800972a:	e79d      	b.n	8009668 <__mdiff+0x34>
 800972c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009730:	46e6      	mov	lr, ip
 8009732:	0c08      	lsrs	r0, r1, #16
 8009734:	fa1c fc81 	uxtah	ip, ip, r1
 8009738:	4471      	add	r1, lr
 800973a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800973e:	b289      	uxth	r1, r1
 8009740:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009744:	f846 1b04 	str.w	r1, [r6], #4
 8009748:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800974c:	e7dd      	b.n	800970a <__mdiff+0xd6>
 800974e:	3f01      	subs	r7, #1
 8009750:	e7e7      	b.n	8009722 <__mdiff+0xee>
 8009752:	bf00      	nop
 8009754:	0800ac9f 	.word	0x0800ac9f
 8009758:	0800acb0 	.word	0x0800acb0

0800975c <__d2b>:
 800975c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009760:	460f      	mov	r7, r1
 8009762:	2101      	movs	r1, #1
 8009764:	ec59 8b10 	vmov	r8, r9, d0
 8009768:	4616      	mov	r6, r2
 800976a:	f7ff fccd 	bl	8009108 <_Balloc>
 800976e:	4604      	mov	r4, r0
 8009770:	b930      	cbnz	r0, 8009780 <__d2b+0x24>
 8009772:	4602      	mov	r2, r0
 8009774:	4b23      	ldr	r3, [pc, #140]	@ (8009804 <__d2b+0xa8>)
 8009776:	4824      	ldr	r0, [pc, #144]	@ (8009808 <__d2b+0xac>)
 8009778:	f240 310f 	movw	r1, #783	@ 0x30f
 800977c:	f7fe fd5a 	bl	8008234 <__assert_func>
 8009780:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009784:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009788:	b10d      	cbz	r5, 800978e <__d2b+0x32>
 800978a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	f1b8 0300 	subs.w	r3, r8, #0
 8009794:	d023      	beq.n	80097de <__d2b+0x82>
 8009796:	4668      	mov	r0, sp
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	f7ff fd7c 	bl	8009296 <__lo0bits>
 800979e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097a2:	b1d0      	cbz	r0, 80097da <__d2b+0x7e>
 80097a4:	f1c0 0320 	rsb	r3, r0, #32
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	430b      	orrs	r3, r1
 80097ae:	40c2      	lsrs	r2, r0
 80097b0:	6163      	str	r3, [r4, #20]
 80097b2:	9201      	str	r2, [sp, #4]
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	61a3      	str	r3, [r4, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bf0c      	ite	eq
 80097bc:	2201      	moveq	r2, #1
 80097be:	2202      	movne	r2, #2
 80097c0:	6122      	str	r2, [r4, #16]
 80097c2:	b1a5      	cbz	r5, 80097ee <__d2b+0x92>
 80097c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097c8:	4405      	add	r5, r0
 80097ca:	603d      	str	r5, [r7, #0]
 80097cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097d0:	6030      	str	r0, [r6, #0]
 80097d2:	4620      	mov	r0, r4
 80097d4:	b003      	add	sp, #12
 80097d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097da:	6161      	str	r1, [r4, #20]
 80097dc:	e7ea      	b.n	80097b4 <__d2b+0x58>
 80097de:	a801      	add	r0, sp, #4
 80097e0:	f7ff fd59 	bl	8009296 <__lo0bits>
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	3020      	adds	r0, #32
 80097ea:	2201      	movs	r2, #1
 80097ec:	e7e8      	b.n	80097c0 <__d2b+0x64>
 80097ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097f6:	6038      	str	r0, [r7, #0]
 80097f8:	6918      	ldr	r0, [r3, #16]
 80097fa:	f7ff fd2d 	bl	8009258 <__hi0bits>
 80097fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009802:	e7e5      	b.n	80097d0 <__d2b+0x74>
 8009804:	0800ac9f 	.word	0x0800ac9f
 8009808:	0800acb0 	.word	0x0800acb0

0800980c <__ssputs_r>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	688e      	ldr	r6, [r1, #8]
 8009812:	461f      	mov	r7, r3
 8009814:	42be      	cmp	r6, r7
 8009816:	680b      	ldr	r3, [r1, #0]
 8009818:	4682      	mov	sl, r0
 800981a:	460c      	mov	r4, r1
 800981c:	4690      	mov	r8, r2
 800981e:	d82d      	bhi.n	800987c <__ssputs_r+0x70>
 8009820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009824:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009828:	d026      	beq.n	8009878 <__ssputs_r+0x6c>
 800982a:	6965      	ldr	r5, [r4, #20]
 800982c:	6909      	ldr	r1, [r1, #16]
 800982e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009832:	eba3 0901 	sub.w	r9, r3, r1
 8009836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800983a:	1c7b      	adds	r3, r7, #1
 800983c:	444b      	add	r3, r9
 800983e:	106d      	asrs	r5, r5, #1
 8009840:	429d      	cmp	r5, r3
 8009842:	bf38      	it	cc
 8009844:	461d      	movcc	r5, r3
 8009846:	0553      	lsls	r3, r2, #21
 8009848:	d527      	bpl.n	800989a <__ssputs_r+0x8e>
 800984a:	4629      	mov	r1, r5
 800984c:	f7ff fbd0 	bl	8008ff0 <_malloc_r>
 8009850:	4606      	mov	r6, r0
 8009852:	b360      	cbz	r0, 80098ae <__ssputs_r+0xa2>
 8009854:	6921      	ldr	r1, [r4, #16]
 8009856:	464a      	mov	r2, r9
 8009858:	f7fe fcdd 	bl	8008216 <memcpy>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	6126      	str	r6, [r4, #16]
 800986a:	6165      	str	r5, [r4, #20]
 800986c:	444e      	add	r6, r9
 800986e:	eba5 0509 	sub.w	r5, r5, r9
 8009872:	6026      	str	r6, [r4, #0]
 8009874:	60a5      	str	r5, [r4, #8]
 8009876:	463e      	mov	r6, r7
 8009878:	42be      	cmp	r6, r7
 800987a:	d900      	bls.n	800987e <__ssputs_r+0x72>
 800987c:	463e      	mov	r6, r7
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	4632      	mov	r2, r6
 8009882:	4641      	mov	r1, r8
 8009884:	f000 fbb0 	bl	8009fe8 <memmove>
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	1b9b      	subs	r3, r3, r6
 800988c:	60a3      	str	r3, [r4, #8]
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	4433      	add	r3, r6
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	2000      	movs	r0, #0
 8009896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989a:	462a      	mov	r2, r5
 800989c:	f000 fc1d 	bl	800a0da <_realloc_r>
 80098a0:	4606      	mov	r6, r0
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1e0      	bne.n	8009868 <__ssputs_r+0x5c>
 80098a6:	6921      	ldr	r1, [r4, #16]
 80098a8:	4650      	mov	r0, sl
 80098aa:	f7ff fb2d 	bl	8008f08 <_free_r>
 80098ae:	230c      	movs	r3, #12
 80098b0:	f8ca 3000 	str.w	r3, [sl]
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	e7e9      	b.n	8009896 <__ssputs_r+0x8a>
	...

080098c4 <_svfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4698      	mov	r8, r3
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	061b      	lsls	r3, r3, #24
 80098ce:	b09d      	sub	sp, #116	@ 0x74
 80098d0:	4607      	mov	r7, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	d510      	bpl.n	80098fa <_svfiprintf_r+0x36>
 80098d8:	690b      	ldr	r3, [r1, #16]
 80098da:	b973      	cbnz	r3, 80098fa <_svfiprintf_r+0x36>
 80098dc:	2140      	movs	r1, #64	@ 0x40
 80098de:	f7ff fb87 	bl	8008ff0 <_malloc_r>
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	6128      	str	r0, [r5, #16]
 80098e6:	b930      	cbnz	r0, 80098f6 <_svfiprintf_r+0x32>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	b01d      	add	sp, #116	@ 0x74
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	2340      	movs	r3, #64	@ 0x40
 80098f8:	616b      	str	r3, [r5, #20]
 80098fa:	2300      	movs	r3, #0
 80098fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098fe:	2320      	movs	r3, #32
 8009900:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009904:	f8cd 800c 	str.w	r8, [sp, #12]
 8009908:	2330      	movs	r3, #48	@ 0x30
 800990a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009aa8 <_svfiprintf_r+0x1e4>
 800990e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009912:	f04f 0901 	mov.w	r9, #1
 8009916:	4623      	mov	r3, r4
 8009918:	469a      	mov	sl, r3
 800991a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991e:	b10a      	cbz	r2, 8009924 <_svfiprintf_r+0x60>
 8009920:	2a25      	cmp	r2, #37	@ 0x25
 8009922:	d1f9      	bne.n	8009918 <_svfiprintf_r+0x54>
 8009924:	ebba 0b04 	subs.w	fp, sl, r4
 8009928:	d00b      	beq.n	8009942 <_svfiprintf_r+0x7e>
 800992a:	465b      	mov	r3, fp
 800992c:	4622      	mov	r2, r4
 800992e:	4629      	mov	r1, r5
 8009930:	4638      	mov	r0, r7
 8009932:	f7ff ff6b 	bl	800980c <__ssputs_r>
 8009936:	3001      	adds	r0, #1
 8009938:	f000 80a7 	beq.w	8009a8a <_svfiprintf_r+0x1c6>
 800993c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800993e:	445a      	add	r2, fp
 8009940:	9209      	str	r2, [sp, #36]	@ 0x24
 8009942:	f89a 3000 	ldrb.w	r3, [sl]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 809f 	beq.w	8009a8a <_svfiprintf_r+0x1c6>
 800994c:	2300      	movs	r3, #0
 800994e:	f04f 32ff 	mov.w	r2, #4294967295
 8009952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009956:	f10a 0a01 	add.w	sl, sl, #1
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	9307      	str	r3, [sp, #28]
 800995e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009962:	931a      	str	r3, [sp, #104]	@ 0x68
 8009964:	4654      	mov	r4, sl
 8009966:	2205      	movs	r2, #5
 8009968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996c:	484e      	ldr	r0, [pc, #312]	@ (8009aa8 <_svfiprintf_r+0x1e4>)
 800996e:	f7f6 fc47 	bl	8000200 <memchr>
 8009972:	9a04      	ldr	r2, [sp, #16]
 8009974:	b9d8      	cbnz	r0, 80099ae <_svfiprintf_r+0xea>
 8009976:	06d0      	lsls	r0, r2, #27
 8009978:	bf44      	itt	mi
 800997a:	2320      	movmi	r3, #32
 800997c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009980:	0711      	lsls	r1, r2, #28
 8009982:	bf44      	itt	mi
 8009984:	232b      	movmi	r3, #43	@ 0x2b
 8009986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800998a:	f89a 3000 	ldrb.w	r3, [sl]
 800998e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009990:	d015      	beq.n	80099be <_svfiprintf_r+0xfa>
 8009992:	9a07      	ldr	r2, [sp, #28]
 8009994:	4654      	mov	r4, sl
 8009996:	2000      	movs	r0, #0
 8009998:	f04f 0c0a 	mov.w	ip, #10
 800999c:	4621      	mov	r1, r4
 800999e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a2:	3b30      	subs	r3, #48	@ 0x30
 80099a4:	2b09      	cmp	r3, #9
 80099a6:	d94b      	bls.n	8009a40 <_svfiprintf_r+0x17c>
 80099a8:	b1b0      	cbz	r0, 80099d8 <_svfiprintf_r+0x114>
 80099aa:	9207      	str	r2, [sp, #28]
 80099ac:	e014      	b.n	80099d8 <_svfiprintf_r+0x114>
 80099ae:	eba0 0308 	sub.w	r3, r0, r8
 80099b2:	fa09 f303 	lsl.w	r3, r9, r3
 80099b6:	4313      	orrs	r3, r2
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	46a2      	mov	sl, r4
 80099bc:	e7d2      	b.n	8009964 <_svfiprintf_r+0xa0>
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	1d19      	adds	r1, r3, #4
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	9103      	str	r1, [sp, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bfbb      	ittet	lt
 80099ca:	425b      	neglt	r3, r3
 80099cc:	f042 0202 	orrlt.w	r2, r2, #2
 80099d0:	9307      	strge	r3, [sp, #28]
 80099d2:	9307      	strlt	r3, [sp, #28]
 80099d4:	bfb8      	it	lt
 80099d6:	9204      	strlt	r2, [sp, #16]
 80099d8:	7823      	ldrb	r3, [r4, #0]
 80099da:	2b2e      	cmp	r3, #46	@ 0x2e
 80099dc:	d10a      	bne.n	80099f4 <_svfiprintf_r+0x130>
 80099de:	7863      	ldrb	r3, [r4, #1]
 80099e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e2:	d132      	bne.n	8009a4a <_svfiprintf_r+0x186>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	1d1a      	adds	r2, r3, #4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	9203      	str	r2, [sp, #12]
 80099ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099f0:	3402      	adds	r4, #2
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ab8 <_svfiprintf_r+0x1f4>
 80099f8:	7821      	ldrb	r1, [r4, #0]
 80099fa:	2203      	movs	r2, #3
 80099fc:	4650      	mov	r0, sl
 80099fe:	f7f6 fbff 	bl	8000200 <memchr>
 8009a02:	b138      	cbz	r0, 8009a14 <_svfiprintf_r+0x150>
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	eba0 000a 	sub.w	r0, r0, sl
 8009a0a:	2240      	movs	r2, #64	@ 0x40
 8009a0c:	4082      	lsls	r2, r0
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	3401      	adds	r4, #1
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a18:	4824      	ldr	r0, [pc, #144]	@ (8009aac <_svfiprintf_r+0x1e8>)
 8009a1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a1e:	2206      	movs	r2, #6
 8009a20:	f7f6 fbee 	bl	8000200 <memchr>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d036      	beq.n	8009a96 <_svfiprintf_r+0x1d2>
 8009a28:	4b21      	ldr	r3, [pc, #132]	@ (8009ab0 <_svfiprintf_r+0x1ec>)
 8009a2a:	bb1b      	cbnz	r3, 8009a74 <_svfiprintf_r+0x1b0>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	3307      	adds	r3, #7
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	3308      	adds	r3, #8
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3a:	4433      	add	r3, r6
 8009a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3e:	e76a      	b.n	8009916 <_svfiprintf_r+0x52>
 8009a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a44:	460c      	mov	r4, r1
 8009a46:	2001      	movs	r0, #1
 8009a48:	e7a8      	b.n	800999c <_svfiprintf_r+0xd8>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	3401      	adds	r4, #1
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	4619      	mov	r1, r3
 8009a52:	f04f 0c0a 	mov.w	ip, #10
 8009a56:	4620      	mov	r0, r4
 8009a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5c:	3a30      	subs	r2, #48	@ 0x30
 8009a5e:	2a09      	cmp	r2, #9
 8009a60:	d903      	bls.n	8009a6a <_svfiprintf_r+0x1a6>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0c6      	beq.n	80099f4 <_svfiprintf_r+0x130>
 8009a66:	9105      	str	r1, [sp, #20]
 8009a68:	e7c4      	b.n	80099f4 <_svfiprintf_r+0x130>
 8009a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6e:	4604      	mov	r4, r0
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7f0      	b.n	8009a56 <_svfiprintf_r+0x192>
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab4 <_svfiprintf_r+0x1f0>)
 8009a7c:	a904      	add	r1, sp, #16
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f7fd fcc6 	bl	8007410 <_printf_float>
 8009a84:	1c42      	adds	r2, r0, #1
 8009a86:	4606      	mov	r6, r0
 8009a88:	d1d6      	bne.n	8009a38 <_svfiprintf_r+0x174>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	065b      	lsls	r3, r3, #25
 8009a8e:	f53f af2d 	bmi.w	80098ec <_svfiprintf_r+0x28>
 8009a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a94:	e72c      	b.n	80098f0 <_svfiprintf_r+0x2c>
 8009a96:	ab03      	add	r3, sp, #12
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	462a      	mov	r2, r5
 8009a9c:	4b05      	ldr	r3, [pc, #20]	@ (8009ab4 <_svfiprintf_r+0x1f0>)
 8009a9e:	a904      	add	r1, sp, #16
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7fd ff4d 	bl	8007940 <_printf_i>
 8009aa6:	e7ed      	b.n	8009a84 <_svfiprintf_r+0x1c0>
 8009aa8:	0800ae08 	.word	0x0800ae08
 8009aac:	0800ae12 	.word	0x0800ae12
 8009ab0:	08007411 	.word	0x08007411
 8009ab4:	0800980d 	.word	0x0800980d
 8009ab8:	0800ae0e 	.word	0x0800ae0e

08009abc <__sfputc_r>:
 8009abc:	6893      	ldr	r3, [r2, #8]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	b410      	push	{r4}
 8009ac4:	6093      	str	r3, [r2, #8]
 8009ac6:	da08      	bge.n	8009ada <__sfputc_r+0x1e>
 8009ac8:	6994      	ldr	r4, [r2, #24]
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	db01      	blt.n	8009ad2 <__sfputc_r+0x16>
 8009ace:	290a      	cmp	r1, #10
 8009ad0:	d103      	bne.n	8009ada <__sfputc_r+0x1e>
 8009ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ad6:	f7fe b9f0 	b.w	8007eba <__swbuf_r>
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	1c58      	adds	r0, r3, #1
 8009ade:	6010      	str	r0, [r2, #0]
 8009ae0:	7019      	strb	r1, [r3, #0]
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <__sfputs_r>:
 8009aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	18d5      	adds	r5, r2, r3
 8009af4:	42ac      	cmp	r4, r5
 8009af6:	d101      	bne.n	8009afc <__sfputs_r+0x12>
 8009af8:	2000      	movs	r0, #0
 8009afa:	e007      	b.n	8009b0c <__sfputs_r+0x22>
 8009afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b00:	463a      	mov	r2, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ffda 	bl	8009abc <__sfputc_r>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d1f3      	bne.n	8009af4 <__sfputs_r+0xa>
 8009b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b10 <_vfiprintf_r>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	460d      	mov	r5, r1
 8009b16:	b09d      	sub	sp, #116	@ 0x74
 8009b18:	4614      	mov	r4, r2
 8009b1a:	4698      	mov	r8, r3
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	b118      	cbz	r0, 8009b28 <_vfiprintf_r+0x18>
 8009b20:	6a03      	ldr	r3, [r0, #32]
 8009b22:	b90b      	cbnz	r3, 8009b28 <_vfiprintf_r+0x18>
 8009b24:	f7fe f8b8 	bl	8007c98 <__sinit>
 8009b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b2a:	07d9      	lsls	r1, r3, #31
 8009b2c:	d405      	bmi.n	8009b3a <_vfiprintf_r+0x2a>
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	059a      	lsls	r2, r3, #22
 8009b32:	d402      	bmi.n	8009b3a <_vfiprintf_r+0x2a>
 8009b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b36:	f7fe fb64 	bl	8008202 <__retarget_lock_acquire_recursive>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	071b      	lsls	r3, r3, #28
 8009b3e:	d501      	bpl.n	8009b44 <_vfiprintf_r+0x34>
 8009b40:	692b      	ldr	r3, [r5, #16]
 8009b42:	b99b      	cbnz	r3, 8009b6c <_vfiprintf_r+0x5c>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7fe f9f6 	bl	8007f38 <__swsetup_r>
 8009b4c:	b170      	cbz	r0, 8009b6c <_vfiprintf_r+0x5c>
 8009b4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b50:	07dc      	lsls	r4, r3, #31
 8009b52:	d504      	bpl.n	8009b5e <_vfiprintf_r+0x4e>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	b01d      	add	sp, #116	@ 0x74
 8009b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	0598      	lsls	r0, r3, #22
 8009b62:	d4f7      	bmi.n	8009b54 <_vfiprintf_r+0x44>
 8009b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b66:	f7fe fb4d 	bl	8008204 <__retarget_lock_release_recursive>
 8009b6a:	e7f3      	b.n	8009b54 <_vfiprintf_r+0x44>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b70:	2320      	movs	r3, #32
 8009b72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b7a:	2330      	movs	r3, #48	@ 0x30
 8009b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d2c <_vfiprintf_r+0x21c>
 8009b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b84:	f04f 0901 	mov.w	r9, #1
 8009b88:	4623      	mov	r3, r4
 8009b8a:	469a      	mov	sl, r3
 8009b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b90:	b10a      	cbz	r2, 8009b96 <_vfiprintf_r+0x86>
 8009b92:	2a25      	cmp	r2, #37	@ 0x25
 8009b94:	d1f9      	bne.n	8009b8a <_vfiprintf_r+0x7a>
 8009b96:	ebba 0b04 	subs.w	fp, sl, r4
 8009b9a:	d00b      	beq.n	8009bb4 <_vfiprintf_r+0xa4>
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff ffa1 	bl	8009aea <__sfputs_r>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f000 80a7 	beq.w	8009cfc <_vfiprintf_r+0x1ec>
 8009bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb0:	445a      	add	r2, fp
 8009bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 809f 	beq.w	8009cfc <_vfiprintf_r+0x1ec>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc8:	f10a 0a01 	add.w	sl, sl, #1
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	9307      	str	r3, [sp, #28]
 8009bd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bd6:	4654      	mov	r4, sl
 8009bd8:	2205      	movs	r2, #5
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	4853      	ldr	r0, [pc, #332]	@ (8009d2c <_vfiprintf_r+0x21c>)
 8009be0:	f7f6 fb0e 	bl	8000200 <memchr>
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	b9d8      	cbnz	r0, 8009c20 <_vfiprintf_r+0x110>
 8009be8:	06d1      	lsls	r1, r2, #27
 8009bea:	bf44      	itt	mi
 8009bec:	2320      	movmi	r3, #32
 8009bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf2:	0713      	lsls	r3, r2, #28
 8009bf4:	bf44      	itt	mi
 8009bf6:	232b      	movmi	r3, #43	@ 0x2b
 8009bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c02:	d015      	beq.n	8009c30 <_vfiprintf_r+0x120>
 8009c04:	9a07      	ldr	r2, [sp, #28]
 8009c06:	4654      	mov	r4, sl
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f04f 0c0a 	mov.w	ip, #10
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c14:	3b30      	subs	r3, #48	@ 0x30
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d94b      	bls.n	8009cb2 <_vfiprintf_r+0x1a2>
 8009c1a:	b1b0      	cbz	r0, 8009c4a <_vfiprintf_r+0x13a>
 8009c1c:	9207      	str	r2, [sp, #28]
 8009c1e:	e014      	b.n	8009c4a <_vfiprintf_r+0x13a>
 8009c20:	eba0 0308 	sub.w	r3, r0, r8
 8009c24:	fa09 f303 	lsl.w	r3, r9, r3
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	46a2      	mov	sl, r4
 8009c2e:	e7d2      	b.n	8009bd6 <_vfiprintf_r+0xc6>
 8009c30:	9b03      	ldr	r3, [sp, #12]
 8009c32:	1d19      	adds	r1, r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	9103      	str	r1, [sp, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfbb      	ittet	lt
 8009c3c:	425b      	neglt	r3, r3
 8009c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c42:	9307      	strge	r3, [sp, #28]
 8009c44:	9307      	strlt	r3, [sp, #28]
 8009c46:	bfb8      	it	lt
 8009c48:	9204      	strlt	r2, [sp, #16]
 8009c4a:	7823      	ldrb	r3, [r4, #0]
 8009c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c4e:	d10a      	bne.n	8009c66 <_vfiprintf_r+0x156>
 8009c50:	7863      	ldrb	r3, [r4, #1]
 8009c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c54:	d132      	bne.n	8009cbc <_vfiprintf_r+0x1ac>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	1d1a      	adds	r2, r3, #4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	9203      	str	r2, [sp, #12]
 8009c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c62:	3402      	adds	r4, #2
 8009c64:	9305      	str	r3, [sp, #20]
 8009c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d3c <_vfiprintf_r+0x22c>
 8009c6a:	7821      	ldrb	r1, [r4, #0]
 8009c6c:	2203      	movs	r2, #3
 8009c6e:	4650      	mov	r0, sl
 8009c70:	f7f6 fac6 	bl	8000200 <memchr>
 8009c74:	b138      	cbz	r0, 8009c86 <_vfiprintf_r+0x176>
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	eba0 000a 	sub.w	r0, r0, sl
 8009c7c:	2240      	movs	r2, #64	@ 0x40
 8009c7e:	4082      	lsls	r2, r0
 8009c80:	4313      	orrs	r3, r2
 8009c82:	3401      	adds	r4, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8a:	4829      	ldr	r0, [pc, #164]	@ (8009d30 <_vfiprintf_r+0x220>)
 8009c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c90:	2206      	movs	r2, #6
 8009c92:	f7f6 fab5 	bl	8000200 <memchr>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d03f      	beq.n	8009d1a <_vfiprintf_r+0x20a>
 8009c9a:	4b26      	ldr	r3, [pc, #152]	@ (8009d34 <_vfiprintf_r+0x224>)
 8009c9c:	bb1b      	cbnz	r3, 8009ce6 <_vfiprintf_r+0x1d6>
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	3307      	adds	r3, #7
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	9303      	str	r3, [sp, #12]
 8009caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cac:	443b      	add	r3, r7
 8009cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb0:	e76a      	b.n	8009b88 <_vfiprintf_r+0x78>
 8009cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	2001      	movs	r0, #1
 8009cba:	e7a8      	b.n	8009c0e <_vfiprintf_r+0xfe>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	3401      	adds	r4, #1
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f04f 0c0a 	mov.w	ip, #10
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cce:	3a30      	subs	r2, #48	@ 0x30
 8009cd0:	2a09      	cmp	r2, #9
 8009cd2:	d903      	bls.n	8009cdc <_vfiprintf_r+0x1cc>
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0c6      	beq.n	8009c66 <_vfiprintf_r+0x156>
 8009cd8:	9105      	str	r1, [sp, #20]
 8009cda:	e7c4      	b.n	8009c66 <_vfiprintf_r+0x156>
 8009cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e7f0      	b.n	8009cc8 <_vfiprintf_r+0x1b8>
 8009ce6:	ab03      	add	r3, sp, #12
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	462a      	mov	r2, r5
 8009cec:	4b12      	ldr	r3, [pc, #72]	@ (8009d38 <_vfiprintf_r+0x228>)
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7fd fb8d 	bl	8007410 <_printf_float>
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	1c78      	adds	r0, r7, #1
 8009cfa:	d1d6      	bne.n	8009caa <_vfiprintf_r+0x19a>
 8009cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cfe:	07d9      	lsls	r1, r3, #31
 8009d00:	d405      	bmi.n	8009d0e <_vfiprintf_r+0x1fe>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	059a      	lsls	r2, r3, #22
 8009d06:	d402      	bmi.n	8009d0e <_vfiprintf_r+0x1fe>
 8009d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0a:	f7fe fa7b 	bl	8008204 <__retarget_lock_release_recursive>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	065b      	lsls	r3, r3, #25
 8009d12:	f53f af1f 	bmi.w	8009b54 <_vfiprintf_r+0x44>
 8009d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d18:	e71e      	b.n	8009b58 <_vfiprintf_r+0x48>
 8009d1a:	ab03      	add	r3, sp, #12
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	462a      	mov	r2, r5
 8009d20:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <_vfiprintf_r+0x228>)
 8009d22:	a904      	add	r1, sp, #16
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7fd fe0b 	bl	8007940 <_printf_i>
 8009d2a:	e7e4      	b.n	8009cf6 <_vfiprintf_r+0x1e6>
 8009d2c:	0800ae08 	.word	0x0800ae08
 8009d30:	0800ae12 	.word	0x0800ae12
 8009d34:	08007411 	.word	0x08007411
 8009d38:	08009aeb 	.word	0x08009aeb
 8009d3c:	0800ae0e 	.word	0x0800ae0e

08009d40 <__sflush_r>:
 8009d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d48:	0716      	lsls	r6, r2, #28
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	d454      	bmi.n	8009dfa <__sflush_r+0xba>
 8009d50:	684b      	ldr	r3, [r1, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dc02      	bgt.n	8009d5c <__sflush_r+0x1c>
 8009d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dd48      	ble.n	8009dee <__sflush_r+0xae>
 8009d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	d045      	beq.n	8009dee <__sflush_r+0xae>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d68:	682f      	ldr	r7, [r5, #0]
 8009d6a:	6a21      	ldr	r1, [r4, #32]
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	d030      	beq.n	8009dd2 <__sflush_r+0x92>
 8009d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	0759      	lsls	r1, r3, #29
 8009d76:	d505      	bpl.n	8009d84 <__sflush_r+0x44>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d7e:	b10b      	cbz	r3, 8009d84 <__sflush_r+0x44>
 8009d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d82:	1ad2      	subs	r2, r2, r3
 8009d84:	2300      	movs	r3, #0
 8009d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d88:	6a21      	ldr	r1, [r4, #32]
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b0      	blx	r6
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	d106      	bne.n	8009da2 <__sflush_r+0x62>
 8009d94:	6829      	ldr	r1, [r5, #0]
 8009d96:	291d      	cmp	r1, #29
 8009d98:	d82b      	bhi.n	8009df2 <__sflush_r+0xb2>
 8009d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009e44 <__sflush_r+0x104>)
 8009d9c:	410a      	asrs	r2, r1
 8009d9e:	07d6      	lsls	r6, r2, #31
 8009da0:	d427      	bmi.n	8009df2 <__sflush_r+0xb2>
 8009da2:	2200      	movs	r2, #0
 8009da4:	6062      	str	r2, [r4, #4]
 8009da6:	04d9      	lsls	r1, r3, #19
 8009da8:	6922      	ldr	r2, [r4, #16]
 8009daa:	6022      	str	r2, [r4, #0]
 8009dac:	d504      	bpl.n	8009db8 <__sflush_r+0x78>
 8009dae:	1c42      	adds	r2, r0, #1
 8009db0:	d101      	bne.n	8009db6 <__sflush_r+0x76>
 8009db2:	682b      	ldr	r3, [r5, #0]
 8009db4:	b903      	cbnz	r3, 8009db8 <__sflush_r+0x78>
 8009db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8009db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dba:	602f      	str	r7, [r5, #0]
 8009dbc:	b1b9      	cbz	r1, 8009dee <__sflush_r+0xae>
 8009dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	d002      	beq.n	8009dcc <__sflush_r+0x8c>
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7ff f89e 	bl	8008f08 <_free_r>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dd0:	e00d      	b.n	8009dee <__sflush_r+0xae>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b0      	blx	r6
 8009dd8:	4602      	mov	r2, r0
 8009dda:	1c50      	adds	r0, r2, #1
 8009ddc:	d1c9      	bne.n	8009d72 <__sflush_r+0x32>
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0c6      	beq.n	8009d72 <__sflush_r+0x32>
 8009de4:	2b1d      	cmp	r3, #29
 8009de6:	d001      	beq.n	8009dec <__sflush_r+0xac>
 8009de8:	2b16      	cmp	r3, #22
 8009dea:	d11e      	bne.n	8009e2a <__sflush_r+0xea>
 8009dec:	602f      	str	r7, [r5, #0]
 8009dee:	2000      	movs	r0, #0
 8009df0:	e022      	b.n	8009e38 <__sflush_r+0xf8>
 8009df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df6:	b21b      	sxth	r3, r3
 8009df8:	e01b      	b.n	8009e32 <__sflush_r+0xf2>
 8009dfa:	690f      	ldr	r7, [r1, #16]
 8009dfc:	2f00      	cmp	r7, #0
 8009dfe:	d0f6      	beq.n	8009dee <__sflush_r+0xae>
 8009e00:	0793      	lsls	r3, r2, #30
 8009e02:	680e      	ldr	r6, [r1, #0]
 8009e04:	bf08      	it	eq
 8009e06:	694b      	ldreq	r3, [r1, #20]
 8009e08:	600f      	str	r7, [r1, #0]
 8009e0a:	bf18      	it	ne
 8009e0c:	2300      	movne	r3, #0
 8009e0e:	eba6 0807 	sub.w	r8, r6, r7
 8009e12:	608b      	str	r3, [r1, #8]
 8009e14:	f1b8 0f00 	cmp.w	r8, #0
 8009e18:	dde9      	ble.n	8009dee <__sflush_r+0xae>
 8009e1a:	6a21      	ldr	r1, [r4, #32]
 8009e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e1e:	4643      	mov	r3, r8
 8009e20:	463a      	mov	r2, r7
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b0      	blx	r6
 8009e26:	2800      	cmp	r0, #0
 8009e28:	dc08      	bgt.n	8009e3c <__sflush_r+0xfc>
 8009e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3c:	4407      	add	r7, r0
 8009e3e:	eba8 0800 	sub.w	r8, r8, r0
 8009e42:	e7e7      	b.n	8009e14 <__sflush_r+0xd4>
 8009e44:	dfbffffe 	.word	0xdfbffffe

08009e48 <_fflush_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	690b      	ldr	r3, [r1, #16]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	b913      	cbnz	r3, 8009e58 <_fflush_r+0x10>
 8009e52:	2500      	movs	r5, #0
 8009e54:	4628      	mov	r0, r5
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	b118      	cbz	r0, 8009e62 <_fflush_r+0x1a>
 8009e5a:	6a03      	ldr	r3, [r0, #32]
 8009e5c:	b90b      	cbnz	r3, 8009e62 <_fflush_r+0x1a>
 8009e5e:	f7fd ff1b 	bl	8007c98 <__sinit>
 8009e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f3      	beq.n	8009e52 <_fflush_r+0xa>
 8009e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e6c:	07d0      	lsls	r0, r2, #31
 8009e6e:	d404      	bmi.n	8009e7a <_fflush_r+0x32>
 8009e70:	0599      	lsls	r1, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_fflush_r+0x32>
 8009e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e76:	f7fe f9c4 	bl	8008202 <__retarget_lock_acquire_recursive>
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	f7ff ff5f 	bl	8009d40 <__sflush_r>
 8009e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e84:	07da      	lsls	r2, r3, #31
 8009e86:	4605      	mov	r5, r0
 8009e88:	d4e4      	bmi.n	8009e54 <_fflush_r+0xc>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	059b      	lsls	r3, r3, #22
 8009e8e:	d4e1      	bmi.n	8009e54 <_fflush_r+0xc>
 8009e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e92:	f7fe f9b7 	bl	8008204 <__retarget_lock_release_recursive>
 8009e96:	e7dd      	b.n	8009e54 <_fflush_r+0xc>

08009e98 <fiprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	b503      	push	{r0, r1, lr}
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	ab03      	add	r3, sp, #12
 8009ea0:	4805      	ldr	r0, [pc, #20]	@ (8009eb8 <fiprintf+0x20>)
 8009ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea6:	6800      	ldr	r0, [r0, #0]
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	f7ff fe31 	bl	8009b10 <_vfiprintf_r>
 8009eae:	b002      	add	sp, #8
 8009eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb4:	b003      	add	sp, #12
 8009eb6:	4770      	bx	lr
 8009eb8:	2000001c 	.word	0x2000001c

08009ebc <__swhatbuf_r>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	b096      	sub	sp, #88	@ 0x58
 8009ec8:	4615      	mov	r5, r2
 8009eca:	461e      	mov	r6, r3
 8009ecc:	da0d      	bge.n	8009eea <__swhatbuf_r+0x2e>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ed4:	f04f 0100 	mov.w	r1, #0
 8009ed8:	bf14      	ite	ne
 8009eda:	2340      	movne	r3, #64	@ 0x40
 8009edc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	6031      	str	r1, [r6, #0]
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	b016      	add	sp, #88	@ 0x58
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
 8009eea:	466a      	mov	r2, sp
 8009eec:	f000 f896 	bl	800a01c <_fstat_r>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	dbec      	blt.n	8009ece <__swhatbuf_r+0x12>
 8009ef4:	9901      	ldr	r1, [sp, #4]
 8009ef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009efa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009efe:	4259      	negs	r1, r3
 8009f00:	4159      	adcs	r1, r3
 8009f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f06:	e7eb      	b.n	8009ee0 <__swhatbuf_r+0x24>

08009f08 <__smakebuf_r>:
 8009f08:	898b      	ldrh	r3, [r1, #12]
 8009f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f0c:	079d      	lsls	r5, r3, #30
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	d507      	bpl.n	8009f24 <__smakebuf_r+0x1c>
 8009f14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	6163      	str	r3, [r4, #20]
 8009f20:	b003      	add	sp, #12
 8009f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f24:	ab01      	add	r3, sp, #4
 8009f26:	466a      	mov	r2, sp
 8009f28:	f7ff ffc8 	bl	8009ebc <__swhatbuf_r>
 8009f2c:	9f00      	ldr	r7, [sp, #0]
 8009f2e:	4605      	mov	r5, r0
 8009f30:	4639      	mov	r1, r7
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff f85c 	bl	8008ff0 <_malloc_r>
 8009f38:	b948      	cbnz	r0, 8009f4e <__smakebuf_r+0x46>
 8009f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3e:	059a      	lsls	r2, r3, #22
 8009f40:	d4ee      	bmi.n	8009f20 <__smakebuf_r+0x18>
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	f043 0302 	orr.w	r3, r3, #2
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	e7e2      	b.n	8009f14 <__smakebuf_r+0xc>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	6020      	str	r0, [r4, #0]
 8009f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f56:	81a3      	strh	r3, [r4, #12]
 8009f58:	9b01      	ldr	r3, [sp, #4]
 8009f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f5e:	b15b      	cbz	r3, 8009f78 <__smakebuf_r+0x70>
 8009f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f64:	4630      	mov	r0, r6
 8009f66:	f000 f86b 	bl	800a040 <_isatty_r>
 8009f6a:	b128      	cbz	r0, 8009f78 <__smakebuf_r+0x70>
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	f023 0303 	bic.w	r3, r3, #3
 8009f72:	f043 0301 	orr.w	r3, r3, #1
 8009f76:	81a3      	strh	r3, [r4, #12]
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	431d      	orrs	r5, r3
 8009f7c:	81a5      	strh	r5, [r4, #12]
 8009f7e:	e7cf      	b.n	8009f20 <__smakebuf_r+0x18>

08009f80 <_putc_r>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	460d      	mov	r5, r1
 8009f84:	4614      	mov	r4, r2
 8009f86:	4606      	mov	r6, r0
 8009f88:	b118      	cbz	r0, 8009f92 <_putc_r+0x12>
 8009f8a:	6a03      	ldr	r3, [r0, #32]
 8009f8c:	b90b      	cbnz	r3, 8009f92 <_putc_r+0x12>
 8009f8e:	f7fd fe83 	bl	8007c98 <__sinit>
 8009f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f94:	07d8      	lsls	r0, r3, #31
 8009f96:	d405      	bmi.n	8009fa4 <_putc_r+0x24>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	0599      	lsls	r1, r3, #22
 8009f9c:	d402      	bmi.n	8009fa4 <_putc_r+0x24>
 8009f9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fa0:	f7fe f92f 	bl	8008202 <__retarget_lock_acquire_recursive>
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	60a3      	str	r3, [r4, #8]
 8009fac:	da05      	bge.n	8009fba <_putc_r+0x3a>
 8009fae:	69a2      	ldr	r2, [r4, #24]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	db12      	blt.n	8009fda <_putc_r+0x5a>
 8009fb4:	b2eb      	uxtb	r3, r5
 8009fb6:	2b0a      	cmp	r3, #10
 8009fb8:	d00f      	beq.n	8009fda <_putc_r+0x5a>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	701d      	strb	r5, [r3, #0]
 8009fc2:	b2ed      	uxtb	r5, r5
 8009fc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fc6:	07da      	lsls	r2, r3, #31
 8009fc8:	d405      	bmi.n	8009fd6 <_putc_r+0x56>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	059b      	lsls	r3, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_putc_r+0x56>
 8009fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fd2:	f7fe f917 	bl	8008204 <__retarget_lock_release_recursive>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	bd70      	pop	{r4, r5, r6, pc}
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7fd ff6b 	bl	8007eba <__swbuf_r>
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	e7ed      	b.n	8009fc4 <_putc_r+0x44>

08009fe8 <memmove>:
 8009fe8:	4288      	cmp	r0, r1
 8009fea:	b510      	push	{r4, lr}
 8009fec:	eb01 0402 	add.w	r4, r1, r2
 8009ff0:	d902      	bls.n	8009ff8 <memmove+0x10>
 8009ff2:	4284      	cmp	r4, r0
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	d807      	bhi.n	800a008 <memmove+0x20>
 8009ff8:	1e43      	subs	r3, r0, #1
 8009ffa:	42a1      	cmp	r1, r4
 8009ffc:	d008      	beq.n	800a010 <memmove+0x28>
 8009ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a002:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a006:	e7f8      	b.n	8009ffa <memmove+0x12>
 800a008:	4402      	add	r2, r0
 800a00a:	4601      	mov	r1, r0
 800a00c:	428a      	cmp	r2, r1
 800a00e:	d100      	bne.n	800a012 <memmove+0x2a>
 800a010:	bd10      	pop	{r4, pc}
 800a012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a01a:	e7f7      	b.n	800a00c <memmove+0x24>

0800a01c <_fstat_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d07      	ldr	r5, [pc, #28]	@ (800a03c <_fstat_r+0x20>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	4611      	mov	r1, r2
 800a028:	602b      	str	r3, [r5, #0]
 800a02a:	f7f8 ff2d 	bl	8002e88 <_fstat>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	d102      	bne.n	800a038 <_fstat_r+0x1c>
 800a032:	682b      	ldr	r3, [r5, #0]
 800a034:	b103      	cbz	r3, 800a038 <_fstat_r+0x1c>
 800a036:	6023      	str	r3, [r4, #0]
 800a038:	bd38      	pop	{r3, r4, r5, pc}
 800a03a:	bf00      	nop
 800a03c:	20000ed8 	.word	0x20000ed8

0800a040 <_isatty_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4d06      	ldr	r5, [pc, #24]	@ (800a05c <_isatty_r+0x1c>)
 800a044:	2300      	movs	r3, #0
 800a046:	4604      	mov	r4, r0
 800a048:	4608      	mov	r0, r1
 800a04a:	602b      	str	r3, [r5, #0]
 800a04c:	f7f8 ff2c 	bl	8002ea8 <_isatty>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_isatty_r+0x1a>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_isatty_r+0x1a>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20000ed8 	.word	0x20000ed8

0800a060 <_sbrk_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d06      	ldr	r5, [pc, #24]	@ (800a07c <_sbrk_r+0x1c>)
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	4608      	mov	r0, r1
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	f7f8 ff34 	bl	8002ed8 <_sbrk>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_sbrk_r+0x1a>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_sbrk_r+0x1a>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20000ed8 	.word	0x20000ed8

0800a080 <abort>:
 800a080:	b508      	push	{r3, lr}
 800a082:	2006      	movs	r0, #6
 800a084:	f000 f88c 	bl	800a1a0 <raise>
 800a088:	2001      	movs	r0, #1
 800a08a:	f7f8 fead 	bl	8002de8 <_exit>

0800a08e <_calloc_r>:
 800a08e:	b570      	push	{r4, r5, r6, lr}
 800a090:	fba1 5402 	umull	r5, r4, r1, r2
 800a094:	b93c      	cbnz	r4, 800a0a6 <_calloc_r+0x18>
 800a096:	4629      	mov	r1, r5
 800a098:	f7fe ffaa 	bl	8008ff0 <_malloc_r>
 800a09c:	4606      	mov	r6, r0
 800a09e:	b928      	cbnz	r0, 800a0ac <_calloc_r+0x1e>
 800a0a0:	2600      	movs	r6, #0
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	bd70      	pop	{r4, r5, r6, pc}
 800a0a6:	220c      	movs	r2, #12
 800a0a8:	6002      	str	r2, [r0, #0]
 800a0aa:	e7f9      	b.n	800a0a0 <_calloc_r+0x12>
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	f7fd ff98 	bl	8007fe4 <memset>
 800a0b4:	e7f5      	b.n	800a0a2 <_calloc_r+0x14>

0800a0b6 <__ascii_mbtowc>:
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	b901      	cbnz	r1, 800a0bc <__ascii_mbtowc+0x6>
 800a0ba:	a901      	add	r1, sp, #4
 800a0bc:	b142      	cbz	r2, 800a0d0 <__ascii_mbtowc+0x1a>
 800a0be:	b14b      	cbz	r3, 800a0d4 <__ascii_mbtowc+0x1e>
 800a0c0:	7813      	ldrb	r3, [r2, #0]
 800a0c2:	600b      	str	r3, [r1, #0]
 800a0c4:	7812      	ldrb	r2, [r2, #0]
 800a0c6:	1e10      	subs	r0, r2, #0
 800a0c8:	bf18      	it	ne
 800a0ca:	2001      	movne	r0, #1
 800a0cc:	b002      	add	sp, #8
 800a0ce:	4770      	bx	lr
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	e7fb      	b.n	800a0cc <__ascii_mbtowc+0x16>
 800a0d4:	f06f 0001 	mvn.w	r0, #1
 800a0d8:	e7f8      	b.n	800a0cc <__ascii_mbtowc+0x16>

0800a0da <_realloc_r>:
 800a0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0de:	4680      	mov	r8, r0
 800a0e0:	4615      	mov	r5, r2
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	b921      	cbnz	r1, 800a0f0 <_realloc_r+0x16>
 800a0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	f7fe bf80 	b.w	8008ff0 <_malloc_r>
 800a0f0:	b92a      	cbnz	r2, 800a0fe <_realloc_r+0x24>
 800a0f2:	f7fe ff09 	bl	8008f08 <_free_r>
 800a0f6:	2400      	movs	r4, #0
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fe:	f000 f86b 	bl	800a1d8 <_malloc_usable_size_r>
 800a102:	4285      	cmp	r5, r0
 800a104:	4606      	mov	r6, r0
 800a106:	d802      	bhi.n	800a10e <_realloc_r+0x34>
 800a108:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a10c:	d8f4      	bhi.n	800a0f8 <_realloc_r+0x1e>
 800a10e:	4629      	mov	r1, r5
 800a110:	4640      	mov	r0, r8
 800a112:	f7fe ff6d 	bl	8008ff0 <_malloc_r>
 800a116:	4607      	mov	r7, r0
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0ec      	beq.n	800a0f6 <_realloc_r+0x1c>
 800a11c:	42b5      	cmp	r5, r6
 800a11e:	462a      	mov	r2, r5
 800a120:	4621      	mov	r1, r4
 800a122:	bf28      	it	cs
 800a124:	4632      	movcs	r2, r6
 800a126:	f7fe f876 	bl	8008216 <memcpy>
 800a12a:	4621      	mov	r1, r4
 800a12c:	4640      	mov	r0, r8
 800a12e:	f7fe feeb 	bl	8008f08 <_free_r>
 800a132:	463c      	mov	r4, r7
 800a134:	e7e0      	b.n	800a0f8 <_realloc_r+0x1e>

0800a136 <__ascii_wctomb>:
 800a136:	4603      	mov	r3, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	b141      	cbz	r1, 800a14e <__ascii_wctomb+0x18>
 800a13c:	2aff      	cmp	r2, #255	@ 0xff
 800a13e:	d904      	bls.n	800a14a <__ascii_wctomb+0x14>
 800a140:	228a      	movs	r2, #138	@ 0x8a
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	4770      	bx	lr
 800a14a:	700a      	strb	r2, [r1, #0]
 800a14c:	2001      	movs	r0, #1
 800a14e:	4770      	bx	lr

0800a150 <_raise_r>:
 800a150:	291f      	cmp	r1, #31
 800a152:	b538      	push	{r3, r4, r5, lr}
 800a154:	4605      	mov	r5, r0
 800a156:	460c      	mov	r4, r1
 800a158:	d904      	bls.n	800a164 <_raise_r+0x14>
 800a15a:	2316      	movs	r3, #22
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	f04f 30ff 	mov.w	r0, #4294967295
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a166:	b112      	cbz	r2, 800a16e <_raise_r+0x1e>
 800a168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a16c:	b94b      	cbnz	r3, 800a182 <_raise_r+0x32>
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 f830 	bl	800a1d4 <_getpid_r>
 800a174:	4622      	mov	r2, r4
 800a176:	4601      	mov	r1, r0
 800a178:	4628      	mov	r0, r5
 800a17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a17e:	f000 b817 	b.w	800a1b0 <_kill_r>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d00a      	beq.n	800a19c <_raise_r+0x4c>
 800a186:	1c59      	adds	r1, r3, #1
 800a188:	d103      	bne.n	800a192 <_raise_r+0x42>
 800a18a:	2316      	movs	r3, #22
 800a18c:	6003      	str	r3, [r0, #0]
 800a18e:	2001      	movs	r0, #1
 800a190:	e7e7      	b.n	800a162 <_raise_r+0x12>
 800a192:	2100      	movs	r1, #0
 800a194:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a198:	4620      	mov	r0, r4
 800a19a:	4798      	blx	r3
 800a19c:	2000      	movs	r0, #0
 800a19e:	e7e0      	b.n	800a162 <_raise_r+0x12>

0800a1a0 <raise>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	@ (800a1ac <raise+0xc>)
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f7ff bfd3 	b.w	800a150 <_raise_r>
 800a1aa:	bf00      	nop
 800a1ac:	2000001c 	.word	0x2000001c

0800a1b0 <_kill_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d07      	ldr	r5, [pc, #28]	@ (800a1d0 <_kill_r+0x20>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	f7f8 fe03 	bl	8002dc8 <_kill>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d102      	bne.n	800a1cc <_kill_r+0x1c>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	b103      	cbz	r3, 800a1cc <_kill_r+0x1c>
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000ed8 	.word	0x20000ed8

0800a1d4 <_getpid_r>:
 800a1d4:	f7f8 bdf0 	b.w	8002db8 <_getpid>

0800a1d8 <_malloc_usable_size_r>:
 800a1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1dc:	1f18      	subs	r0, r3, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bfbc      	itt	lt
 800a1e2:	580b      	ldrlt	r3, [r1, r0]
 800a1e4:	18c0      	addlt	r0, r0, r3
 800a1e6:	4770      	bx	lr

0800a1e8 <atan2>:
 800a1e8:	f000 b802 	b.w	800a1f0 <__ieee754_atan2>
 800a1ec:	0000      	movs	r0, r0
	...

0800a1f0 <__ieee754_atan2>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	ec57 6b11 	vmov	r6, r7, d1
 800a1f8:	4273      	negs	r3, r6
 800a1fa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a378 <__ieee754_atan2+0x188>
 800a1fe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a202:	4333      	orrs	r3, r6
 800a204:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a208:	4543      	cmp	r3, r8
 800a20a:	ec51 0b10 	vmov	r0, r1, d0
 800a20e:	4635      	mov	r5, r6
 800a210:	d809      	bhi.n	800a226 <__ieee754_atan2+0x36>
 800a212:	4244      	negs	r4, r0
 800a214:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a218:	4304      	orrs	r4, r0
 800a21a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a21e:	4544      	cmp	r4, r8
 800a220:	468e      	mov	lr, r1
 800a222:	4681      	mov	r9, r0
 800a224:	d907      	bls.n	800a236 <__ieee754_atan2+0x46>
 800a226:	4632      	mov	r2, r6
 800a228:	463b      	mov	r3, r7
 800a22a:	f7f6 f847 	bl	80002bc <__adddf3>
 800a22e:	ec41 0b10 	vmov	d0, r0, r1
 800a232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a236:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a23a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a23e:	4334      	orrs	r4, r6
 800a240:	d103      	bne.n	800a24a <__ieee754_atan2+0x5a>
 800a242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a246:	f000 b89b 	b.w	800a380 <atan>
 800a24a:	17bc      	asrs	r4, r7, #30
 800a24c:	f004 0402 	and.w	r4, r4, #2
 800a250:	ea53 0909 	orrs.w	r9, r3, r9
 800a254:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a258:	d107      	bne.n	800a26a <__ieee754_atan2+0x7a>
 800a25a:	2c02      	cmp	r4, #2
 800a25c:	d05f      	beq.n	800a31e <__ieee754_atan2+0x12e>
 800a25e:	2c03      	cmp	r4, #3
 800a260:	d1e5      	bne.n	800a22e <__ieee754_atan2+0x3e>
 800a262:	a141      	add	r1, pc, #260	@ (adr r1, 800a368 <__ieee754_atan2+0x178>)
 800a264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a268:	e7e1      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a26a:	4315      	orrs	r5, r2
 800a26c:	d106      	bne.n	800a27c <__ieee754_atan2+0x8c>
 800a26e:	f1be 0f00 	cmp.w	lr, #0
 800a272:	da5f      	bge.n	800a334 <__ieee754_atan2+0x144>
 800a274:	a13e      	add	r1, pc, #248	@ (adr r1, 800a370 <__ieee754_atan2+0x180>)
 800a276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a27a:	e7d8      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a27c:	4542      	cmp	r2, r8
 800a27e:	d10f      	bne.n	800a2a0 <__ieee754_atan2+0xb0>
 800a280:	4293      	cmp	r3, r2
 800a282:	f104 34ff 	add.w	r4, r4, #4294967295
 800a286:	d107      	bne.n	800a298 <__ieee754_atan2+0xa8>
 800a288:	2c02      	cmp	r4, #2
 800a28a:	d84c      	bhi.n	800a326 <__ieee754_atan2+0x136>
 800a28c:	4b34      	ldr	r3, [pc, #208]	@ (800a360 <__ieee754_atan2+0x170>)
 800a28e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a292:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a296:	e7ca      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a298:	2c02      	cmp	r4, #2
 800a29a:	d848      	bhi.n	800a32e <__ieee754_atan2+0x13e>
 800a29c:	4b31      	ldr	r3, [pc, #196]	@ (800a364 <__ieee754_atan2+0x174>)
 800a29e:	e7f6      	b.n	800a28e <__ieee754_atan2+0x9e>
 800a2a0:	4543      	cmp	r3, r8
 800a2a2:	d0e4      	beq.n	800a26e <__ieee754_atan2+0x7e>
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a2aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a2ae:	da1e      	bge.n	800a2ee <__ieee754_atan2+0xfe>
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	da01      	bge.n	800a2b8 <__ieee754_atan2+0xc8>
 800a2b4:	323c      	adds	r2, #60	@ 0x3c
 800a2b6:	db1e      	blt.n	800a2f6 <__ieee754_atan2+0x106>
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	463b      	mov	r3, r7
 800a2bc:	f7f6 fade 	bl	800087c <__aeabi_ddiv>
 800a2c0:	ec41 0b10 	vmov	d0, r0, r1
 800a2c4:	f000 f9f4 	bl	800a6b0 <fabs>
 800a2c8:	f000 f85a 	bl	800a380 <atan>
 800a2cc:	ec51 0b10 	vmov	r0, r1, d0
 800a2d0:	2c01      	cmp	r4, #1
 800a2d2:	d013      	beq.n	800a2fc <__ieee754_atan2+0x10c>
 800a2d4:	2c02      	cmp	r4, #2
 800a2d6:	d015      	beq.n	800a304 <__ieee754_atan2+0x114>
 800a2d8:	2c00      	cmp	r4, #0
 800a2da:	d0a8      	beq.n	800a22e <__ieee754_atan2+0x3e>
 800a2dc:	a318      	add	r3, pc, #96	@ (adr r3, 800a340 <__ieee754_atan2+0x150>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 ffe9 	bl	80002b8 <__aeabi_dsub>
 800a2e6:	a318      	add	r3, pc, #96	@ (adr r3, 800a348 <__ieee754_atan2+0x158>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	e014      	b.n	800a318 <__ieee754_atan2+0x128>
 800a2ee:	a118      	add	r1, pc, #96	@ (adr r1, 800a350 <__ieee754_atan2+0x160>)
 800a2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2f4:	e7ec      	b.n	800a2d0 <__ieee754_atan2+0xe0>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	e7e9      	b.n	800a2d0 <__ieee754_atan2+0xe0>
 800a2fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a300:	4619      	mov	r1, r3
 800a302:	e794      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a304:	a30e      	add	r3, pc, #56	@ (adr r3, 800a340 <__ieee754_atan2+0x150>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ffd5 	bl	80002b8 <__aeabi_dsub>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	a10d      	add	r1, pc, #52	@ (adr r1, 800a348 <__ieee754_atan2+0x158>)
 800a314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a318:	f7f5 ffce 	bl	80002b8 <__aeabi_dsub>
 800a31c:	e787      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a31e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a348 <__ieee754_atan2+0x158>)
 800a320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a324:	e783      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a326:	a10c      	add	r1, pc, #48	@ (adr r1, 800a358 <__ieee754_atan2+0x168>)
 800a328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a32c:	e77f      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a32e:	2000      	movs	r0, #0
 800a330:	2100      	movs	r1, #0
 800a332:	e77c      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a334:	a106      	add	r1, pc, #24	@ (adr r1, 800a350 <__ieee754_atan2+0x160>)
 800a336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a33a:	e778      	b.n	800a22e <__ieee754_atan2+0x3e>
 800a33c:	f3af 8000 	nop.w
 800a340:	33145c07 	.word	0x33145c07
 800a344:	3ca1a626 	.word	0x3ca1a626
 800a348:	54442d18 	.word	0x54442d18
 800a34c:	400921fb 	.word	0x400921fb
 800a350:	54442d18 	.word	0x54442d18
 800a354:	3ff921fb 	.word	0x3ff921fb
 800a358:	54442d18 	.word	0x54442d18
 800a35c:	3fe921fb 	.word	0x3fe921fb
 800a360:	0800ae40 	.word	0x0800ae40
 800a364:	0800ae28 	.word	0x0800ae28
 800a368:	54442d18 	.word	0x54442d18
 800a36c:	c00921fb 	.word	0xc00921fb
 800a370:	54442d18 	.word	0x54442d18
 800a374:	bff921fb 	.word	0xbff921fb
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	00000000 	.word	0x00000000

0800a380 <atan>:
 800a380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	ec55 4b10 	vmov	r4, r5, d0
 800a388:	4bbf      	ldr	r3, [pc, #764]	@ (800a688 <atan+0x308>)
 800a38a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a38e:	429e      	cmp	r6, r3
 800a390:	46ab      	mov	fp, r5
 800a392:	d918      	bls.n	800a3c6 <atan+0x46>
 800a394:	4bbd      	ldr	r3, [pc, #756]	@ (800a68c <atan+0x30c>)
 800a396:	429e      	cmp	r6, r3
 800a398:	d801      	bhi.n	800a39e <atan+0x1e>
 800a39a:	d109      	bne.n	800a3b0 <atan+0x30>
 800a39c:	b144      	cbz	r4, 800a3b0 <atan+0x30>
 800a39e:	4622      	mov	r2, r4
 800a3a0:	462b      	mov	r3, r5
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7f5 ff89 	bl	80002bc <__adddf3>
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	460d      	mov	r5, r1
 800a3ae:	e006      	b.n	800a3be <atan+0x3e>
 800a3b0:	f1bb 0f00 	cmp.w	fp, #0
 800a3b4:	f340 812b 	ble.w	800a60e <atan+0x28e>
 800a3b8:	a597      	add	r5, pc, #604	@ (adr r5, 800a618 <atan+0x298>)
 800a3ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3be:	ec45 4b10 	vmov	d0, r4, r5
 800a3c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	4bb2      	ldr	r3, [pc, #712]	@ (800a690 <atan+0x310>)
 800a3c8:	429e      	cmp	r6, r3
 800a3ca:	d813      	bhi.n	800a3f4 <atan+0x74>
 800a3cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a3d0:	429e      	cmp	r6, r3
 800a3d2:	d80c      	bhi.n	800a3ee <atan+0x6e>
 800a3d4:	a392      	add	r3, pc, #584	@ (adr r3, 800a620 <atan+0x2a0>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7f5 ff6d 	bl	80002bc <__adddf3>
 800a3e2:	4bac      	ldr	r3, [pc, #688]	@ (800a694 <atan+0x314>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f7f6 fbaf 	bl	8000b48 <__aeabi_dcmpgt>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d1e7      	bne.n	800a3be <atan+0x3e>
 800a3ee:	f04f 3aff 	mov.w	sl, #4294967295
 800a3f2:	e029      	b.n	800a448 <atan+0xc8>
 800a3f4:	f000 f95c 	bl	800a6b0 <fabs>
 800a3f8:	4ba7      	ldr	r3, [pc, #668]	@ (800a698 <atan+0x318>)
 800a3fa:	429e      	cmp	r6, r3
 800a3fc:	ec55 4b10 	vmov	r4, r5, d0
 800a400:	f200 80bc 	bhi.w	800a57c <atan+0x1fc>
 800a404:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a408:	429e      	cmp	r6, r3
 800a40a:	f200 809e 	bhi.w	800a54a <atan+0x1ca>
 800a40e:	4622      	mov	r2, r4
 800a410:	462b      	mov	r3, r5
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f5 ff51 	bl	80002bc <__adddf3>
 800a41a:	4b9e      	ldr	r3, [pc, #632]	@ (800a694 <atan+0x314>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	f7f5 ff4b 	bl	80002b8 <__aeabi_dsub>
 800a422:	2200      	movs	r2, #0
 800a424:	4606      	mov	r6, r0
 800a426:	460f      	mov	r7, r1
 800a428:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 ff44 	bl	80002bc <__adddf3>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4630      	mov	r0, r6
 800a43a:	4639      	mov	r1, r7
 800a43c:	f7f6 fa1e 	bl	800087c <__aeabi_ddiv>
 800a440:	f04f 0a00 	mov.w	sl, #0
 800a444:	4604      	mov	r4, r0
 800a446:	460d      	mov	r5, r1
 800a448:	4622      	mov	r2, r4
 800a44a:	462b      	mov	r3, r5
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f6 f8ea 	bl	8000628 <__aeabi_dmul>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4680      	mov	r8, r0
 800a45a:	4689      	mov	r9, r1
 800a45c:	f7f6 f8e4 	bl	8000628 <__aeabi_dmul>
 800a460:	a371      	add	r3, pc, #452	@ (adr r3, 800a628 <atan+0x2a8>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	4606      	mov	r6, r0
 800a468:	460f      	mov	r7, r1
 800a46a:	f7f6 f8dd 	bl	8000628 <__aeabi_dmul>
 800a46e:	a370      	add	r3, pc, #448	@ (adr r3, 800a630 <atan+0x2b0>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f7f5 ff22 	bl	80002bc <__adddf3>
 800a478:	4632      	mov	r2, r6
 800a47a:	463b      	mov	r3, r7
 800a47c:	f7f6 f8d4 	bl	8000628 <__aeabi_dmul>
 800a480:	a36d      	add	r3, pc, #436	@ (adr r3, 800a638 <atan+0x2b8>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f5 ff19 	bl	80002bc <__adddf3>
 800a48a:	4632      	mov	r2, r6
 800a48c:	463b      	mov	r3, r7
 800a48e:	f7f6 f8cb 	bl	8000628 <__aeabi_dmul>
 800a492:	a36b      	add	r3, pc, #428	@ (adr r3, 800a640 <atan+0x2c0>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f5 ff10 	bl	80002bc <__adddf3>
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	f7f6 f8c2 	bl	8000628 <__aeabi_dmul>
 800a4a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a648 <atan+0x2c8>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f5 ff07 	bl	80002bc <__adddf3>
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	f7f6 f8b9 	bl	8000628 <__aeabi_dmul>
 800a4b6:	a366      	add	r3, pc, #408	@ (adr r3, 800a650 <atan+0x2d0>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f5 fefe 	bl	80002bc <__adddf3>
 800a4c0:	4642      	mov	r2, r8
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	f7f6 f8b0 	bl	8000628 <__aeabi_dmul>
 800a4c8:	a363      	add	r3, pc, #396	@ (adr r3, 800a658 <atan+0x2d8>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	4689      	mov	r9, r1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f6 f8a7 	bl	8000628 <__aeabi_dmul>
 800a4da:	a361      	add	r3, pc, #388	@ (adr r3, 800a660 <atan+0x2e0>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 feea 	bl	80002b8 <__aeabi_dsub>
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f7f6 f89e 	bl	8000628 <__aeabi_dmul>
 800a4ec:	a35e      	add	r3, pc, #376	@ (adr r3, 800a668 <atan+0x2e8>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f5 fee1 	bl	80002b8 <__aeabi_dsub>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	f7f6 f895 	bl	8000628 <__aeabi_dmul>
 800a4fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800a670 <atan+0x2f0>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fed8 	bl	80002b8 <__aeabi_dsub>
 800a508:	4632      	mov	r2, r6
 800a50a:	463b      	mov	r3, r7
 800a50c:	f7f6 f88c 	bl	8000628 <__aeabi_dmul>
 800a510:	a359      	add	r3, pc, #356	@ (adr r3, 800a678 <atan+0x2f8>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 fecf 	bl	80002b8 <__aeabi_dsub>
 800a51a:	4632      	mov	r2, r6
 800a51c:	463b      	mov	r3, r7
 800a51e:	f7f6 f883 	bl	8000628 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4640      	mov	r0, r8
 800a528:	4649      	mov	r1, r9
 800a52a:	f7f5 fec7 	bl	80002bc <__adddf3>
 800a52e:	4622      	mov	r2, r4
 800a530:	462b      	mov	r3, r5
 800a532:	f7f6 f879 	bl	8000628 <__aeabi_dmul>
 800a536:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	d148      	bne.n	800a5d2 <atan+0x252>
 800a540:	4620      	mov	r0, r4
 800a542:	4629      	mov	r1, r5
 800a544:	f7f5 feb8 	bl	80002b8 <__aeabi_dsub>
 800a548:	e72f      	b.n	800a3aa <atan+0x2a>
 800a54a:	4b52      	ldr	r3, [pc, #328]	@ (800a694 <atan+0x314>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f5 feb1 	bl	80002b8 <__aeabi_dsub>
 800a556:	4b4f      	ldr	r3, [pc, #316]	@ (800a694 <atan+0x314>)
 800a558:	4606      	mov	r6, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	2200      	movs	r2, #0
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f5 feab 	bl	80002bc <__adddf3>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f6 f985 	bl	800087c <__aeabi_ddiv>
 800a572:	f04f 0a01 	mov.w	sl, #1
 800a576:	4604      	mov	r4, r0
 800a578:	460d      	mov	r5, r1
 800a57a:	e765      	b.n	800a448 <atan+0xc8>
 800a57c:	4b47      	ldr	r3, [pc, #284]	@ (800a69c <atan+0x31c>)
 800a57e:	429e      	cmp	r6, r3
 800a580:	d21c      	bcs.n	800a5bc <atan+0x23c>
 800a582:	4b47      	ldr	r3, [pc, #284]	@ (800a6a0 <atan+0x320>)
 800a584:	2200      	movs	r2, #0
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	f7f5 fe95 	bl	80002b8 <__aeabi_dsub>
 800a58e:	4b44      	ldr	r3, [pc, #272]	@ (800a6a0 <atan+0x320>)
 800a590:	4606      	mov	r6, r0
 800a592:	460f      	mov	r7, r1
 800a594:	2200      	movs	r2, #0
 800a596:	4620      	mov	r0, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	f7f6 f845 	bl	8000628 <__aeabi_dmul>
 800a59e:	4b3d      	ldr	r3, [pc, #244]	@ (800a694 <atan+0x314>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7f5 fe8b 	bl	80002bc <__adddf3>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	f7f6 f965 	bl	800087c <__aeabi_ddiv>
 800a5b2:	f04f 0a02 	mov.w	sl, #2
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	e745      	b.n	800a448 <atan+0xc8>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	462b      	mov	r3, r5
 800a5c0:	4938      	ldr	r1, [pc, #224]	@ (800a6a4 <atan+0x324>)
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	f7f6 f95a 	bl	800087c <__aeabi_ddiv>
 800a5c8:	f04f 0a03 	mov.w	sl, #3
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	e73a      	b.n	800a448 <atan+0xc8>
 800a5d2:	4b35      	ldr	r3, [pc, #212]	@ (800a6a8 <atan+0x328>)
 800a5d4:	4e35      	ldr	r6, [pc, #212]	@ (800a6ac <atan+0x32c>)
 800a5d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 fe6b 	bl	80002b8 <__aeabi_dsub>
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	f7f5 fe67 	bl	80002b8 <__aeabi_dsub>
 800a5ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a5f6:	f7f5 fe5f 	bl	80002b8 <__aeabi_dsub>
 800a5fa:	f1bb 0f00 	cmp.w	fp, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	460d      	mov	r5, r1
 800a602:	f6bf aedc 	bge.w	800a3be <atan+0x3e>
 800a606:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a60a:	461d      	mov	r5, r3
 800a60c:	e6d7      	b.n	800a3be <atan+0x3e>
 800a60e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a680 <atan+0x300>)
 800a610:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a614:	e6d3      	b.n	800a3be <atan+0x3e>
 800a616:	bf00      	nop
 800a618:	54442d18 	.word	0x54442d18
 800a61c:	3ff921fb 	.word	0x3ff921fb
 800a620:	8800759c 	.word	0x8800759c
 800a624:	7e37e43c 	.word	0x7e37e43c
 800a628:	e322da11 	.word	0xe322da11
 800a62c:	3f90ad3a 	.word	0x3f90ad3a
 800a630:	24760deb 	.word	0x24760deb
 800a634:	3fa97b4b 	.word	0x3fa97b4b
 800a638:	a0d03d51 	.word	0xa0d03d51
 800a63c:	3fb10d66 	.word	0x3fb10d66
 800a640:	c54c206e 	.word	0xc54c206e
 800a644:	3fb745cd 	.word	0x3fb745cd
 800a648:	920083ff 	.word	0x920083ff
 800a64c:	3fc24924 	.word	0x3fc24924
 800a650:	5555550d 	.word	0x5555550d
 800a654:	3fd55555 	.word	0x3fd55555
 800a658:	2c6a6c2f 	.word	0x2c6a6c2f
 800a65c:	bfa2b444 	.word	0xbfa2b444
 800a660:	52defd9a 	.word	0x52defd9a
 800a664:	3fadde2d 	.word	0x3fadde2d
 800a668:	af749a6d 	.word	0xaf749a6d
 800a66c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a670:	fe231671 	.word	0xfe231671
 800a674:	3fbc71c6 	.word	0x3fbc71c6
 800a678:	9998ebc4 	.word	0x9998ebc4
 800a67c:	3fc99999 	.word	0x3fc99999
 800a680:	54442d18 	.word	0x54442d18
 800a684:	bff921fb 	.word	0xbff921fb
 800a688:	440fffff 	.word	0x440fffff
 800a68c:	7ff00000 	.word	0x7ff00000
 800a690:	3fdbffff 	.word	0x3fdbffff
 800a694:	3ff00000 	.word	0x3ff00000
 800a698:	3ff2ffff 	.word	0x3ff2ffff
 800a69c:	40038000 	.word	0x40038000
 800a6a0:	3ff80000 	.word	0x3ff80000
 800a6a4:	bff00000 	.word	0xbff00000
 800a6a8:	0800ae58 	.word	0x0800ae58
 800a6ac:	0800ae78 	.word	0x0800ae78

0800a6b0 <fabs>:
 800a6b0:	ec51 0b10 	vmov	r0, r1, d0
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a6ba:	ec43 2b10 	vmov	d0, r2, r3
 800a6be:	4770      	bx	lr

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
